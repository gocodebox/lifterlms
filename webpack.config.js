/**
 * Webpack config
 *
 * @package LifterLMS/Scripts/Dev
 *
 * @since 5.5.0
 * @version 6.0.0
 */

const { readdirSync, existsSync } = require( 'fs' ),
	{ resolve } = require( 'path' ),
	{ CleanWebpackPlugin } = require( 'clean-webpack-plugin' ),
	CopyPlugin = require( 'copy-webpack-plugin' ),
	generate = require( '@lifterlms/scripts/config/webpack.config' ),
	config = generate( {
		js: [
			'admin-addons',
			'admin-access-plan-editor',
			'admin-award-certificate',
			'admin-certificate-editor',
			'admin-edit-post-sidebar',

			// Module packages.
			'components',
			'data',
			'icons',
			'utils',
		],
		css: [
			'admin-addons',
		],
		outputPath: '',
	} ),
	defaultOutput = JSON.parse( JSON.stringify( config.output ) ),
	blocks = readdirSync( './src/blocks' ),
	patterns = [],
	ASSETS_DIR = 'assets';

// Setup entries and copy patterns for all blocks in the block library.
blocks.forEach( blockId => {

	const entryId = `blocks/${ blockId }`,
		getPath = ( filename ) => resolve( process.cwd(), `src/blocks/${ blockId }/${ filename }` );

	// Editor script.
	config.entry[ entryId ] = getPath( 'index.js' );

	// Editor styles.
	const editorStyles = getPath( 'editor.scss' );
	if ( existsSync( editorStyles ) ) {
		config.entry[ `${ entryId }/editor` ] = editorStyles;
		patterns.push( {
			from: `${ ASSETS_DIR }/css/llms-blocks/${ blockId }/*-rtl.css`,
			to: `blocks/${ blockId }/[name].[ext]`,
			noErrorOnMissing: true, // When watching this pattern will break and error.
		} );
	}

	// Block.json.
	patterns.push( {
		from: `src/blocks/${ blockId }/block.json`,
		to: `blocks/${ blockId }/block.json`,
	} );

} );

// Conditional output. Block JS is stored in the /blocks directory where as all else is stored in the assets/ dir.
config.output.filename = ( { chunk }, assetInfo ) => {

	if ( chunk.name.includes( 'blocks/' ) ) {
		return '[name]/index.js';
	}

	return `${ ASSETS_DIR }/${ defaultOutput.filename }`;

};

// Store chunks.
config.output.chunkFilename = `${ ASSETS_DIR }/js/chunks/[name].js`;

// Remove the default directory clearer.
config.plugins = config.plugins.filter( plugin => {
	return 'CleanWebpackPlugin' !== plugin.constructor.name;
} );

// Update the paths of CSS files.
config.plugins = config.plugins.map( plugin => {
	const { filename } = plugin.options;
	if ( 'WebpackRTLPlugin' === plugin.constructor.name ) {
		plugin.options.filename = `${ ASSETS_DIR }/${ plugin.options.filename }`;
	} else if ( 'MiniCssExtractPlugin' === plugin.constructor.name ) {
		plugin.options.filename = ( pathData, assetInfo ) => {
			const { chunk } = pathData;
			return chunk.name.includes( 'blocks/' ) ? `[name].css` : `${ ASSETS_DIR }/${ filename }`;
		}
	}
	return plugin;
} );

// Modified clean.
config.plugins.push( new CleanWebpackPlugin( {

	cleanOnceBeforeBuildPatterns: [
		// Source maps.
		`${ ASSETS_DIR }/js/*.js.map`,

		// Chunks.
		`${ ASSETS_DIR }/js/chunks/*.js`,

		// Clean all blocks.
		'blocks/*',
	],

	 cleanAfterEveryBuildPatterns: [

	 	// RTL styles generated by block editor assets.
	 	`${ ASSETS_DIR }/css/llms-blocks`,

	 	// Remove JS entries for style-only SCSS entries.
	 	`blocks/**/editor/`

	 ],

} ) );

// Copy block.json files to blocks/${block}/block.json
config.plugins.push( new CopyPlugin( {
	patterns,
} ) );

// console.dir( config, { depth: null } );
// process.exit();

module.exports = config;
