!function(c){var t={$buttons:null,$container:null,$ui:null,attempt_key:null,current_question:0,total_questions:0,questions:{},validators:{},status:null,bind:function(){var e=this;c("#llms_start_quiz").on("click",function(t){t.preventDefault(),e.start_quiz()}),c(".llms-donut").each(function(){LLMS.Donut(c(this))}),c("#llms-quiz-attempt-select").on("change",function(){var t=c(this).val();t&&(window.location.href=t)}),c(window).on("beforeunload",function(){if(e.status)return LLMS.l10n.translate("Are you sure you wish to quit this quiz attempt?")}),c(window).on("unload",function(){e.status&&e.complete_quiz()}),c(document).on("llms-post-append-question",e.post_append_question),this.register_validator("content",this.validate),this.register_validator("choice",this.validate_choice),this.register_validator("picture_choice",this.validate_choice),this.register_validator("true_false",this.validate_choice)},add_error:function(t){this.$container.find(".llms-error").remove();var e=c('<p class="llms-error">'+t+'<a href="#"><i class="fa fa-times-circle" aria-hidden="true"></i></a></p>');e.on("click","a",function(t){t.preventDefault(),e.fadeOut("200"),setTimeout(function(){e.remove()},210)}),this.$container.append(e)},answer_question:function(e){var t,s=this,i=this.$container.find(".llms-question-wrapper"),n=i.attr("data-type");if(this.validators[n]){if(!(t=this.validators[n](i))||!0!==t.valid||!t.answer)return s.add_error(t.valid);LLMS.Ajax.call({data:{action:"quiz_answer_question",answer:t.answer,attempt_key:s.attempt_key,question_id:i.attr("data-id"),question_type:i.attr("data-type")},beforeSend:function(){var t=e.hasClass("llms-button-quiz-complete")?LLMS.l10n.translate("Grading Quiz..."):LLMS.l10n.translate("Loading Question...");s.toggle_loader("show",t),s.update_progress_bar("increment")},success:function(t){if(s.toggle_loader("hide"),t.data&&t.data.html)t.data.question_id&&s.questions["q-"+t.data.question_id]?s.load_question(s.questions["q-"+t.data.question_id]):s.load_question(t.data.html);else if(t.data&&t.data.redirect)s.redirect(t.data.redirect);else if(t.message)s.$container.append("<p>"+t.message+"</p>");else{var e=LLMS.l10n.translate("An unknown error occurred. Please try again.");s.$container.append("<p>"+e+"</p>")}}})}else console.log("No validator registered for question type "+n)},complete_quiz:function(){var s=this;LLMS.Ajax.call({data:{action:"quiz_end",attempt_key:s.attempt_key},beforeSend:function(){s.toggle_loader("show","Grading Quiz...")},success:function(t){if(s.toggle_loader("hide"),t.data&&t.data.redirect)s.redirect(t.data.redirect);else if(t.message)s.$container.append("<p>"+t.message+"</p>");else{var e=LLMS.l10n.translate("An unknown error occurred. Please try again.");s.$container.append("<p>"+e+"</p>")}}})},get_question_index:function(t){return Object.keys(this.questions).indexOf("q-"+t)},redirect:function(t){this.toggle_loader("show","Grading Quiz..."),this.status=null,window.location.href=t},previous_question:function(){var t=this;t.toggle_loader("show",LLMS.l10n.translate("Loading Question...")),t.update_progress_bar("decrement");var e=Object.keys(t.questions),s=e.indexOf("q-"+t.current_question),i=e[0];1<=s&&(i=e[s-1]),setTimeout(function(){t.toggle_loader("hide"),t.load_question(t.questions[i])},100)},register_validator:function(t,e){this.validators[t]=e},start_quiz:function(){var s=this;this.load_ui_elements(),this.$ui=c("#llms-quiz-ui"),this.$buttons=c("#llms-quiz-nav button"),this.$container=c("#llms-quiz-question-wrapper"),c("#llms-next-question, #llms-complete-quiz").on("click",function(t){t.preventDefault(),s.answer_question(c(this))}),c("#llms-prev-question").on("click",function(t){t.preventDefault(),s.previous_question()}),LLMS.Ajax.call({data:{action:"quiz_start",attempt_key:c("#llms-attempt-key").val(),lesson_id:c("#llms-lesson-id").val(),quiz_id:c("#llms-quiz-id").val()},beforeSend:function(){s.status=!0,c("#llms-quiz-wrapper, #quiz-start-button").remove(),c("html, body").stop().animate({scrollTop:0},500),s.toggle_loader("show",LLMS.l10n.translate("Loading Quiz..."))},error:function(t,e,s){console.log(t,e,s)},success:function(t){if(s.toggle_loader("hide"),t.data&&t.data.html)t.data.time_limit&&s.start_quiz_timer(t.data.time_limit),s.attempt_key=t.data.attempt_key,s.total_questions=t.data.total,s.load_question(t.data.html);else if(t.message)s.$container.append("<p>"+t.message+"</p>");else{var e=LLMS.l10n.translate("An unknown error occurred. Please try again.");s.$container.append("<p>"+e+"</p>")}}}),LLMS.is_touch_device()||(this.$ui.on("mouseenter","li.llms-choice label",function(){c(this).addClass("hovered")}),this.$ui.on("mouseleave","li.llms-choice label",function(){c(this).removeClass("hovered")}))},start_quiz_timer:function(t){var e=c('<div class="llms-quiz-timer" id="llms-quiz-timer" />'),s=LLMS.l10n.translate("Time Remaining");e.append('<i class="fa fa-clock-o" aria-hidden="true"></i><span class="screen-reader-text">'+s+"</span>"),e.append('<div id="llms-tiles" class="llms-tiles"></div>'),c("#llms-quiz-header").append(e);var i,n,a,l,o=this,r=(new Date).getTime()+60*t*1e3,u=60*t*1e3,d=document.getElementById("llms-tiles");setTimeout(function(){o.complete_quiz()},1e3+u),this.getCountdown(t,r,u,i,n,a,l,d),setInterval(function(){o.getCountdown(t,r,u,i,n,a,l,d)},1e3)},trigger:function(t){"answer_question"===t&&(this.get_question_index(this.current_question)===this.total_questions?c("#llms-complete-quiz").trigger("click"):c("#llms-next-question").trigger("click"))},load_question:function(t){var e=c(t),s=e.attr("data-id");this.questions["q-"+s]||(this.questions["q-"+s]=e),this.update_progress(s),this.current_question=s,c(document).trigger("llms-pre-append-question",e),this.$container.append(e),c(document).trigger("llms-post-append-question",e)},load_ui_elements:function(){var t=c('<div class="llms-quiz-ui" id="llms-quiz-ui" />'),e=c('<header class="llms-quiz-header" id="llms-quiz-header" />');$footer=c('<footer class="llms-quiz-nav" id="llms-quiz-nav" />'),$footer.append('<button class="button large llms-button-action" id="llms-next-question" name="llms_next_question" type="submit">'+LLMS.l10n.translate("Next Question")+"</button>"),$footer.append('<button class="button large llms-button-action llms-button-quiz-complete" id="llms-complete-quiz" name="llms_complete_quiz" type="submit" style="display:none;">'+LLMS.l10n.translate("Complete Quiz")+"</button>"),$footer.append('<button class="button llms-button-secondary" id="llms-prev-question" name="llms_prev_question" type="submit" style="display:none;">'+LLMS.l10n.translate("Previous Question")+"</button>"),e.append('<div class="llms-progress"><div class="progress-bar-complete"></div></div>'),$footer.append('<div class="llms-quiz-counter" id="llms-quiz-counter"><span class="llms-current"></span><span class="llms-sep">/</span><span class="llms-total"></span></div>'),t.append(e).append('<div class="llms-quiz-question-wrapper" id="llms-quiz-question-wrapper" />').append($footer),c("#llms-quiz-wrapper").after(t)},post_append_question:function(t,e){c(e).find("audio").length&&wp.mediaelement.initialize()},toggle_loader:function(t,e){"show"===t?(e=e||LLMS.l10n.translate("Loading..."),this.$buttons.attr("disabled","disabled"),this.$container.empty(),LLMS.Spinner.start(this.$container),this.$container.append('<div class="llms-quiz-loading">'+LLMS.l10n.translate(e)+"</div>")):(LLMS.Spinner.stop(this.$container),this.$buttons.removeAttr("disabled"),this.$container.find(".llms-quiz-loading").remove())},update_progress:function(t){var e=this.get_question_index(t);-1!==e&&(e++,c("#llms-quiz-counter .llms-current").text(e),1===e&&(c("#llms-quiz-counter .llms-total").text(this.total_questions),c("#llms-quiz-counter").show()),2<=e?c("#llms-prev-question").show():c("#llms-prev-question").hide(),e===this.total_questions?(c("#llms-next-question").hide(),c("#llms-complete-quiz").show()):(c("#llms-next-question").show(),c("#llms-complete-quiz").hide()))},update_progress_bar:function(t){var e=this.get_question_index(this.current_question);"increment"===t?e++:e--,progress=e/this.total_questions*100,this.$ui.find(".progress-bar-complete").css("width",progress+"%")},getCountdown:function(t,e,s,i,n,a,l,o){var r=(e-(new Date).getTime())/1e3;0<=r&&(1e3*r<s/2&&c("#llms-quiz-timer").addClass("color-half"),1e3*r<s/4&&(c("#llms-quiz-timer").removeClass("color-half"),c("#llms-quiz-timer").addClass("color-empty")),this.pad(parseInt(r/86400)),r%=86400,n=this.pad(parseInt(r/3600)),r%=3600,a=this.pad(parseInt(r/60)),l=this.pad(parseInt(r%60)),o.innerHTML='<span class="hours">'+n+'</span>:<span class="minutes">'+a+'</span>:<span class="seconds">'+l+"</span>")},pad:function(t){return(t<10?"0":"")+t},validate:function(t){return{answer:[],valid:!0}},validate_choice:function(t){var e=window.llms.quizzes.validate(t),s=t.find("input:checked");return s.length?s.each(function(){e.answer.push(c(this).val())}):e.valid=LLMS.l10n.translate("You must select an answer to continue."),e}};t.bind(),window.llms=window.llms||{},window.llms.quizzes=t}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxsbXMtcXVpei5qcyJdLCJuYW1lcyI6WyIkIiwicXVpeiIsIiRidXR0b25zIiwiJGNvbnRhaW5lciIsIiR1aSIsImF0dGVtcHRfa2V5IiwiY3VycmVudF9xdWVzdGlvbiIsInRvdGFsX3F1ZXN0aW9ucyIsInF1ZXN0aW9ucyIsInZhbGlkYXRvcnMiLCJzdGF0dXMiLCJiaW5kIiwic2VsZiIsInRoaXMiLCJvbiIsImUiLCJwcmV2ZW50RGVmYXVsdCIsInN0YXJ0X3F1aXoiLCJlYWNoIiwiTExNUyIsIkRvbnV0IiwidmFsIiwid2luZG93IiwibG9jYXRpb24iLCJocmVmIiwibDEwbiIsInRyYW5zbGF0ZSIsImNvbXBsZXRlX3F1aXoiLCJkb2N1bWVudCIsInBvc3RfYXBwZW5kX3F1ZXN0aW9uIiwicmVnaXN0ZXJfdmFsaWRhdG9yIiwidmFsaWRhdGUiLCJ2YWxpZGF0ZV9jaG9pY2UiLCJhZGRfZXJyb3IiLCJtc2ciLCJmaW5kIiwicmVtb3ZlIiwiJGVyciIsImZhZGVPdXQiLCJzZXRUaW1lb3V0IiwiYXBwZW5kIiwiYW5zd2VyX3F1ZXN0aW9uIiwiJGJ0biIsInZhbGlkIiwiJHF1ZXN0aW9uIiwidHlwZSIsImF0dHIiLCJhbnN3ZXIiLCJBamF4IiwiY2FsbCIsImRhdGEiLCJhY3Rpb24iLCJxdWVzdGlvbl9pZCIsInF1ZXN0aW9uX3R5cGUiLCJiZWZvcmVTZW5kIiwiaGFzQ2xhc3MiLCJ0b2dnbGVfbG9hZGVyIiwidXBkYXRlX3Byb2dyZXNzX2JhciIsInN1Y2Nlc3MiLCJyIiwiaHRtbCIsImxvYWRfcXVlc3Rpb24iLCJyZWRpcmVjdCIsIm1lc3NhZ2UiLCJjb25zb2xlIiwibG9nIiwiZ2V0X3F1ZXN0aW9uX2luZGV4IiwicWlkIiwiT2JqZWN0Iiwia2V5cyIsImluZGV4T2YiLCJ1cmwiLCJwcmV2aW91c19xdWVzdGlvbiIsImlkcyIsImN1cnIiLCJwcmV2X2lkIiwiZnVuYyIsImxvYWRfdWlfZWxlbWVudHMiLCJsZXNzb25faWQiLCJxdWl6X2lkIiwic3RvcCIsImFuaW1hdGUiLCJzY3JvbGxUb3AiLCJlcnJvciIsInMiLCJ0IiwidGltZV9saW1pdCIsInN0YXJ0X3F1aXpfdGltZXIiLCJ0b3RhbCIsImlzX3RvdWNoX2RldmljZSIsImFkZENsYXNzIiwicmVtb3ZlQ2xhc3MiLCJ0b3RhbF9taW51dGVzIiwiJGVsIiwiZGF5cyIsImhvdXJzIiwibWludXRlcyIsInNlY29uZHMiLCJ0YXJnZXRfZGF0ZSIsIkRhdGUiLCJnZXRUaW1lIiwiY291bnRkb3duIiwiZ2V0RWxlbWVudEJ5SWQiLCJnZXRDb3VudGRvd24iLCJzZXRJbnRlcnZhbCIsInRyaWdnZXIiLCJldmVudCIsIiRodG1sIiwidXBkYXRlX3Byb2dyZXNzIiwiJGhlYWRlciIsIiRmb290ZXIiLCJhZnRlciIsImxlbmd0aCIsIndwIiwibWVkaWFlbGVtZW50IiwiaW5pdGlhbGl6ZSIsImRpc3BsYXkiLCJlbXB0eSIsIlNwaW5uZXIiLCJzdGFydCIsInJlbW92ZUF0dHIiLCJpbmRleCIsInRleHQiLCJzaG93IiwiaGlkZSIsImRpciIsInByb2dyZXNzIiwiY3NzIiwic2Vjb25kc19sZWZ0IiwicGFkIiwicGFyc2VJbnQiLCJpbm5lckhUTUwiLCJuIiwicmV0IiwibGxtcyIsInF1aXp6ZXMiLCJjaGVja2VkIiwicHVzaCIsImpRdWVyeSJdLCJtYXBwaW5ncyI6IkNBU0MsU0FBWUEsR0FFWixJQUFJQyxFQUFPLENBTVZDLFNBQVUsS0FNVkMsV0FBWSxLQU1aQyxJQUFLLEtBTUxDLFlBQWEsS0FNYkMsaUJBQWtCLEVBTWxCQyxnQkFBaUIsRUFNakJDLFVBQVcsR0FPWEMsV0FBWSxHQVNaQyxPQUFRLEtBUVJDLEtBQU0sV0FFTCxJQUFJQyxFQUFPQyxLQUdYYixFQUFHLG9CQUFxQmMsR0FBSSxRQUFTLFNBQVVDLEdBQzlDQSxFQUFFQyxpQkFDRkosRUFBS0ssZUFJTmpCLEVBQUcsZUFBZ0JrQixLQUFNLFdBQ3hCQyxLQUFLQyxNQUFPcEIsRUFBR2EsU0FJaEJiLEVBQUcsNkJBQThCYyxHQUFJLFNBQVUsV0FD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WSxHQUUxQixJQUFJeUYsRUFBTS9HLE9BQU9nSCxLQUFLQyxRQUFReEcsU0FBVWEsR0FDdkM0RixFQUFVNUYsRUFBVVQsS0FBTSxpQkFVM0IsT0FSTXFHLEVBQVF4QixPQUdid0IsRUFBUXRILEtBQU0sV0FDYm1ILEVBQUl0RixPQUFPMEYsS0FBTXpJLEVBQUdhLE1BQU9RLFNBSDVCZ0gsRUFBSTFGLE1BQVF4QixLQUFLTSxLQUFLQyxVQUFXLDBDQU8zQjJHLElBTVRwSSxFQUFLVSxPQUVMVyxPQUFPZ0gsS0FBT2hILE9BQU9nSCxNQUFRLEdBQzdCaEgsT0FBT2dILEtBQUtDLFFBQVV0SSxFQXB4QnRCLENBc3hCSXlJIiwiZmlsZSI6ImxsbXMtcXVpei5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWwgTExNUywgJCAqL1xuLyoganNoaW50IHN0cmljdDogdHJ1ZSAqL1xuXG4vKipcbiAqIEZyb250IEVuZCBRdWl6IENsYXNzXG4gKiBAdHlwZSAgICAge09iamVjdH1cbiAqIEBzaW5jZSAgICAxLjAuMFxuICogQHZlcnNpb24gIDMuMjQuM1xuICovXG47KCBmdW5jdGlvbiggJCApIHtcblxuXHR2YXIgcXVpeiA9IHtcblxuXHRcdC8qKlxuXHRcdCAqIFNlbGVjdG9yIG9mIGFsbCB0aGUgYXZhaWxhYmxlIGJ1dHRvbiBlbGVtZW50c1xuXHRcdCAqIEB0eXBlICBvYmpcblx0XHQgKi9cblx0XHQkYnV0dG9uczogbnVsbCxcblxuXHRcdC8qKlxuXHRcdCAqIE1haW4gUXVlc3Rpb24gQ29udGFpbmVyIEVsZW1lbnRcblx0XHQgKiBAdHlwZSAgb2JqXG5cdFx0ICovXG5cdFx0JGNvbnRhaW5lcjogbnVsbCxcblxuXHRcdC8qKlxuXHRcdCAqIE1haW4gUXVpeiBjb250YWluZXIgVUkgZWxlbWVudFxuXHRcdCAqIEB0eXBlICBvYmpcblx0XHQgKi9cblx0XHQkdWk6IG51bGwsXG5cblx0XHQvKipcblx0XHQgKiBBdHRlbXB0IGtleSBmb3IgdGhlIGN1cnJlbnQgcXVpelxuXHRcdCAqIEB0eXBlICB7W3R5cGVdfVxuXHRcdCAqL1xuXHRcdGF0dGVtcHRfa2V5OiBudWxsLFxuXG5cdFx0LyoqXG5cdFx0ICogUXVlc3Rpb24gSUQgb2YgdGhlIGN1cnJlbnQgcXVlc3Rpb25cblx0XHQgKiBAdHlwZSAge051bWJlcn1cblx0XHQgKi9cblx0XHRjdXJyZW50X3F1ZXN0aW9uOiAwLFxuXG5cdFx0LyoqXG5cdFx0ICogVG90YWwgbnVtYmVyIG9mIHF1ZXN0aW9ucyBpbiB0aGUgY3VycmVudCBxdWl6XG5cdFx0ICogQHR5cGUgIHtOdW1iZXJ9XG5cdFx0ICovXG5cdFx0dG90YWxfcXVlc3Rpb25zOiAwLFxuXG5cdFx0LyoqXG5cdFx0ICogT2JqZWN0IG9mIHF1aXogcXVlc3Rpb24gSFRNTFxuXHRcdCAqIEB0eXBlICB7T2JqZWN0fVxuXHRcdCAqL1xuXHRcdHF1ZXN0aW9uczoge30sXG5cblx0XHQvKipcblx0XHQgKiBWYWxpZGF0b3IgZnVuY3Rpb25zIGZvciBxdWVzdGlvbiB0eXBlc1xuXHRcdCAqIFRoaXJkIHBhcnR5IGN1c3RvbSBxdWVzdGlvbiB0eXBlcyBjYW4gcmVnaXN0ZXIgdmFsaWRhdG9ycyBmb3IgdXNlIHdoZW4gYW5zd2VyaW5nIHF1ZXN0aW9uc1xuXHRcdCAqIEB0eXBlICB7T2JqZWN0fVxuXHRcdCAqL1xuXHRcdHZhbGlkYXRvcnM6IHt9LFxuXG5cdFx0LyoqXG5cdFx0ICogUmVjb3JkcyBjdXJyZW50IHN0YXR1cyBvZiBhIHF1aXogc2Vzc2lvblxuXHRcdCAqIElmIGEgdXNlciBhdHRlbXB0cyB0byBuYXZpZ2F0ZSBhd2F5IGZyb20gYSBxdWl6XG5cdFx0ICogd2hpbGUgdGFraW5nIHRoZSBxdWl6IHRoZXknbGwgYmUgd2FybmVkIHRoYXQgdGhlaXIgcHJvZ3Jlc3Ncblx0XHQgKiB3aWxsIG5vdCBiZSBzYXZlZCBpZiB0aGlzIHN0YXR1cyBpcyBub3QgbnVsbFxuXHRcdCAqIEB0eXBlICBib29sZWFuXG5cdFx0ICovXG5cdFx0c3RhdHVzOiBudWxsLFxuXG5cdFx0LyoqXG5cdFx0ICogQmluZCBET00gZXZlbnRzXG5cdFx0ICogQHJldHVybiB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDEuMC4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuNlxuXHRcdCAqL1xuXHRcdGJpbmQ6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cblx0XHRcdC8vIHN0YXJ0IHF1aXpcblx0XHRcdCQoICcjbGxtc19zdGFydF9xdWl6JyApLm9uKCAnY2xpY2snLCBmdW5jdGlvbiggZSApIHtcblx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRzZWxmLnN0YXJ0X3F1aXooKTtcblx0XHRcdH0gKTtcblxuXHRcdFx0Ly8gZHJhdyBxdWl6IGdyYWRlIGNpcmN1bGFyIGNoYXJ0XG5cdFx0XHQkKCAnLmxsbXMtZG9udXQnICkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdExMTVMuRG9udXQoICQoIHRoaXMgKSApO1xuXHRcdFx0fSApO1xuXG5cdFx0XHQvLyByZWRpcmVjdCB0byBhdHRlbXB0IG9uIGF0dGVtcHQgc2VsZWN0aW9uIGNoYW5nZVxuXHRcdFx0JCggJyNsbG1zLXF1aXotYXR0ZW1wdC1zZWxlY3QnICkub24oICdjaGFuZ2UnLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIHZhbCA9ICQoIHRoaXMgKS52YWwoKTtcblx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0d2luZG93LmxvY2F0aW9uLmhyZWYgPSB2YWw7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblxuXHRcdFx0Ly8gd2FybiB3aGVuIHF1aXogaXMgcnVubmluZyBhbmQgdXNlciB0cmllcyB0byBsZWF2ZSB0aGUgcGFnZVxuXHRcdFx0JCggd2luZG93ICkub24oICdiZWZvcmV1bmxvYWQnLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBzZWxmLnN0YXR1cyApIHtcblx0XHRcdFx0XHRyZXR1cm4gTExNUy5sMTBuLnRyYW5zbGF0ZSggJ0FyZSB5b3Ugc3VyZSB5b3Ugd2lzaCB0byBxdWl0IHRoaXMgcXVpeiBhdHRlbXB0PycgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXG5cdFx0XHQvLyBjb21wbGV0ZSB0aGUgcXVpeiBhdHRlbXB0IHdoZW4gdXNlciBsZWF2ZXMgaWYgdGhlIHF1aXogaXMgcnVubmluZ1xuXHRcdFx0JCggd2luZG93ICkub24oICd1bmxvYWQnLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBzZWxmLnN0YXR1cyApIHtcblx0XHRcdFx0XHRzZWxmLmNvbXBsZXRlX3F1aXooKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXG5cdFx0XHQkKCBkb2N1bWVudCApLm9uKCAnbGxtcy1wb3N0LWFwcGVuZC1xdWVzdGlvbicsIHNlbGYucG9zdF9hcHBlbmRfcXVlc3Rpb24gKTtcblxuXHRcdFx0Ly8gcmVnaXN0ZXIgdmFsaWRhdG9yc1xuXHRcdFx0dGhpcy5yZWdpc3Rlcl92YWxpZGF0b3IoICdjb250ZW50JywgdGhpcy52YWxpZGF0ZSApO1xuXHRcdFx0dGhpcy5yZWdpc3Rlcl92YWxpZGF0b3IoICdjaG9pY2UnLCB0aGlzLnZhbGlkYXRlX2Nob2ljZSApO1xuXHRcdFx0dGhpcy5yZWdpc3Rlcl92YWxpZGF0b3IoICdwaWN0dXJlX2Nob2ljZScsIHRoaXMudmFsaWRhdGVfY2hvaWNlICk7XG5cdFx0XHR0aGlzLnJlZ2lzdGVyX3ZhbGlkYXRvciggJ3RydWVfZmFsc2UnLCB0aGlzLnZhbGlkYXRlX2Nob2ljZSApO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEFkZCBhbiBlcnJvciBtZXNzYWdlIHRvIHRoZSBVSVxuXHRcdCAqIEBwYXJhbSAgICBzdHJpbmcgICBtc2cgIGVycm9yIG1lc3NhZ2Ugc3RyaW5nXG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdGFkZF9lcnJvcjogZnVuY3Rpb24oIG1zZyApIHtcblxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xuXG5cdFx0XHRzZWxmLiRjb250YWluZXIuZmluZCggJy5sbG1zLWVycm9yJyApLnJlbW92ZSgpO1xuXHRcdFx0dmFyICRlcnIgPSAkKCAnPHAgY2xhc3M9XCJsbG1zLWVycm9yXCI+JyArIG1zZyArICc8YSBocmVmPVwiI1wiPjxpIGNsYXNzPVwiZmEgZmEtdGltZXMtY2lyY2xlXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPjwvYT48L3A+JyApO1xuXHRcdFx0JGVyci5vbiggJ2NsaWNrJywgJ2EnLCBmdW5jdGlvbiggZSApIHtcblx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHQkZXJyLmZhZGVPdXQoICcyMDAnICk7XG5cdFx0XHRcdHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdCRlcnIucmVtb3ZlKCk7XG5cdFx0XHRcdH0sIDIxMCApO1xuXHRcdFx0fSApO1xuXHRcdFx0c2VsZi4kY29udGFpbmVyLmFwcGVuZCggJGVyciApO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEFuc3dlciBhIFF1ZXN0aW9uXG5cdFx0ICogQHBhcmFtICAgIG9iaiAgICRidG4gICBqUXVlcnkgb2JqZWN0IGZvciB0aGUgXCJOZXh0IExlc3NvblwiIGJ1dHRvblxuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDEuMC4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuNlxuXHRcdCAqL1xuXHRcdGFuc3dlcl9xdWVzdGlvbjogZnVuY3Rpb24oICRidG4gKSB7XG5cblx0XHRcdHZhciBzZWxmID0gdGhpcyxcblx0XHRcdFx0JHF1ZXN0aW9uID0gdGhpcy4kY29udGFpbmVyLmZpbmQoICcubGxtcy1xdWVzdGlvbi13cmFwcGVyJyApLFxuXHRcdFx0XHR0eXBlID0gJHF1ZXN0aW9uLmF0dHIoICdkYXRhLXR5cGUnICksXG5cdFx0XHRcdHZhbGlkO1xuXG5cdFx0XHRpZiAoICEgdGhpcy52YWxpZGF0b3JzWyB0eXBlIF0gKSB7XG5cblx0XHRcdFx0Y29uc29sZS5sb2coICdObyB2YWxpZGF0b3IgcmVnaXN0ZXJlZCBmb3IgcXVlc3Rpb24gdHlwZSAnICsgdHlwZSApO1xuXHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdH1cblxuXHRcdFx0dmFsaWQgPSB0aGlzLnZhbGlkYXRvcnNbIHR5cGUgXSggJHF1ZXN0aW9uICk7XG5cdFx0XHRpZiAoICEgdmFsaWQgfHwgdHJ1ZSAhPT0gdmFsaWQudmFsaWQgfHwgIXZhbGlkLmFuc3dlciApIHtcblx0XHRcdFx0cmV0dXJuIHNlbGYuYWRkX2Vycm9yKCB2YWxpZC52YWxpZCApO1xuXHRcdFx0fVxuXG5cdFx0XHRMTE1TLkFqYXguY2FsbCgge1xuXHRcdFx0XHRkYXRhOiB7XG5cdFx0XHRcdFx0YWN0aW9uOiAncXVpel9hbnN3ZXJfcXVlc3Rpb24nLFxuXHRcdFx0XHRcdGFuc3dlcjogdmFsaWQuYW5zd2VyLFxuXHRcdFx0XHRcdGF0dGVtcHRfa2V5OiBzZWxmLmF0dGVtcHRfa2V5LFxuXHRcdFx0XHRcdHF1ZXN0aW9uX2lkOiAkcXVlc3Rpb24uYXR0ciggJ2RhdGEtaWQnICksXG5cdFx0XHRcdFx0cXVlc3Rpb25fdHlwZTogJHF1ZXN0aW9uLmF0dHIoICdkYXRhLXR5cGUnICksXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGJlZm9yZVNlbmQ6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0dmFyIG1zZyA9ICRidG4uaGFzQ2xhc3MoICdsbG1zLWJ1dHRvbi1xdWl6LWNvbXBsZXRlJyApID8gTExNUy5sMTBuLnRyYW5zbGF0ZSggJ0dyYWRpbmcgUXVpei4uLicgKSA6IExMTVMubDEwbi50cmFuc2xhdGUoICdMb2FkaW5nIFF1ZXN0aW9uLi4uJyApO1xuXHRcdFx0XHRcdHNlbGYudG9nZ2xlX2xvYWRlciggJ3Nob3cnLCBtc2cgKTtcblxuXHRcdFx0XHRcdHNlbGYudXBkYXRlX3Byb2dyZXNzX2JhciggJ2luY3JlbWVudCcgKTtcblxuXHRcdFx0XHR9LFxuXHRcdFx0XHRzdWNjZXNzOiBmdW5jdGlvbiggciApIHtcblxuXHRcdFx0XHRcdHNlbGYudG9nZ2xlX2xvYWRlciggJ2hpZGUnICk7XG5cblx0XHRcdFx0XHRpZiAoIHIuZGF0YSAmJiByLmRhdGEuaHRtbCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gbG9hZCBodG1sIGZyb20gdGhlIGNhY2hlZCBxdWVzdGlvbnMgaWYgaXQgZXhpc3RzIGFscmVhZHlcblx0XHRcdFx0XHRcdGlmICggci5kYXRhLnF1ZXN0aW9uX2lkICYmIHNlbGYucXVlc3Rpb25zWyAncS0nICsgci5kYXRhLnF1ZXN0aW9uX2lkIF0gKSB7XG5cblx0XHRcdFx0XHRcdFx0c2VsZi5sb2FkX3F1ZXN0aW9uKCBzZWxmLnF1ZXN0aW9uc1sgJ3EtJyArIHIuZGF0YS5xdWVzdGlvbl9pZCBdICk7XG5cblx0XHRcdFx0XHRcdC8vIGxvYWQgaHRtbCBmcm9tIHNlcnZlciBpZiB0aGUgcXVlc3Rpb24ncyBuZXZlciBiZWVuIHNlZW4gYmVmb3JlXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRzZWxmLmxvYWRfcXVlc3Rpb24oIHIuZGF0YS5odG1sICk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9IGVsc2UgaWYgKCByLmRhdGEgJiYgci5kYXRhLnJlZGlyZWN0ICkge1xuXG5cdFx0XHRcdFx0XHRzZWxmLnJlZGlyZWN0KCByLmRhdGEucmVkaXJlY3QgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIHIubWVzc2FnZSApIHtcblxuXHRcdFx0XHRcdFx0c2VsZi4kY29udGFpbmVyLmFwcGVuZCggJzxwPicgKyByLm1lc3NhZ2UgKyAnPC9wPicgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdHZhciBtc2cgPSBMTE1TLmwxMG4udHJhbnNsYXRlKCAnQW4gdW5rbm93biBlcnJvciBvY2N1cnJlZC4gUGxlYXNlIHRyeSBhZ2Fpbi4nICk7XG5cdFx0XHRcdFx0XHRzZWxmLiRjb250YWluZXIuYXBwZW5kKCAnPHA+JyArIG1zZyArICc8L3A+JyApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSApO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIENvbXBsZXRlIHRoZSBxdWl6XG5cdFx0ICogQ2FsbGVkIHdoZW4gdGltZWQgcXVpenplcyByZWFjaCB0aW1lIGxpbWl0XG5cdFx0ICogJiBkdXJpbmcgdW5sb2FkIGV2ZW50cyB0byByZWNvcmQgdGhlIGF0dGVtcHQgYXMgYWJhbmRvbmVkXG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMS4wLjBcblx0XHQgKiBAdmVyc2lvbiAgMy45LjBcblx0XHQgKi9cblx0XHRjb21wbGV0ZV9xdWl6OiBmdW5jdGlvbigpIHtcblxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xuXG5cdFx0XHRMTE1TLkFqYXguY2FsbCgge1xuXHRcdFx0XHRkYXRhOiB7XG5cdFx0XHRcdFx0YWN0aW9uOiAncXVpel9lbmQnLFxuXHRcdFx0XHRcdGF0dGVtcHRfa2V5OiBzZWxmLmF0dGVtcHRfa2V5LFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRiZWZvcmVTZW5kOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdHNlbGYudG9nZ2xlX2xvYWRlciggJ3Nob3cnLCAnR3JhZGluZyBRdWl6Li4uJyApO1xuXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHN1Y2Nlc3M6IGZ1bmN0aW9uKCByICkge1xuXG5cdFx0XHRcdFx0c2VsZi50b2dnbGVfbG9hZGVyKCAnaGlkZScgKTtcblxuXHRcdFx0XHRcdGlmICggci5kYXRhICYmIHIuZGF0YS5yZWRpcmVjdCApIHtcblxuXHRcdFx0XHRcdFx0c2VsZi5yZWRpcmVjdCggci5kYXRhLnJlZGlyZWN0ICk7XG5cblx0XHRcdFx0XHR9IGVsc2UgaWYgKCByLm1lc3NhZ2UgKSB7XG5cblx0XHRcdFx0XHRcdHNlbGYuJGNvbnRhaW5lci5hcHBlbmQoICc8cD4nICsgci5tZXNzYWdlICsgJzwvcD4nICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHR2YXIgbXNnID0gTExNUy5sMTBuLnRyYW5zbGF0ZSggJ0FuIHVua25vd24gZXJyb3Igb2NjdXJyZWQuIFBsZWFzZSB0cnkgYWdhaW4uJyApO1xuXHRcdFx0XHRcdFx0c2VsZi4kY29udGFpbmVyLmFwcGVuZCggJzxwPicgKyBtc2cgKyAnPC9wPicgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gKTtcblxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBSZXRyaWV2ZSB0aGUgaW5kZXggb2YgYSBxdWVzdGlvbiBieSBxdWVzdGlvbiBpZFxuXHRcdCAqIEBwYXJhbSAgICBpbnQgICBxaWQgIFdQIFBvc3QgSUQgb2YgdGhlIHF1ZXN0aW9uXG5cdFx0ICogQHJldHVybiAgIGludFxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0Z2V0X3F1ZXN0aW9uX2luZGV4OiBmdW5jdGlvbiggcWlkICkge1xuXG5cdFx0XHRyZXR1cm4gT2JqZWN0LmtleXMoIHRoaXMucXVlc3Rpb25zICkuaW5kZXhPZiggJ3EtJyArIHFpZCApO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJlZGlyZWN0IG9uIHF1aXogY29tcGxldGlvbiAvIHRpbWVvdXRcblx0XHQgKiBAcGFyYW0gICAgc3RyaW5nICAgdXJsICByZWRpcmVjdCB1cmxcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjkuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjBcblx0XHQgKi9cblx0XHRyZWRpcmVjdDogZnVuY3Rpb24oIHVybCApIHtcblxuXHRcdFx0dGhpcy50b2dnbGVfbG9hZGVyKCAnc2hvdycsICdHcmFkaW5nIFF1aXouLi4nICk7XG5cdFx0XHR0aGlzLnN0YXR1cyA9IG51bGw7XG5cdFx0XHR3aW5kb3cubG9jYXRpb24uaHJlZiA9IHVybDtcblxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBSZXR1cm4gdG8gdGhlIHByZXZpb3VzIHF1ZXN0aW9uXG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMS4wLjBcblx0IFx0ICogQHZlcnNpb24gIDMuMTYuNlxuXHRcdCAqL1xuXHRcdHByZXZpb3VzX3F1ZXN0aW9uOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xuXG5cdFx0XHRzZWxmLnRvZ2dsZV9sb2FkZXIoICdzaG93JywgTExNUy5sMTBuLnRyYW5zbGF0ZSggJ0xvYWRpbmcgUXVlc3Rpb24uLi4nICkgKTtcblx0XHRcdHNlbGYudXBkYXRlX3Byb2dyZXNzX2JhciggJ2RlY3JlbWVudCcgKTtcblxuXHRcdFx0dmFyIGlkcyA9IE9iamVjdC5rZXlzKCBzZWxmLnF1ZXN0aW9ucyApLFxuXHRcdFx0XHRjdXJyID0gaWRzLmluZGV4T2YoICdxLScgKyBzZWxmLmN1cnJlbnRfcXVlc3Rpb24gKSxcblx0XHRcdFx0cHJldl9pZCA9IGlkc1swXTtcblxuXHRcdFx0aWYgKCBjdXJyID49IDEgKSB7XG5cdFx0XHRcdHByZXZfaWQgPSBpZHNbIGN1cnIgLSAxIF07XG5cdFx0XHR9XG5cblx0XHRcdHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzZWxmLnRvZ2dsZV9sb2FkZXIoICdoaWRlJyApO1xuXHRcdFx0XHRzZWxmLmxvYWRfcXVlc3Rpb24oIHNlbGYucXVlc3Rpb25zWyBwcmV2X2lkIF0gKTtcblx0XHRcdH0sIDEwMCApO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJlZ2lzdGVyIHF1ZXN0aW9uIHR5cGUgdmFsaWRhdG9yIGZ1bmN0aW9uc1xuXHRcdCAqIEBwYXJhbSAgICBzdHJpbmcgICAgIHR5cGUgIHF1ZXN0aW9uIHR5cGUgaWRcblx0XHQgKiBAcGFyYW0gICAgZnVuY3Rpb24gICBmdW5jICBjYWxsYmFjayBmdW5jdGlvbiB0byB2YWxpZGF0ZSB0aGUgcXVlc3Rpb24gd2l0aFxuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMTYuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjBcblx0XHQgKi9cblx0XHRyZWdpc3Rlcl92YWxpZGF0b3I6IGZ1bmN0aW9uKCB0eXBlLCBmdW5jICkge1xuXG5cdFx0XHR0aGlzLnZhbGlkYXRvcnNbIHR5cGUgXSA9IGZ1bmM7XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogU3RhcnQgYSBRdWl6IHZpYSBBSkFYIGNhbGxcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAxLjAuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjI0LjNcblx0XHQgKi9cblx0XHRzdGFydF9xdWl6OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHZhciBzZWxmID0gdGhpcztcblxuXHRcdFx0dGhpcy5sb2FkX3VpX2VsZW1lbnRzKCk7XG5cdFx0XHR0aGlzLiR1aSA9ICQoICcjbGxtcy1xdWl6LXVpJyApO1xuXHRcdFx0dGhpcy4kYnV0dG9ucyA9ICQoICcjbGxtcy1xdWl6LW5hdiBidXR0b24nICk7XG5cdFx0XHR0aGlzLiRjb250YWluZXIgPSAkKCAnI2xsbXMtcXVpei1xdWVzdGlvbi13cmFwcGVyJyApO1xuXG5cdFx0XHQvLyBiaW5kIHN1Ym1pc3Npb24gZXZlbnQgZm9yIGFuc3dlcmluZyBxdWVzdGlvbnNcblx0XHRcdCQoICcjbGxtcy1uZXh0LXF1ZXN0aW9uLCAjbGxtcy1jb21wbGV0ZS1xdWl6JyApLm9uKCAnY2xpY2snLCBmdW5jdGlvbiggZSApIHtcblx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRzZWxmLmFuc3dlcl9xdWVzdGlvbiggJCggdGhpcyApICk7XG5cdFx0XHR9ICk7XG5cblx0XHRcdC8vIGJpbmQgc3VibWlzc2lvbiBldmVudCBmb3IgbmF2aWdhdGluZyBiYWNrd2FyZHNcblx0XHRcdCQoICcjbGxtcy1wcmV2LXF1ZXN0aW9uJyApLm9uKCAnY2xpY2snLCBmdW5jdGlvbiggZSApIHtcblx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRzZWxmLnByZXZpb3VzX3F1ZXN0aW9uKCk7XG5cdFx0XHR9ICk7XG5cblx0XHRcdExMTVMuQWpheC5jYWxsKCB7XG5cdFx0XHRcdGRhdGE6IHtcblx0XHRcdFx0XHRhY3Rpb246ICdxdWl6X3N0YXJ0Jyxcblx0XHRcdFx0XHRhdHRlbXB0X2tleTogJCggJyNsbG1zLWF0dGVtcHQta2V5JyApLnZhbCgpLFxuXHRcdFx0XHRcdGxlc3Nvbl9pZCA6ICQoICcjbGxtcy1sZXNzb24taWQnICkudmFsKCksXG5cdFx0XHRcdFx0cXVpel9pZCA6ICQoICcjbGxtcy1xdWl6LWlkJyApLnZhbCgpLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRiZWZvcmVTZW5kOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdHNlbGYuc3RhdHVzID0gdHJ1ZTtcblx0XHRcdFx0XHQkKCAnI2xsbXMtcXVpei13cmFwcGVyLCAjcXVpei1zdGFydC1idXR0b24nICkucmVtb3ZlKCk7XG5cdFx0XHRcdFx0JCggJ2h0bWwsIGJvZHknICkuc3RvcCgpLmFuaW1hdGUoIHtzY3JvbGxUb3A6IDAgfSwgNTAwICk7XG5cdFx0XHRcdFx0c2VsZi50b2dnbGVfbG9hZGVyKCAnc2hvdycsIExMTVMubDEwbi50cmFuc2xhdGUoICdMb2FkaW5nIFF1aXouLi4nICkgKTtcblxuXHRcdFx0XHR9LFxuXHRcdFx0XHRlcnJvcjogZnVuY3Rpb24oIHIsIHMsIHQgKSB7XG5cdFx0XHRcdFx0Y29uc29sZS5sb2coIHIsIHMsIHQgKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0c3VjY2VzczogZnVuY3Rpb24oIHIgKSB7XG5cblx0XHRcdFx0XHRzZWxmLnRvZ2dsZV9sb2FkZXIoICdoaWRlJyApO1xuXG5cdFx0XHRcdFx0aWYgKCByLmRhdGEgJiYgci5kYXRhLmh0bWwgKSB7XG5cblx0XHRcdFx0XHRcdC8vIHN0YXJ0IHRoZSBxdWl6IHRpbWVyIHdoZW4gYSB0aW1lIGxpbWl0IGlzIHNldFxuXHRcdFx0XHRcdFx0aWYgKCByLmRhdGEudGltZV9saW1pdCApIHtcblx0XHRcdFx0XHRcdFx0c2VsZi5zdGFydF9xdWl6X3RpbWVyKCByLmRhdGEudGltZV9saW1pdCApO1xuXHRcdFx0XHRcdFx0fVxuXG5cblx0XHRcdFx0XHRcdHNlbGYuYXR0ZW1wdF9rZXkgPSByLmRhdGEuYXR0ZW1wdF9rZXk7XG5cdFx0XHRcdFx0XHRzZWxmLnRvdGFsX3F1ZXN0aW9ucyA9IHIuZGF0YS50b3RhbDtcblxuXHRcdFx0XHRcdFx0c2VsZi5sb2FkX3F1ZXN0aW9uKCByLmRhdGEuaHRtbCApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIGlmICggci5tZXNzYWdlICkge1xuXG5cdFx0XHRcdFx0XHRzZWxmLiRjb250YWluZXIuYXBwZW5kKCAnPHA+JyArIHIubWVzc2FnZSArICc8L3A+JyApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0dmFyIG1zZyA9IExMTVMubDEwbi50cmFuc2xhdGUoICdBbiB1bmtub3duIGVycm9yIG9jY3VycmVkLiBQbGVhc2UgdHJ5IGFnYWluLicgKTtcblx0XHRcdFx0XHRcdHNlbGYuJGNvbnRhaW5lci5hcHBlbmQoICc8cD4nICsgbXNnICsgJzwvcD4nICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9ICk7XG5cblx0XHRcdC8qKlxuXHRcdFx0ICogVXNlIEpTIG1vdXNlIGV2ZW50cyBpbnN0ZWFkIG9mIENTUyA6aG92ZXIgYmVjYXVzZSBpT1MgaXMgcmVhbGx5IHNtYXJ0XG5cdFx0XHQgKiBAc2VlOiBodHRwczovL2Nzcy10cmlja3MuY29tL2Fubm95aW5nLW1vYmlsZS1kb3VibGUtdGFwLWxpbmstaXNzdWUvXG5cdFx0XHQgKi9cblx0XHRcdGlmICggISBMTE1TLmlzX3RvdWNoX2RldmljZSgpICkge1xuXG5cdFx0XHRcdHRoaXMuJHVpLm9uKCAnbW91c2VlbnRlcicsICdsaS5sbG1zLWNob2ljZSBsYWJlbCcsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdCQoIHRoaXMgKS5hZGRDbGFzcyggJ2hvdmVyZWQnICk7XG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0dGhpcy4kdWkub24oICdtb3VzZWxlYXZlJywgJ2xpLmxsbXMtY2hvaWNlIGxhYmVsJywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0JCggdGhpcyApLnJlbW92ZUNsYXNzKCAnaG92ZXJlZCcgKTtcblx0XHRcdFx0fSApO1xuXG5cdFx0XHR9XG5cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogU3RhcnQgUXVpeiBUaW1lclxuXHRcdCAqIEdldHMgbWludXRlcyBmcm9tIGhpZGRlbiBmaWVsZFxuXHRcdCAqIE5vdCB1c2VkIGFzIGFjdHVhbCBxdWl6IHRpbWVyLiBRdWl6IGlzIHRpbWVkIG9uIHRoZSBzZXJ2ZXIgZnJvbSB0aGUgcXVpeiBjbGFzc1xuXHRcdCAqIENhbGN1bGF0ZXMgbWludXRlcyB0byBtaWxsaXNlY29uZHMgYW5kIHRoZW4gY29udmVydHMgdG8gaG91cnMgLyBtaW51dGVzXG5cdFx0ICogV2hlbiB0aW1lIGxpbWl0IHJlYWNoZXMgMCBjYWxscyBjb21wbGV0ZV9xdWl6KCkgdG8gY29tcGxldGUgcXVpei5cblx0XHQgKiBAcmV0dXJuIENhbGxzIGdldF9jb3VudF9kb3duIGF0IGEgc2V0IGludGVydmFsIG9mIDEgc2Vjb25kXG5cdFx0ICogQHNpbmNlICAgIDEuMC4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdHN0YXJ0X3F1aXpfdGltZXI6IGZ1bmN0aW9uKCB0b3RhbF9taW51dGVzICkge1xuXG5cdFx0XHQvLyBjcmVhdGUgYW5kIGFwcGVuZCB0aGUgVUkgZm9yIHRoZSBjb3VudGRvd24gY2xvY2tcblx0XHRcdHZhciAkZWwgPSAkKCAnPGRpdiBjbGFzcz1cImxsbXMtcXVpei10aW1lclwiIGlkPVwibGxtcy1xdWl6LXRpbWVyXCIgLz4nICksXG5cdFx0XHRcdG1zZyA9IExMTVMubDEwbi50cmFuc2xhdGUoICdUaW1lIFJlbWFpbmluZycgKTtcblxuXHRcdFx0JGVsLmFwcGVuZCggJzxpIGNsYXNzPVwiZmEgZmEtY2xvY2stb1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT48c3BhbiBjbGFzcz1cInNjcmVlbi1yZWFkZXItdGV4dFwiPicgKyBtc2cgKyAnPC9zcGFuPicgKTtcblx0XHRcdCRlbC5hcHBlbmQoICc8ZGl2IGlkPVwibGxtcy10aWxlc1wiIGNsYXNzPVwibGxtcy10aWxlc1wiPjwvZGl2PicgKTtcblxuXHRcdFx0JCggJyNsbG1zLXF1aXotaGVhZGVyJyApLmFwcGVuZCggJGVsICk7XG5cblx0XHRcdC8vIHN0YXJ0IHRoZSB0aW1lclxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzLFxuXHRcdFx0XHR0YXJnZXRfZGF0ZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpICsgKCAoIHRvdGFsX21pbnV0ZXMgKiA2MCApICogMTAwMCApLCAvLyBzZXQgdGhlIGNvdW50ZG93biBkYXRlXG5cdFx0XHRcdHRpbWVfbGltaXQgPSAoICggdG90YWxfbWludXRlcyAqIDYwICkgKiAxMDAwICksXG5cdFx0XHRcdGNvdW50ZG93biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsbG1zLXRpbGVzJyksIC8vIGdldCB0YWcgZWxlbWVudFxuXHRcdFx0XHRkYXlzLCBob3VycywgbWludXRlcywgc2Vjb25kczsgLy8gdmFyaWFibGVzIGZvciB0aW1lIHVuaXRzXG5cblx0XHRcdC8vc2V0IGFjdHVhbCB0aW1lclxuXHRcdFx0c2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHNlbGYuY29tcGxldGVfcXVpeigpO1xuXHRcdFx0fSwgdGltZV9saW1pdCArIDEwMDAgKTtcblxuXHRcdFx0dGhpcy5nZXRDb3VudGRvd24oXG5cdFx0XHRcdHRvdGFsX21pbnV0ZXMsXG5cdFx0XHRcdHRhcmdldF9kYXRlLFxuXHRcdFx0XHR0aW1lX2xpbWl0LFxuXHRcdFx0XHRkYXlzLFxuXHRcdFx0XHRob3Vycyxcblx0XHRcdFx0bWludXRlcyxcblx0XHRcdFx0c2Vjb25kcyxcblx0XHRcdFx0Y291bnRkb3duXG5cdFx0XHQpO1xuXG5cdFx0XHQvLyBjYWxsIGdldF9jb3VudF9kb3duIGV2ZXJ5IDEgc2Vjb25kXG5cdFx0XHRzZXRJbnRlcnZhbCggZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRzZWxmLmdldENvdW50ZG93bihcblx0XHRcdFx0XHR0b3RhbF9taW51dGVzLFxuXHRcdFx0XHRcdHRhcmdldF9kYXRlLFxuXHRcdFx0XHRcdHRpbWVfbGltaXQsXG5cdFx0XHRcdFx0ZGF5cyxcblx0XHRcdFx0XHRob3Vycyxcblx0XHRcdFx0XHRtaW51dGVzLFxuXHRcdFx0XHRcdHNlY29uZHMsXG5cdFx0XHRcdFx0Y291bnRkb3duXG5cdFx0XHRcdCk7XG5cdFx0XHR9LCAxMDAwICk7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFRyaWdnZXIgZXZlbnRzXG5cdFx0ICogQHBhcmFtICAgIHN0cmluZyAgIGV2ZW50ICBldmVudCB0byB0cmlnZ2VyXG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xuXG5cdFx0XHQvLyB0cmlnZ2VyIHF1ZXN0aW9uIHN1Ym1pc3Npb24gZm9yIHRoZSBjdXJyZW50IHF1ZXN0aW9uXG5cdFx0XHRpZiAoICdhbnN3ZXJfcXVlc3Rpb24nID09PSBldmVudCApIHtcblxuXHRcdFx0XHRpZiAoIHRoaXMuZ2V0X3F1ZXN0aW9uX2luZGV4KCBzZWxmLmN1cnJlbnRfcXVlc3Rpb24gKSA9PT0gc2VsZi50b3RhbF9xdWVzdGlvbnMgKSB7XG5cblx0XHRcdFx0XHQkKCAnI2xsbXMtY29tcGxldGUtcXVpeicgKS50cmlnZ2VyKCAnY2xpY2snICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdCQoICcjbGxtcy1uZXh0LXF1ZXN0aW9uJyApLnRyaWdnZXIoICdjbGljaycgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBMb2FkIHRoZSBIVE1MIG9mIGEgcXVlc3Rpb24gaW50byB0aGUgRE9NIGFuZCB0aGUgcXVlc3Rpb24gY2FjaGVcblx0XHQgKiBAcGFyYW0gICAgc3RyaW5nICAgaHRtbCAgc3RyaW5nIG9mIGh0bWxcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjkuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE2LjZcblx0XHQgKi9cblx0XHRsb2FkX3F1ZXN0aW9uOiBmdW5jdGlvbiggaHRtbCApIHtcblxuXHRcdFx0dmFyICRodG1sID0gJCggaHRtbCApLFxuXHRcdFx0XHRxaWQgPSAkaHRtbC5hdHRyKCAnZGF0YS1pZCcgKTtcblxuXHRcdFx0Ly8gY2FjaGUgdGhlIHF1ZXN0aW9uIEhUTUwgZm9yIGZhc3RlciByZXdpbmRzXG5cdFx0XHRpZiAoICF0aGlzLnF1ZXN0aW9uc1sgJ3EtJyArIHFpZCBdICkge1xuXHRcdFx0XHR0aGlzLnF1ZXN0aW9uc1sgJ3EtJyArIHFpZCBdID0gJGh0bWw7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMudXBkYXRlX3Byb2dyZXNzKCBxaWQgKTtcblxuXHRcdFx0dGhpcy5jdXJyZW50X3F1ZXN0aW9uID0gcWlkO1xuXG5cdFx0XHQkKCBkb2N1bWVudCApLnRyaWdnZXIoICdsbG1zLXByZS1hcHBlbmQtcXVlc3Rpb24nLCAkaHRtbCApO1xuXG5cdFx0XHR0aGlzLiRjb250YWluZXIuYXBwZW5kKCAkaHRtbCApO1xuXG5cdFx0XHQkKCBkb2N1bWVudCApLnRyaWdnZXIoICdsbG1zLXBvc3QtYXBwZW5kLXF1ZXN0aW9uJywgJGh0bWwgKTtcblxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBDb25zdHJ1Y3RzIHRoZSBxdWl6IFVJICYgYWRkcyB0aGUgZWxlbWVudHMgaW50byB0aGUgRE9NXG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuOVxuXHRcdCAqL1xuXHRcdGxvYWRfdWlfZWxlbWVudHM6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR2YXIgJGh0bWwgPSAkKCAnPGRpdiBjbGFzcz1cImxsbXMtcXVpei11aVwiIGlkPVwibGxtcy1xdWl6LXVpXCIgLz4nICksXG5cdFx0XHRcdCRoZWFkZXIgPSAkKCAnPGhlYWRlciBjbGFzcz1cImxsbXMtcXVpei1oZWFkZXJcIiBpZD1cImxsbXMtcXVpei1oZWFkZXJcIiAvPicpXG5cdFx0XHRcdCRmb290ZXIgPSAkKCAnPGZvb3RlciBjbGFzcz1cImxsbXMtcXVpei1uYXZcIiBpZD1cImxsbXMtcXVpei1uYXZcIiAvPicgKTtcblxuXHRcdFx0JGZvb3Rlci5hcHBlbmQoICc8YnV0dG9uIGNsYXNzPVwiYnV0dG9uIGxhcmdlIGxsbXMtYnV0dG9uLWFjdGlvblwiIGlkPVwibGxtcy1uZXh0LXF1ZXN0aW9uXCIgbmFtZT1cImxsbXNfbmV4dF9xdWVzdGlvblwiIHR5cGU9XCJzdWJtaXRcIj4nICsgTExNUy5sMTBuLnRyYW5zbGF0ZSggJ05leHQgUXVlc3Rpb24nICkgKyAnPC9idXR0b24+JyApO1xuXHRcdFx0JGZvb3Rlci5hcHBlbmQoICc8YnV0dG9uIGNsYXNzPVwiYnV0dG9uIGxhcmdlIGxsbXMtYnV0dG9uLWFjdGlvbiBsbG1zLWJ1dHRvbi1xdWl6LWNvbXBsZXRlXCIgaWQ9XCJsbG1zLWNvbXBsZXRlLXF1aXpcIiBuYW1lPVwibGxtc19jb21wbGV0ZV9xdWl6XCIgdHlwZT1cInN1Ym1pdFwiIHN0eWxlPVwiZGlzcGxheTpub25lO1wiPicgKyBMTE1TLmwxMG4udHJhbnNsYXRlKCAnQ29tcGxldGUgUXVpeicgKSArICc8L2J1dHRvbj4nICk7XG5cdFx0XHQkZm9vdGVyLmFwcGVuZCggJzxidXR0b24gY2xhc3M9XCJidXR0b24gbGxtcy1idXR0b24tc2Vjb25kYXJ5XCIgaWQ9XCJsbG1zLXByZXYtcXVlc3Rpb25cIiBuYW1lPVwibGxtc19wcmV2X3F1ZXN0aW9uXCIgdHlwZT1cInN1Ym1pdFwiIHN0eWxlPVwiZGlzcGxheTpub25lO1wiPicgKyBMTE1TLmwxMG4udHJhbnNsYXRlKCAnUHJldmlvdXMgUXVlc3Rpb24nICkgKyAnPC9idXR0b24+JyApO1xuXG5cdFx0XHQkaGVhZGVyLmFwcGVuZCggJzxkaXYgY2xhc3M9XCJsbG1zLXByb2dyZXNzXCI+PGRpdiBjbGFzcz1cInByb2dyZXNzLWJhci1jb21wbGV0ZVwiPjwvZGl2PjwvZGl2PicgKTtcblx0XHRcdCRmb290ZXIuYXBwZW5kKCAnPGRpdiBjbGFzcz1cImxsbXMtcXVpei1jb3VudGVyXCIgaWQ9XCJsbG1zLXF1aXotY291bnRlclwiPjxzcGFuIGNsYXNzPVwibGxtcy1jdXJyZW50XCI+PC9zcGFuPjxzcGFuIGNsYXNzPVwibGxtcy1zZXBcIj4vPC9zcGFuPjxzcGFuIGNsYXNzPVwibGxtcy10b3RhbFwiPjwvc3Bhbj48L2Rpdj4nKVxuXG5cdFx0XHQkaHRtbC5hcHBlbmQoICRoZWFkZXIgKVxuXHRcdFx0XHQgLmFwcGVuZCggJzxkaXYgY2xhc3M9XCJsbG1zLXF1aXotcXVlc3Rpb24td3JhcHBlclwiIGlkPVwibGxtcy1xdWl6LXF1ZXN0aW9uLXdyYXBwZXJcIiAvPicgKVxuXHRcdFx0XHQgLmFwcGVuZCggJGZvb3RlciApO1xuXG5cdFx0XHQkKCAnI2xsbXMtcXVpei13cmFwcGVyJyApLmFmdGVyKCAkaHRtbCApO1xuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFBlcmZvcm0gYWN0aW9ucyBvbiBxdWVzdGlvbiBIVE1MIGFmdGVyIGl0J3MgYmVlbiBhcHBlbmRlZCB0byB0aGUgRE9NXG5cdFx0ICogQHBhcmFtICAgIG9iaiAgICAgIGV2ZW50ICBqcyBldmVudCBvYmplY3Rcblx0XHQgKiBAcGFyYW0gICAgb2JqICAgICAgaHRtbCAgIGpzIEhUTUwgb2JqZWN0XG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4xNi42XG5cdFx0ICogQHZlcnNpb24gIDMuMTYuNlxuXHRcdCAqL1xuXHRcdHBvc3RfYXBwZW5kX3F1ZXN0aW9uOiBmdW5jdGlvbiggZXZlbnQsIGh0bWwgKSB7XG5cblx0XHRcdHZhciAkaHRtbCA9ICQoIGh0bWwgKTtcblxuXHRcdFx0aWYgKCAkaHRtbC5maW5kKCAnYXVkaW8nICkubGVuZ3RoICkge1xuXHRcdFx0XHR3cC5tZWRpYWVsZW1lbnQuaW5pdGlhbGl6ZSgpO1xuXHRcdFx0fVxuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFNob3cgb3IgaGlkZSB0aGUgXCJsb2FkaW5nXCIgc3Bpbm5lciB3aXRoIGFuIG9wdGlvbiBtZXNzYWdlXG5cdFx0ICogQHBhcmFtICAgIHN0cmluZyAgIGRpc3BsYXkgIHNob3d8aGlkZVxuXHRcdCAqIEBwYXJhbSAgICBzdHJpbmcgICBtc2cgICAgICB0ZXh0IHRvIGRpc3BsYXkgd2hlbiBzaG93aW5nXG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy45LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi42XG5cdFx0ICovXG5cdFx0dG9nZ2xlX2xvYWRlcjogZnVuY3Rpb24oIGRpc3BsYXksIG1zZyApIHtcblxuXHRcdFx0aWYgKCAnc2hvdycgPT09IGRpc3BsYXkgKSB7XG5cblx0XHRcdFx0bXNnID0gbXNnIHx8IExMTVMubDEwbi50cmFuc2xhdGUoICdMb2FkaW5nLi4uJyApO1xuXG5cdFx0XHRcdHRoaXMuJGJ1dHRvbnMuYXR0ciggJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJyApO1xuXG5cdFx0XHRcdHRoaXMuJGNvbnRhaW5lci5lbXB0eSgpO1xuXHRcdFx0XHRMTE1TLlNwaW5uZXIuc3RhcnQoIHRoaXMuJGNvbnRhaW5lciApO1xuXHRcdFx0XHR0aGlzLiRjb250YWluZXIuYXBwZW5kKCAnPGRpdiBjbGFzcz1cImxsbXMtcXVpei1sb2FkaW5nXCI+JyArIExMTVMubDEwbi50cmFuc2xhdGUoIG1zZyApICsgJzwvZGl2PicgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRMTE1TLlNwaW5uZXIuc3RvcCggdGhpcy4kY29udGFpbmVyICk7XG5cdFx0XHRcdHRoaXMuJGJ1dHRvbnMucmVtb3ZlQXR0ciggJ2Rpc2FibGVkJyApO1xuXHRcdFx0XHR0aGlzLiRjb250YWluZXIuZmluZCggJy5sbG1zLXF1aXotbG9hZGluZycgKS5yZW1vdmUoKTtcblxuXHRcdFx0fVxuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFVwZGF0ZSB0aGUgcHJvZ3Jlc3MgYmFyIGFuZCB0b2dnbGUgYnV0dG9uIGF2YWlsYWJpbGl0eSBiYXNlZCBvbiBxdWVzdGlvbiB0aGUgcXVlc3Rpb24gYmVpbmcgc2hvd25cblx0XHQgKiBAcGFyYW0gICAge1t0eXBlXX0gICBxaWQgIFtkZXNjcmlwdGlvbl1cblx0XHQgKiBAcmV0dXJuICAge1t0eXBlXX1cblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdHVwZGF0ZV9wcm9ncmVzczogZnVuY3Rpb24oIHFpZCApIHtcblxuXHRcdFx0dmFyIGluZGV4ID0gdGhpcy5nZXRfcXVlc3Rpb25faW5kZXgoIHFpZCApLFxuXHRcdFx0XHRwcm9ncmVzcztcblxuXHRcdFx0aWYgKCAtMSA9PT0gaW5kZXggKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aW5kZXgrKztcblxuXHRcdFx0JCggJyNsbG1zLXF1aXotY291bnRlciAubGxtcy1jdXJyZW50JyApLnRleHQoIGluZGV4ICk7XG5cdFx0XHRpZiAoIGluZGV4ID09PSAxICkge1xuXHRcdFx0XHQkKCAnI2xsbXMtcXVpei1jb3VudGVyIC5sbG1zLXRvdGFsJyApLnRleHQoIHRoaXMudG90YWxfcXVlc3Rpb25zICk7XG5cdFx0XHRcdCQoICcjbGxtcy1xdWl6LWNvdW50ZXInICkuc2hvdygpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBoYW5kbGUgcHJldiBxdWVzdGlvblxuXHRcdFx0aWYgKCBpbmRleCA+PSAyICkge1xuXHRcdFx0XHQkKCAnI2xsbXMtcHJldi1xdWVzdGlvbicgKS5zaG93KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQkKCAnI2xsbXMtcHJldi1xdWVzdGlvbicgKS5oaWRlKCk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaW5kZXggPT09IHRoaXMudG90YWxfcXVlc3Rpb25zICkge1xuXHRcdFx0XHQkKCAnI2xsbXMtbmV4dC1xdWVzdGlvbicgKS5oaWRlKCk7XG5cdFx0XHRcdCQoICcjbGxtcy1jb21wbGV0ZS1xdWl6JyApLnNob3coKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdCQoICcjbGxtcy1uZXh0LXF1ZXN0aW9uJyApLnNob3coKTtcblx0XHRcdFx0JCggJyNsbG1zLWNvbXBsZXRlLXF1aXonICkuaGlkZSgpO1xuXHRcdFx0fVxuXG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEluY3JlYXNlIHByb2dyZXNzIGJhciB1aSBlbGVtZW50XG5cdFx0ICogQHBhcmFtICAgIHN0cmluZyAgIGRpciAgdXBkYXRlIGRpcmVjdGlvbiBbaW5jcmVtZW50fGRlY3JlbWVudF1cblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0dXBkYXRlX3Byb2dyZXNzX2JhcjogZnVuY3Rpb24oIGRpciApIHtcblxuXHRcdFx0dmFyIGluZGV4ID0gdGhpcy5nZXRfcXVlc3Rpb25faW5kZXgoIHRoaXMuY3VycmVudF9xdWVzdGlvbiApO1xuXHRcdFx0aWYgKCAnaW5jcmVtZW50JyA9PT0gZGlyICkge1xuXHRcdFx0XHRpbmRleCsrO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aW5kZXgtLTtcblx0XHRcdH1cblxuXHRcdFx0cHJvZ3Jlc3MgPSAoIGluZGV4IC8gdGhpcy50b3RhbF9xdWVzdGlvbnMgKSAqIDEwMDtcblx0XHRcdHRoaXMuJHVpLmZpbmQoICcucHJvZ3Jlc3MtYmFyLWNvbXBsZXRlJyApLmNzcyggJ3dpZHRoJywgcHJvZ3Jlc3MgKyAnJScgKTtcblxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBHZXQgQ291bnQgRG93blxuXHRcdCAqIENhbGxlZCBldmVyeSBzZWNvbmQgdG8gdXBkYXRlIHRoZSBvbiBzY3JlZW4gY291bnRkb3duIHRpbWVyXG5cdFx0ICogQ2hhbmdlcyBjb2xvciB0byB5ZWxsb3cgYXQgMS8yIG9mIHRvdGFsIHRpbWVcblx0XHQgKiBDaGFuZ2VzIGNvbG9yIHRvIHJlZCBhdCAxLzQgb2YgdG90YWwgdGltZVxuXHRcdCAqIEBwYXJhbSAge1tpbnRdfSBtaW51dGVzICAgICBbZGVzY3JpcHRpb25dXG5cdFx0ICogQHBhcmFtICB7W2RhdGVdfSB0YXJnZXRfZGF0ZSBbZGVzY3JpcHRpb25dXG5cdFx0ICogQHBhcmFtICB7W2ludF19IHRpbWVfbGltaXQgIFtkZXNjcmlwdGlvbl1cblx0XHQgKiBAcGFyYW0gIHtbaW50XX0gZGF5cyAgICAgICAgW2Rlc2NyaXB0aW9uXVxuXHRcdCAqIEBwYXJhbSAge1tpbnRdfSBob3VycyAgICAgICBbZGVzY3JpcHRpb25dXG5cdFx0ICogQHBhcmFtICB7W2ludF19IG1pbnV0ZXMgICAgIFtkZXNjcmlwdGlvbl1cblx0XHQgKiBAcGFyYW0gIHtbaW50XX0gc2Vjb25kcyAgICAgW2Rlc2NyaXB0aW9uXVxuXHRcdCAqIEBwYXJhbSAge1tpbnRdfSBjb3VudGRvd24gICBbZGVzY3JpcHRpb25dXG5cdFx0ICogQHJldHVybiBEaXNwbGF5cyB1cGRhdGVzIGhvdXJzLCBtaW51dGVzIG9uIHF1aXogdGltZXJcblx0XHQgKiBAc2luY2UgICAgMS4wLjBcblx0IFx0ICogQHZlcnNpb24gIDEuMC4wXG5cdFx0ICovXG5cdFx0Z2V0Q291bnRkb3duOiBmdW5jdGlvbiggdG90YWxfbWludXRlcywgdGFyZ2V0X2RhdGUsIHRpbWVfbGltaXQsIGRheXMsIGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzLCBjb3VudGRvd24gKXtcblxuXHRcdFx0Ly8gZmluZCB0aGUgYW1vdW50IG9mIFwic2Vjb25kc1wiIGJldHdlZW4gbm93IGFuZCB0YXJnZXRcblx0XHRcdHZhciBjdXJyZW50X2RhdGUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSxcblx0XHRcdFx0c2Vjb25kc19sZWZ0ID0gKCB0YXJnZXRfZGF0ZSAtIGN1cnJlbnRfZGF0ZSApIC8gMTAwMDtcblxuXHRcdFx0aWYgKCBzZWNvbmRzX2xlZnQgPj0gMCApIHtcblxuXHRcdFx0XHRpZiAoICggc2Vjb25kc19sZWZ0ICogMTAwMCApIDwgKCB0aW1lX2xpbWl0IC8gMiApICkgIHtcblxuXHRcdFx0XHRcdCQoICcjbGxtcy1xdWl6LXRpbWVyJyApLmFkZENsYXNzKCAnY29sb3ItaGFsZicgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCAoIHNlY29uZHNfbGVmdCAqIDEwMDAgKSA8ICggdGltZV9saW1pdCAvIDQgKSApICB7XG5cblx0XHRcdFx0XHQkKCAnI2xsbXMtcXVpei10aW1lcicgKS5yZW1vdmVDbGFzcyggJ2NvbG9yLWhhbGYnICk7XG5cdFx0XHRcdFx0JCggJyNsbG1zLXF1aXotdGltZXInICkuYWRkQ2xhc3MoICdjb2xvci1lbXB0eScgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGF5cyA9IHRoaXMucGFkKCBwYXJzZUludChzZWNvbmRzX2xlZnQgLyA4NjQwMCkgKTtcblx0XHRcdFx0c2Vjb25kc19sZWZ0ID0gc2Vjb25kc19sZWZ0ICUgODY0MDA7XG5cdFx0XHRcdGhvdXJzID0gdGhpcy5wYWQoIHBhcnNlSW50KHNlY29uZHNfbGVmdCAvIDM2MDApICk7XG5cdFx0XHRcdHNlY29uZHNfbGVmdCA9IHNlY29uZHNfbGVmdCAlIDM2MDA7XG5cdFx0XHRcdG1pbnV0ZXMgPSB0aGlzLnBhZCggcGFyc2VJbnQoIHNlY29uZHNfbGVmdCAvIDYwICkgKTtcblx0XHRcdFx0c2Vjb25kcyA9IHRoaXMucGFkKCBwYXJzZUludCggc2Vjb25kc19sZWZ0ICUgNjAgKSApO1xuXG5cdFx0XHRcdC8vIGZvcm1hdCBjb3VudGRvd24gc3RyaW5nICsgc2V0IHRhZyB2YWx1ZVxuXHRcdFx0XHRjb3VudGRvd24uaW5uZXJIVE1MID0gJzxzcGFuIGNsYXNzPVwiaG91cnNcIj4nICsgaG91cnMgKyAnPC9zcGFuPjo8c3BhbiBjbGFzcz1cIm1pbnV0ZXNcIj4nICsgbWludXRlcyArICc8L3NwYW4+OjxzcGFuIGNsYXNzPVwic2Vjb25kc1wiPicgKyBzZWNvbmRzICsgJzwvc3Bhbj4nO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBQYWQgTnVtYmVyXG5cdFx0ICogcGFkcyBudW1iZXIgd2l0aCAwIGlmIHNpbmdsZSBkaWdpdC5cblx0XHQgKiBAcGFyYW0gIHtbaW50XX0gbiBbbnVtYmVyXVxuXHRcdCAqIEByZXR1cm4ge1tzdHJpbmddfSBbcGFkZGVkIG51bWJlcl1cblx0XHQgKiBAc2luY2UgICAgMS4wLjBcblx0IFx0ICogQHZlcnNpb24gIDEuMC4wXG5cdFx0ICovXG5cdFx0cGFkOiBmdW5jdGlvbihuKSB7XG5cdFx0XHRyZXR1cm4gKG4gPCAxMCA/ICcwJyA6ICcnKSArIG47XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEJhc2ljIHZhbGlkYXRpb24gbWV0aG9kIHdoaWNoIHBlcmZvcm1zIG5vIHZhbGlkYXRpb24gYW5kIHJldHVybnMgYSB2YWxpZGF0aW9uIG9iamVjdFxuXHRcdCAqIGluIHRoZSBmb3JtYXQgcmVxdWlyZWQgYnkgdGhlIGFwcGxpY2F0aW9uXG5cdFx0ICogQHBhcmFtICAgIG9iaiAgICRxdWVzdGlvbiAgalF1ZXJ5IHNlbGVjdG9yIG9mIHRoZSBxdWVzdGlvblxuXHRcdCAqIEByZXR1cm4gICBvYmpcblx0XHQgKiBAc2luY2UgICAgMy4xNi4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuMFxuXHRcdCAqL1xuXHRcdHZhbGlkYXRlOiBmdW5jdGlvbiggJHF1ZXN0aW9uICkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0YW5zd2VyOiBbXSxcblx0XHRcdFx0dmFsaWQ6IHRydWUsXG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBWYWxpZGF0ZXMgYSBjaG9pY2UgcXVlc3Rpb24gdG8gZW5zdXJlIHRoZXJlJ3MgYXQgbGVhc3Qgb25lIGNoZWNrZWQgaW5wdXRcblx0XHQgKiBAcGFyYW0gICAgb2JqICAgJHF1ZXN0aW9uICBqUXVlcnkgc2VsZWN0b3Igb2YgdGhlIHF1ZXN0aW9uXG5cdFx0ICogQHJldHVybiAgIG9ialxuXHRcdCAqIEBzaW5jZSAgICAzLjE2LjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xNi4wXG5cdFx0ICovXG5cdFx0dmFsaWRhdGVfY2hvaWNlOiBmdW5jdGlvbiggJHF1ZXN0aW9uICkge1xuXG5cdFx0XHR2YXIgcmV0ID0gd2luZG93LmxsbXMucXVpenplcy52YWxpZGF0ZSggJHF1ZXN0aW9uICksXG5cdFx0XHRcdGNoZWNrZWQgPSAkcXVlc3Rpb24uZmluZCggJ2lucHV0OmNoZWNrZWQnICk7XG5cblx0XHRcdGlmICggIWNoZWNrZWQubGVuZ3RoICkge1xuXHRcdFx0XHRyZXQudmFsaWQgPSBMTE1TLmwxMG4udHJhbnNsYXRlKCAnWW91IG11c3Qgc2VsZWN0IGFuIGFuc3dlciB0byBjb250aW51ZS4nICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjaGVja2VkLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldC5hbnN3ZXIucHVzaCggJCggdGhpcyApLnZhbCgpICk7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHJldDtcblxuXHRcdH0sXG5cblx0fTtcblxuXHRxdWl6LmJpbmQoKTtcblxuXHR3aW5kb3cubGxtcyA9IHdpbmRvdy5sbG1zIHx8IHt9O1xuXHR3aW5kb3cubGxtcy5xdWl6emVzID0gcXVpejtcblxufSApKCBqUXVlcnkgKTtcbiJdfQ==
