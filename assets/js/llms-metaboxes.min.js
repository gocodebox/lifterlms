!function(e){e.fn.llmsCollapsible=function(){return this.on("click",".llms-collapsible-header",function(){var t=e(this).closest(".llms-collapsible"),a=t.siblings(".llms-collapsible");t.toggleClass("opened").trigger("llms-collapsible-toggled"),t.find(".llms-collapsible-body").slideToggle(400),a.each(function(){e(this).removeClass("opened"),e(this).find(".llms-collapsible-body").slideUp(400)})}),this},window.llms=window.llms||{};var t=function(){this.repeaters={metaboxes:this,$repeaters:null,init:function(){var t=this;t.$repeaters=e(".llms-mb-list.repeater"),t.$repeaters.length&&(LLMS.wait_for(function(){return"undefined"!=typeof tinyMCE},function(){t.load(),t.bind()}),e('#post input[type="submit"], #post-preview').on("click",function(){e(this).attr("data-llms-clicked","yes")}),e("#post").on("submit",t.handle_submit))},bind:function(){var t=this;t.$repeaters.each(function(){var a=e(this),l=a.find(".llms-repeater-rows"),n=a.find(".llms-repeater-model");tinyMCE.EditorManager.execCommand("mceRemoveEditor",!0,n.find(".llms-mb-list.editor textarea").attr("id")),a.find(".llms-repeater-new-btn").on("click",function(){t.add_row(a,null,!0)}),l.sortable({handle:".llms-drag-handle",items:".llms-repeater-row",start:function(e,t){l.addClass("dragging")},stop:function(n,s){l.removeClass("dragging");var i=s.item.find("textarea.wp-editor-area");i.each(function(){var t=e(this).attr("id");tinyMCE.EditorManager.execCommand("mceRemoveEditor",!0,t),tinyMCE.EditorManager.execCommand("mceAddEditor",!0,t)}),t.save(a)}}),a.on("click",".llms-repeater-remove",function(l){l.stopPropagation();var n=e(this).closest(".llms-repeater-row");window.confirm(LLMS.l10n.translate("Are you sure you want to delete this row? This cannot be undone."))&&(n.remove(),setTimeout(function(){t.save(a)},1))})})},add_row:function(t,a,l){var n=this,s=t.find(".llms-repeater-rows"),i=t.find(".llms-repeater-model"),r=i.find(".llms-repeater-row").clone(),o=t.find(".llms-repeater-row").length,d=n.reindex(r,o);a&&e.each(a,function(t,a){var l=r.find('[name^="'+t+'"]');l.hasClass("llms-select2-student")?(e.each(a,function(e,t){l.append('<option value="'+t.key+'" selected="selected">'+t.title+"</option>")}),l.trigger("change")):l.val(a)}),setTimeout(function(){n.bind_row(r)},1),s.append(r),l&&r.find(".llms-collapsible-header").trigger("click"),tinyMCE.EditorManager.execCommand("mceAddEditor",!0,d),t.trigger("llms-new-repeater-row",{$row:r,data:a})},bind_row:function(e){this.bind_row_header(e),e.find(".llms-select2").llmsSelect2({width:"100%"}),e.find(".llms-select2-student").llmsStudentsSelect2(),this.metaboxes.bind_datepickers(e.find(".llms-datepicker")),this.metaboxes.bind_controllers(e.find("[data-is-controller]"))},bind_row_header:function(t){var a=t.find(".llms-repeater-title"),l=t.find(".llms-collapsible-header-title-field");a.attr("data-default",a.text()),l.on("keyup focusout blur",function(){var t=e(this).val();t||(t=a.attr("data-default")),a.text(t)}).trigger("keyup")},handle_submit:function(t){var a=e('#post [data-llms-clicked="yes"]'),l=a.parent().find(".spinner");if(a.is("#post-preview"))return void a.removeAttr("data-llms-clicked");t.preventDefault(),e('#post input[type="submit"]').addClass("disabled").attr("disabled","disabled"),l.addClass("is-active");var n,s=window.llms.metaboxes.repeaters,i=0;s.$repeaters.each(function(){s.save(e(this))}),n=setInterval(function(){i>=59||!e(".llms-mb-list.repeater.processing").length?(clearInterval(n),e("#post").off("submit",this.handle_submit),l.removeClass("is-active"),a.removeClass("disabled").removeAttr("disabled").trigger("click")):i++},1e3)},load:function(){var t=this;t.$repeaters.each(function(){var a=e(this);a.hasClass("is-loaded")||a.hasClass("processing")||t.store(a,"load",function(l){a.addClass("is-loaded"),e.each(l.data,function(e,l){t.add_row(a,l,!1)}),a.find(".llms-repeater-rows .llms-repeater-row").each(function(){t.bind_row(e(this))})})})},reindex:function(t,a){function l(t,l){t.each(function(){var t=e(this).attr(l);e(this).attr(l,t.replace(n,a))})}var n=t.attr("data-row-order"),s=t.find(".llms-mb-list.editor textarea");return tinyMCE.EditorManager.execCommand("mceRemoveEditor",!0,s.attr("id")),t.attr("data-row-order",a),l(t,"data-row-order"),l(t.find("button.insert-media"),"data-editor"),l(t.find('input[name^="_llms"], textarea[name^="_llms"], select[name^="_llms"]'),"id"),l(t.find('input[name^="_llms"], textarea[name^="_llms"], select[name^="_llms"]'),"name"),l(t.find("[data-controller]"),"data-controller"),l(t.find("[data-controller]"),"data-controller"),l(t.find("button.wp-switch-editor"),"data-wp-editor-id"),l(t.find("button.wp-switch-editor"),"id"),l(t.find(".wp-editor-tools"),"id"),l(t.find(".wp-editor-container"),"id"),s.attr("id")},save:function(e){e.trigger("llms-repeater-before-save",{$el:e}),this.store(e,"save")},serialize:function(t){var a=[];return t.find(".llms-repeater-rows .llms-repeater-row").each(function(){var t={};e(this).find('input[name^="_llms"], select[name^="_llms"]').each(function(){t[e(this).attr("name")]=e(this).val()}),e(this).find('textarea[name^="_llms"]').each(function(){var a=e(this).attr("name");tinyMCE.editors[a]?t[a]=tinyMCE.editors[a].getContent():t[a]=e(this).val()}),a.push(t)}),a},store:function(e,t,a){a=a||function(){};var l=this,n={action:e.find(".llms-repeater-field-handler").val(),store_action:t};"save"===t&&(n.rows=l.serialize(e)),LLMS.Ajax.call({data:n,beforeSend:function(){e.addClass("processing"),LLMS.Spinner.start(e)},success:function(t){a(t),LLMS.Spinner.stop(e),e.removeClass("processing")}})}},this.repeaters.init(),this.init=function(){var t=this;e(".llms-select2-post").each(function(){t.post_select(e(this))}),e(".llms-collapsible-group").llmsCollapsible(),this.bind_tabs();var a=[{selector:e(".llms-datepicker"),func:"bind_datepickers"},{selector:e(".llms-select2"),func:function(e){e.llmsSelect2({width:"100%"})}},{selector:e(".llms-select2-student"),func:function(e){e.llmsStudentsSelect2()}},{selector:e('input[type="checkbox"][data-controls]'),func:"bind_cb_controllers"},{selector:e("[data-is-controller]"),func:"bind_controllers"},{selector:e(".llms-table"),func:"bind_tables"},{selector:e(".llms-merge-code-wrapper"),func:"bind_merge_code_buttons"},{selector:e("a.llms-editable"),func:"bind_editables"}];if(e.each(a,function(a,l){if(l.selector.length){var n=l.selector.filter(function(){return 0===e(this).closest(".llms-repeater-model").length});"string"==typeof l.func?t[l.func](n):"function"==typeof l.func&&l.func(n)}}),window.llms.post.post_type){var l="bind_"+window.llms.post.post_type;"function"==typeof this[l]&&this[l]()}},this.bind_cb_controllers=function(t){t=t||e('input[type="checkbox"][data-controls]'),t.each(function(){var t=e(this),a=e(t.attr("data-controls")).closest(".llms-mb-list");t.on("change",function(){e(this).is(":checked")?a.slideDown(200):a.slideUp(200)}),t.trigger("change")})},this.bind_controllers=function(t){t=t||e("[data-is-controller]"),t.each(function(){var t,a=e(this),l=e('[data-controller="#'+a.attr("id")+'"]');a.on("change",function(){t="checkbox"===a.attr("type")?a.is(":checked")?a.val():"false":a.val(),l.each(function(){var a=e(this).attr("data-controller-value"),l=[];-1!==a.indexOf(",")?l=a.split(","):l.push(a),-1!==l.indexOf(t)?e(this).slideDown(200):e(this).slideUp(200)})}),a.trigger("change")})},this.bind_datepicker=function(e){var t=e.attr("data-format")||"mm/dd/yy",a=e.attr("data-max-date")||null,l=e.attr("data-min-date")||null;e.datepicker({dateFormat:t,maxDate:a,minDate:l})},this.bind_datepickers=function(t){var a=this;t=t||e(".llms-datepicker"),t.each(function(){a.bind_datepicker(e(this))})},this.bind_editables=function(){function t(t){var l,n=t.find("label").clone(),s=t.attr("data-llms-editable"),i=t.attr("data-llms-editable-type"),r=t.attr("data-llms-editable-required")||"no",o=t.attr("data-llms-editable-value");if(r="yes"===r?' required="required"':"","select"===i){var d,c=JSON.parse(t.attr("data-llms-editable-options"));l=e('<select name="'+s+'"'+r+" />");for(var m in c)d=o===m?' selected="selected"':"",l.append('<option value="'+m+'"'+d+">"+c[m]+"</option>")}else if("datetime"===i){l=e('<div class="llms-datetime-field" />'),o=JSON.parse(o);var u=t.attr("data-llms-editable-date-format")||"",f=t.attr("data-llms-editable-date-min")||"",p=t.attr("data-llms-editable-date-max")||"";$picker=e('<input class="llms-date-input llms-datepicker" data-format="'+u+'" data-max-date="'+p+'" data-min-date="'+f+'" name="'+s+'[date]" type="text" value="'+o.date+'">'),a.bind_datepicker($picker),l.append($picker),l.append("<em>@</em>"),l.append('<input class="llms-time-input" max="23" min="0" name="'+s+'[hour]" type="number" value="'+o.hour+'">'),l.append("<em>:</em>"),l.append('<input class="llms-time-input" max="59" min="0" name="'+s+'[minute]" type="number" value="'+o.minute+'">')}else l=e('<input name="'+s+'" type="'+i+'" value="'+o+'"'+r+">");t.empty().append(n).append(l),"select"===i&&setTimeout(function(){l.trigger("change")},100)}var a=this;e("a.llms-editable").on("click",function(a){a.preventDefault();var l,n=e(this);l=n.attr("data-fields")?e(n.attr("data-fields")):n.closest(".llms-metabox-section").find("[data-llms-editable]"),n.remove(),l.each(function(){t(e(this))})})},this.bind_llms_engagement=function(){var t=this;e("#_llms_engagement_type").on("change",function(){e("#_llms_engagement").trigger("llms-engagement-type-change",e(this).val())}),e("#_llms_engagement").on("llms-engagement-type-change",function(a,l){var n=e(this);switch(l){case"achievement":case"certificate":case"email":var s="llms_"+l;n.val(null).attr("data-post-type",s).trigger("change"),t.post_select(n);break;default:n.trigger("llms-engagement-type-change-external",l)}})},this.bind_llms_membership=function(){function t(){var e=l.find("tbody tr");1===e.length?e.first().show():e.first().hide()}function a(){var t=[];return l.find('tbody tr a[href="#llms-course-remove"]').each(function(){t.push(e(this).attr("data-id"))}),t}var l=e(".llms-mb-list._llms_content_table");t(),l.on("click",'a[href="#llms-course-remove"]',function(a){a.preventDefault();var l=e(this),n=l.closest("tr"),s=l.closest(".llms-mb-list");LLMS.Spinner.start(s),window.LLMS.Ajax.call({data:{action:"membership_remove_auto_enroll_course",course_id:l.attr("data-id")},beforeSend:function(){s.find("p.error").remove()},success:function(e){e.success?(n.fadeOut(200),setTimeout(function(){n.remove(),t()},400)):s.prepend('<p class="error">'+e.message+"</p>"),LLMS.Spinner.stop(s)}})}),l.on("click",'a[href="#llms-course-bulk-enroll"]',function(t){t.preventDefault();var a=e(this),l=(a.closest("tr"),a.closest(".llms-mb-list"));window.confirm(LLMS.l10n.translate("Click okay to enroll all active members into the selected course. Enrollment will take place in the background and you may leave your site after confirmation. This action cannot be undone!"))&&(LLMS.Spinner.start(l),window.LLMS.Ajax.call({data:{action:"bulk_enroll_membership_into_course",course_id:a.attr("data-id")},beforeSend:function(){l.find("p.error").remove()},success:function(e){e.success?a.replaceWith('<strong style="float:right;">'+e.data.message+"&nbsp;&nbsp;</strong>"):l.prepend('<p class="error">'+e.message+"</p>"),LLMS.Spinner.stop(l)}}))}),e("#_llms_auto_enroll").on("change",function(){var l=e(this).val(),n=e(this).find('option[value="'+e(this).val()+'"]').text();if(l){if(-1!==a().indexOf(l))return alert(LLMS.l10n.replace('"%s" is already in the course list.',{"%s":n})),void e(this).val("").trigger("change");var s=e(".llms-mb-list._llms_content_table");$tr=e("<tr />"),$tr.append('<td><span class="llms-drag-handle" style="color:#999;"><i class="fa fa-ellipsis-v" aria-hidden="true" style="margin-right:2px;"></i><i class="fa fa-ellipsis-v" aria-hidden="true"></i></span></td>'),$tr.append('<td><a href="'+window.llms.admin_url+"post.php?action=edit&post="+l+'">'+n+"</a></td>"),$tr.append('<td><a class="llms-button-danger small" data-id="'+l+'" href="#llms-course-remove" style="float:right;">'+LLMS.l10n.translate("Remove course")+'</a><a class="llms-button-secondary small" data-id="'+l+'" href="#llms-course-bulk-enroll" style="float:right;">'+LLMS.l10n.translate("Enroll All Members")+"</a></td>"),s.find("table tbody").append($tr),e(this).val("").trigger("change"),t(),s.trigger("llms-save-autoenroll-courses")}}),l.find("table tbody").sortable({handle:".llms-drag-handle",stop:function(e,t){t.item.closest(".llms-mb-list").trigger("llms-save-autoenroll-courses")}}),l.on("llms-save-autoenroll-courses",function(){var t=e(this);LLMS.Spinner.start(t),window.LLMS.Ajax.call({data:{action:"llms_save_membership_autoenroll_courses",courses:a()},error:function(e,t,a){alert(a)},complete:function(){LLMS.Spinner.stop(t)}})})},this.bind_llms_order=function(){e('button[name="llms-refund-toggle"]').on("click",function(){var t=e(this),a=t.closest("tr"),l=a.attr("data-transaction-id"),n=t.attr("data-refundable"),s="1"===t.attr("data-gateway-supports"),i=t.attr("data-gateway"),r=e("#llms-txn-refund-model .llms-txn-refund-form").clone(),o=r.find(".gateway-btn");"remove"!==t.attr("data-action")?(t.text(LLMS.l10n.translate("Cancel")),t.attr("data-action","remove"),r.find("input").removeAttr("disabled"),r.find('input[name="llms_refund_amount"]').attr("max",n),r.find('input[name="llms_refund_txn_id"]').val(l),s&&(o.find(".llms-gateway-title").text(i),o.show()),a.after(r)):(t.text(LLMS.l10n.translate("Refund")),t.attr("data-action",""),a.next("tr").remove())}),e('button[name="llms-manual-txn-toggle"]').on("click",function(){var t=e(this),a=t.closest("tr"),l=e("#llms-manual-txn-model .llms-manual-txn-form").clone();"remove"!==t.attr("data-action")?(t.text(LLMS.l10n.translate("Cancel")),t.attr("data-action","remove"),l.find("input").removeAttr("disabled"),a.after(l)):(t.text(LLMS.l10n.translate("Record a Manual Payment")),t.attr("data-action",""),a.next("tr").remove())}),e(".llms-metabox").one("focus",'.llms-metabox-field[data-llms-editable="payment_gateway"] select',function(){e(this).attr("data-original-value")||e(this).attr("data-original-value",e(this).val())}),e(".llms-metabox").on("change",'.llms-metabox-field[data-llms-editable="payment_gateway"] select',function(){var t=e(this),a=t.val(),l=JSON.parse(t.closest(".llms-metabox-field").attr("data-gateway-fields")),n=l[a];for(var s in n){var i=e('input[name="'+n[s].name+'"]'),r=i.closest(".llms-metabox-field");n[s].enabled?(r.show(),i.attr("required","required"),i.removeAttr("disabled"),a===t.attr("data-original-value")&&i.val(r.attr("data-llms-editable-value"))):(i.attr("value",""),i.removeAttr("required"),r.hide())}})},this.bind_merge_code_buttons=function(t){t=t||e(".llms-merge-code-wrapper"),t.find(".llms-merge-code-button").on("click",function(){e(this).next(".llms-merge-codes").toggleClass("active")}),t.find(".llms-merge-codes li").on("click",function(){var t=e(this),a=t.closest(".llms-merge-codes"),l=a.attr("data-target"),n=t.attr("data-code");if(-1===l.indexOf("#")){var s=window.tinymce.editors[l];s?s.insertContent(n):alert(LLMS.l10n.translate("Copy this code and paste it into the desired area")+": "+n)}else e(l).val(e(l).val()+n);a.removeClass("active")})},this.bind_tabs=function(){e(".llms-nav-tab-wrapper .tabs li").on("click",function(){var t=e(this),a=t.closest(".llms-mb-container"),l=t.attr("data-tab");t.siblings().removeClass("llms-active"),a.find(".tab-content").removeClass("llms-active"),t.addClass("llms-active"),e("#"+l).addClass("llms-active")})},this.post_select=function(t){var a="multiple"===t.attr("multiple");if(t.llmsPostsSelect2({width:a?"100%":"65%"}),!a&&!t.attr("data-no-view-button")){var l=LLMS.l10n.translate("View"),n=e('<a class="llms-button-secondary small" style="margin-left:5px;" target="_blank" href="#">'+l+' <i class="fa fa-external-link" aria-hidden="true"></i></a>');t.next(".select2").after(n),t.on("change",function(){var t=e(this).val();t?n.attr("href","/?p="+t).show():n.hide()}).trigger("change")}},this.bind_tables=function(){e('.llms-table button[name="llms-expand-table"]').on("click",function(){var t=e(this),a=t.closest(".llms-table");if(t.attr("data-text")){var l=t.text();t.text(t.attr("data-text")),t.attr("data-text",l)}a.find(".expandable").each(function(){e(this).hasClass("closed")?e(this).addClass("opened").removeClass("closed"):e(this).addClass("closed").removeClass("opened")})})},this.init()};window.llms.metaboxes=new t}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxsbXMtbWV0YWJveGVzLmpzIiwiLi4vcGFydGlhbHMvX21ldGFib3gtZmllbGQtcmVwZWF0ZXIuanMiXSwibmFtZXMiOlsiJCIsImZuIiwibGxtc0NvbGxhcHNpYmxlIiwidGhpcyIsIm9uIiwiJHBhcmVudCIsImNsb3Nlc3QiLCIkc2libGluZ3MiLCJzaWJsaW5ncyIsInRvZ2dsZUNsYXNzIiwidHJpZ2dlciIsImZpbmQiLCJzbGlkZVRvZ2dsZSIsImVhY2giLCJyZW1vdmVDbGFzcyIsInNsaWRlVXAiLCJ3aW5kb3ciLCJsbG1zIiwiTWV0YWJveGVzIiwicmVwZWF0ZXJzIiwibWV0YWJveGVzIiwiJHJlcGVhdGVycyIsImluaXQiLCJzZWxmIiwibGVuZ3RoIiwiTExNUyIsIndhaXRfZm9yIiwidGlueU1DRSIsImxvYWQiLCJiaW5kIiwiYXR0ciIsImhhbmRsZV9zdWJtaXQiLCIkcmVwZWF0ZXIiLCIkcm93cyIsIiRtb2RlbCIsIkVkaXRvck1hbmFnZXIiLCJleGVjQ29tbWFuZCIsImFkZF9yb3ciLCJzb3J0YWJsZSIsImhhbmRsZSIsIml0ZW1zIiwic3RhcnQiLCJldmVudCIsInVpIiwiYWRkQ2xhc3MiLCJzdG9wIiwiJGVkcyIsIml0ZW0iLCJlZF9pZCIsInNhdmUiLCJlIiwic3RvcFByb3BhZ2F0aW9uIiwiJHJvdyIsImNvbmZpcm0iLCJsMTBuIiwidHJhbnNsYXRlIiwicmVtb3ZlIiwic2V0VGltZW91dCIsImRhdGEiLCJleHBhbmQiLCJjbG9uZSIsIm5ld19pbmRleCIsImVkaXRvciIsInJlaW5kZXgiLCJrZXkiLCJ2YWwiLCIkZmllbGQiLCJoYXNDbGFzcyIsImkiLCJhcHBlbmQiLCJ0aXRsZSIsImJpbmRfcm93IiwiYmluZF9yb3dfaGVhZGVyIiwibGxtc1NlbGVjdDIiLCJ3aWR0aCIsImxsbXNTdHVkZW50c1NlbGVjdDIiLCJiaW5kX2RhdGVwaWNrZXJzIiwiYmluZF9jb250cm9sbGVycyIsIiR0aXRsZSIsInRleHQiLCIkYnRuIiwiJHNwaW5uZXIiLCJwYXJlbnQiLCJpcyIsInJlbW92ZUF0dHIiLCJwcmV2ZW50RGVmYXVsdCIsIndhaXQiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJvZmYiLCJzdG9yZSIsIm9iaiIsImluZGV4IiwicmVwbGFjZV9hdHRyIiwiJGVsIiwic3RyIiwicmVwbGFjZSIsIm9sZF9pbmRleCIsIiRlZCIsInNlcmlhbGl6ZSIsInJvd3MiLCJuYW1lIiwiZWRpdG9ycyIsImdldENvbnRlbnQiLCJwdXNoIiwiYWN0aW9uIiwiY2IiLCJzdG9yZV9hY3Rpb24iLCJBamF4IiwiY2FsbCIsImJlZm9yZVNlbmQiLCJTcGlubmVyIiwic3VjY2VzcyIsInIiLCJwb3N0X3NlbGVjdCIsImJpbmRfdGFicyIsImJpbmRpbmdzIiwic2VsZWN0b3IiLCJmdW5jIiwiJHNlbGVjdG9yIiwicmVkdWNlZCIsImZpbHRlciIsInBvc3QiLCJwb3N0X3R5cGUiLCJiaW5kX2NiX2NvbnRyb2xsZXJzIiwiJGNvbnRyb2xsZXJzIiwiJGNiIiwiJGNvbnRyb2xsZWQiLCJzbGlkZURvd24iLCJwb3NzaWJsZSIsInZhbHMiLCJpbmRleE9mIiwic3BsaXQiLCJiaW5kX2RhdGVwaWNrZXIiLCJmb3JtYXQiLCJtYXhEYXRlIiwibWluRGF0ZSIsImRhdGVwaWNrZXIiLCJkYXRlRm9ybWF0IiwiJGRhdGVwaWNrZXJzIiwiYmluZF9lZGl0YWJsZXMiLCJtYWtlX2VkaXRhYmxlIiwiJGlucHV0IiwiJGxhYmVsIiwidHlwZSIsInJlcXVpcmVkIiwic2VsZWN0ZWQiLCJvcHRpb25zIiwiSlNPTiIsInBhcnNlIiwibWluX2RhdGUiLCJtYXhfZGF0ZSIsIiRwaWNrZXIiLCJkYXRlIiwiaG91ciIsIm1pbnV0ZSIsImVtcHR5IiwiJGZpZWxkcyIsImJpbmRfbGxtc19lbmdhZ2VtZW50IiwiZW5nYWdlbWVudF90eXBlIiwiJHNlbGVjdCIsImNwdCIsImJpbmRfbGxtc19tZW1iZXJzaGlwIiwidG9nZ2xlX2hlYWRlcl9yb3ciLCIkdGFibGUiLCJmaXJzdCIsInNob3ciLCJoaWRlIiwiZ2V0X2NvdXJzZV9pZHMiLCJjb3Vyc2VzIiwiJGNvbnRhaW5lciIsImNvdXJzZV9pZCIsImZhZGVPdXQiLCJwcmVwZW5kIiwibWVzc2FnZSIsInJlcGxhY2VXaXRoIiwiaWQiLCJhbGVydCIsIiVzIiwiJHRyIiwiYWRtaW5fdXJsIiwiZXJyb3IiLCJqcXhociIsImNvZGUiLCJlcnJvcl9tc2ciLCJjb21wbGV0ZSIsImJpbmRfbGxtc19vcmRlciIsInR4bl9pZCIsInJlZnVuZGFibGVfYW1vdW50IiwiZ2F0ZXdheV9zdXBwb3J0cyIsImdhdGV3YXlfdGl0bGUiLCIkbmV3X3JvdyIsIiRnYXRld2F5X2J0biIsImFmdGVyIiwibmV4dCIsIm9uZSIsImdhdGV3YXkiLCJnYXRld2F5X2RhdGEiLCJmaWVsZCIsIiR3cmFwIiwiZW5hYmxlZCIsImJpbmRfbWVyZ2VfY29kZV9idXR0b25zIiwiJHdyYXBwZXJzIiwidGFyZ2V0IiwidGlueW1jZSIsImluc2VydENvbnRlbnQiLCIkbWV0YWJveCIsInRhYl9pZCIsIm11bHRpIiwibGxtc1Bvc3RzU2VsZWN0MiIsIm1zZyIsImJpbmRfdGFibGVzIiwialF1ZXJ5Il0sIm1hcHBpbmdzIjoiQ0FPQSxTQUFBQSxHQVNBQSxFQUFBQyxHQUFBQyxnQkFBQSxXQW9CQSxNQWhCQUMsTUFBQUMsR0FBQSxRQUFBLDJCQUFBLFdBRUEsR0FBQUMsR0FBQUwsRUFBQUcsTUFBQUcsUUFBQSxxQkFDQUMsRUFBQUYsRUFBQUcsU0FBQSxvQkFFQUgsR0FBQUksWUFBQSxVQUFBQyxRQUFBLDRCQUVBTCxFQUFBTSxLQUFBLDBCQUFBQyxZQUFBLEtBRUFMLEVBQUFNLEtBQUEsV0FDQWIsRUFBQUcsTUFBQVcsWUFBQSxVQUNBZCxFQUFBRyxNQUFBUSxLQUFBLDBCQUFBSSxRQUFBLFNBS0FaLE1BSUFhLE9BQUFDLEtBQUFELE9BQUFDLFFBRUEsSUFBQUMsR0FBQSxXQ2pDQWYsS0FBQWdCLFdBT0FDLFVBQUFqQixLQU9Ba0IsV0FBQSxLQVVBQyxLQUFBLFdBRUEsR0FBQUMsR0FBQXBCLElBRUFvQixHQUFBRixXQUFBckIsRUFBQSwwQkFFQXVCLEVBQUFGLFdBQUFHLFNBR0FDLEtBQUFDLFNBQ0EsV0FDQSxNQUFBLG1CQUFBQyxVQUVBLFdBQ0FKLEVBQUFLLE9BQ0FMLEVBQUFNLFNBTUE3QixFQUFBLDZDQUFBSSxHQUFBLFFBQUEsV0FDQUosRUFBQUcsTUFBQTJCLEtBQUEsb0JBQUEsU0FJQTlCLEVBQUEsU0FBQUksR0FBQSxTQUFBbUIsRUFBQVEsaUJBYUFGLEtBQUEsV0FFQSxHQUFBTixHQUFBcEIsSUFFQW9CLEdBQUFGLFdBQUFSLEtBQUEsV0FFQSxHQUFBbUIsR0FBQWhDLEVBQUFHLE1BQ0E4QixFQUFBRCxFQUFBckIsS0FBQSx1QkFDQXVCLEVBQUFGLEVBQUFyQixLQUFBLHVCQUVBZ0IsU0FBQVEsY0FBQUMsWUFBQSxtQkFBQSxFQUFBRixFQUFBdkIsS0FBQSxpQ0FBQW1CLEtBQUEsT0FHQUUsRUFBQXJCLEtBQUEsMEJBQUFQLEdBQUEsUUFBQSxXQUNBbUIsRUFBQWMsUUFBQUwsRUFBQSxNQUFBLEtBSUFDLEVBQUFLLFVBQ0FDLE9BQUEsb0JBQ0FDLE1BQUEscUJBQ0FDLE1BQUEsU0FBQUMsRUFBQUMsR0FDQVYsRUFBQVcsU0FBQSxhQUVBQyxLQUFBLFNBQUFILEVBQUFDLEdBQ0FWLEVBQUFuQixZQUFBLFdBRUEsSUFBQWdDLEdBQUFILEVBQUFJLEtBQUFwQyxLQUFBLDBCQUNBbUMsR0FBQWpDLEtBQUEsV0FDQSxHQUFBbUMsR0FBQWhELEVBQUFHLE1BQUEyQixLQUFBLEtBQ0FILFNBQUFRLGNBQUFDLFlBQUEsbUJBQUEsRUFBQVksR0FDQXJCLFFBQUFRLGNBQUFDLFlBQUEsZ0JBQUEsRUFBQVksS0FHQXpCLEVBQUEwQixLQUFBakIsTUFJQUEsRUFBQTVCLEdBQUEsUUFBQSx3QkFBQSxTQUFBOEMsR0FDQUEsRUFBQUMsaUJBQ0EsSUFBQUMsR0FBQXBELEVBQUFHLE1BQUFHLFFBQUEscUJBQ0FVLFFBQUFxQyxRQUFBNUIsS0FBQTZCLEtBQUFDLFVBQUEsdUVBQ0FILEVBQUFJLFNBQ0FDLFdBQUEsV0FDQWxDLEVBQUEwQixLQUFBakIsSUFDQSxTQWtCQUssUUFBQSxTQUFBTCxFQUFBMEIsRUFBQUMsR0FFQSxHQUFBcEMsR0FBQXBCLEtBQ0E4QixFQUFBRCxFQUFBckIsS0FBQSx1QkFDQXVCLEVBQUFGLEVBQUFyQixLQUFBLHdCQUNBeUMsRUFBQWxCLEVBQUF2QixLQUFBLHNCQUFBaUQsUUFDQUMsRUFBQTdCLEVBQUFyQixLQUFBLHNCQUFBYSxPQUNBc0MsRUFBQXZDLEVBQUF3QyxRQUFBWCxFQUFBUyxFQUVBSCxJQUNBMUQsRUFBQWEsS0FBQTZDLEVBQUEsU0FBQU0sRUFBQUMsR0FFQSxHQUFBQyxHQUFBZCxFQUFBekMsS0FBQSxXQUFBcUQsRUFBQSxLQUVBRSxHQUFBQyxTQUFBLHlCQUNBbkUsRUFBQWEsS0FBQW9ELEVBQUEsU0FBQUcsRUFBQVYsR0FDQVEsRUFBQUcsT0FBQSxrQkFBQVgsRUFBQU0sSUFBQSx5QkFBQU4sRUFBQVksTUFBQSxlQUVBSixFQUFBeEQsUUFBQSxXQUVBd0QsRUFBQUQsSUFBQUEsS0FNQVIsV0FBQSxXQUNBbEMsRUFBQWdELFNBQUFuQixJQUNBLEdBRUFuQixFQUFBb0MsT0FBQWpCLEdBQ0FPLEdBQ0FQLEVBQUF6QyxLQUFBLDRCQUFBRCxRQUFBLFNBRUFpQixRQUFBUSxjQUFBQyxZQUFBLGdCQUFBLEVBQUEwQixHQUVBOUIsRUFBQXRCLFFBQUEseUJBQ0EwQyxLQUFBQSxFQUNBTSxLQUFBQSxLQWFBYSxTQUFBLFNBQUFuQixHQUVBakQsS0FBQXFFLGdCQUFBcEIsR0FFQUEsRUFBQXpDLEtBQUEsaUJBQUE4RCxhQUNBQyxNQUFBLFNBR0F0QixFQUFBekMsS0FBQSx5QkFBQWdFLHNCQUVBeEUsS0FBQWlCLFVBQUF3RCxpQkFBQXhCLEVBQUF6QyxLQUFBLHFCQUNBUixLQUFBaUIsVUFBQXlELGlCQUFBekIsRUFBQXpDLEtBQUEsMEJBWUE2RCxnQkFBQSxTQUFBcEIsR0FHQSxHQUFBMEIsR0FBQTFCLEVBQUF6QyxLQUFBLHdCQUNBdUQsRUFBQWQsRUFBQXpDLEtBQUEsdUNBRUFtRSxHQUFBaEQsS0FBQSxlQUFBZ0QsRUFBQUMsUUFFQWIsRUFBQTlELEdBQUEsc0JBQUEsV0FDQSxHQUFBNkQsR0FBQWpFLEVBQUFHLE1BQUE4RCxLQUNBQSxLQUNBQSxFQUFBYSxFQUFBaEQsS0FBQSxpQkFFQWdELEVBQUFDLEtBQUFkLEtBQ0F2RCxRQUFBLFVBWUFxQixjQUFBLFNBQUFtQixHQUdBLEdBQUE4QixHQUFBaEYsRUFBQSxtQ0FDQWlGLEVBQUFELEVBQUFFLFNBQUF2RSxLQUFBLFdBRUEsSUFBQXFFLEVBQUFHLEdBQUEsaUJBRUEsV0FEQUgsR0FBQUksV0FBQSxvQkFJQWxDLEdBQUFtQyxpQkFHQXJGLEVBQUEsOEJBQUE0QyxTQUFBLFlBQUFkLEtBQUEsV0FBQSxZQUNBbUQsRUFBQXJDLFNBQUEsWUFFQSxJQUVBMEMsR0FGQS9ELEVBQUFQLE9BQUFDLEtBQUFHLFVBQUFELFVBQ0FpRCxFQUFBLENBR0E3QyxHQUFBRixXQUFBUixLQUFBLFdBQ0FVLEVBQUEwQixLQUFBakQsRUFBQUcsU0FHQW1GLEVBQUFDLFlBQUEsV0FFQW5CLEdBQUEsS0FBQXBFLEVBQUEscUNBQUF3QixRQUVBZ0UsY0FBQUYsR0FDQXRGLEVBQUEsU0FBQXlGLElBQUEsU0FBQXRGLEtBQUE0QixlQUNBa0QsRUFBQW5FLFlBQUEsYUFDQWtFLEVBQUFsRSxZQUFBLFlBQUFzRSxXQUFBLFlBQUExRSxRQUFBLFVBSUEwRCxLQUlBLE1BV0F4QyxLQUFBLFdBRUEsR0FBQUwsR0FBQXBCLElBRUFvQixHQUFBRixXQUFBUixLQUFBLFdBRUEsR0FBQW1CLEdBQUFoQyxFQUFBRyxLQUlBNkIsR0FBQW1DLFNBQUEsY0FBQW5DLEVBQUFtQyxTQUFBLGVBSUE1QyxFQUFBbUUsTUFBQTFELEVBQUEsT0FBQSxTQUFBMEIsR0FFQTFCLEVBQUFZLFNBQUEsYUFFQTVDLEVBQUFhLEtBQUE2QyxFQUFBQSxLQUFBLFNBQUFVLEVBQUF1QixHQUNBcEUsRUFBQWMsUUFBQUwsRUFBQTJELEdBQUEsS0FJQTNELEVBQUFyQixLQUFBLDBDQUFBRSxLQUFBLFdBQ0FVLEVBQUFnRCxTQUFBdkUsRUFBQUcsY0FvQkE0RCxRQUFBLFNBQUFYLEVBQUF3QyxHQU9BLFFBQUFDLEdBQUFDLEVBQUFoRSxHQUNBZ0UsRUFBQWpGLEtBQUEsV0FDQSxHQUFBa0YsR0FBQS9GLEVBQUFHLE1BQUEyQixLQUFBQSxFQUNBOUIsR0FBQUcsTUFBQTJCLEtBQUFBLEVBQUFpRSxFQUFBQyxRQUFBQyxFQUFBTCxNQVJBLEdBQUFLLEdBQUE3QyxFQUFBdEIsS0FBQSxrQkFDQW9FLEVBQUE5QyxFQUFBekMsS0FBQSxnQ0EwQkEsT0F4QkFnQixTQUFBUSxjQUFBQyxZQUFBLG1CQUFBLEVBQUE4RCxFQUFBcEUsS0FBQSxPQVNBc0IsRUFBQXRCLEtBQUEsaUJBQUE4RCxHQUVBQyxFQUFBekMsRUFBQSxrQkFFQXlDLEVBQUF6QyxFQUFBekMsS0FBQSx1QkFBQSxlQUVBa0YsRUFBQXpDLEVBQUF6QyxLQUFBLHdFQUFBLE1BQ0FrRixFQUFBekMsRUFBQXpDLEtBQUEsd0VBQUEsUUFDQWtGLEVBQUF6QyxFQUFBekMsS0FBQSxxQkFBQSxtQkFDQWtGLEVBQUF6QyxFQUFBekMsS0FBQSxxQkFBQSxtQkFDQWtGLEVBQUF6QyxFQUFBekMsS0FBQSwyQkFBQSxxQkFDQWtGLEVBQUF6QyxFQUFBekMsS0FBQSwyQkFBQSxNQUNBa0YsRUFBQXpDLEVBQUF6QyxLQUFBLG9CQUFBLE1BQ0FrRixFQUFBekMsRUFBQXpDLEtBQUEsd0JBQUEsTUFFQXVGLEVBQUFwRSxLQUFBLE9BWUFtQixLQUFBLFNBQUFqQixHQUNBQSxFQUFBdEIsUUFBQSw2QkFBQW9GLElBQUE5RCxJQUNBN0IsS0FBQXVGLE1BQUExRCxFQUFBLFNBV0FtRSxVQUFBLFNBQUFuRSxHQUVBLEdBQUFvRSxLQThCQSxPQTVCQXBFLEdBQUFyQixLQUFBLDBDQUFBRSxLQUFBLFdBRUEsR0FBQThFLEtBR0EzRixHQUFBRyxNQUFBUSxLQUFBLCtDQUFBRSxLQUFBLFdBQ0E4RSxFQUFBM0YsRUFBQUcsTUFBQTJCLEtBQUEsU0FBQTlCLEVBQUFHLE1BQUE4RCxRQUlBakUsRUFBQUcsTUFBQVEsS0FBQSwyQkFBQUUsS0FBQSxXQUVBLEdBQUF3RixHQUFBckcsRUFBQUcsTUFBQTJCLEtBQUEsT0FHQUgsU0FBQTJFLFFBQUFELEdBQ0FWLEVBQUFVLEdBQUExRSxRQUFBMkUsUUFBQUQsR0FBQUUsYUFHQVosRUFBQVUsR0FBQXJHLEVBQUFHLE1BQUE4RCxRQUtBbUMsRUFBQUksS0FBQWIsS0FJQVMsR0FjQVYsTUFBQSxTQUFBMUQsRUFBQXlFLEVBQUFDLEdBRUFBLEVBQUFBLEdBQUEsWUFDQSxJQUFBbkYsR0FBQXBCLEtBQ0F1RCxHQUNBK0MsT0FBQXpFLEVBQUFyQixLQUFBLGdDQUFBc0QsTUFDQTBDLGFBQUFGLEVBR0EsVUFBQUEsSUFDQS9DLEVBQUEwQyxLQUFBN0UsRUFBQTRFLFVBQUFuRSxJQUdBUCxLQUFBbUYsS0FBQUMsTUFDQW5ELEtBQUFBLEVBQ0FvRCxXQUFBLFdBRUE5RSxFQUFBWSxTQUFBLGNBQ0FuQixLQUFBc0YsUUFBQXRFLE1BQUFULElBR0FnRixRQUFBLFNBQUFDLEdBRUFQLEVBQUFPLEdBQ0F4RixLQUFBc0YsUUFBQWxFLEtBQUFiLEdBQ0FBLEVBQUFsQixZQUFBLG1CQVNBWCxLQUFBZ0IsVUFBQUcsT0R4WkFuQixLQUFBbUIsS0FBQSxXQUVBLEdBQUFDLEdBQUFwQixJQUVBSCxHQUFBLHNCQUFBYSxLQUFBLFdBQ0FVLEVBQUEyRixZQUFBbEgsRUFBQUcsU0FHQUgsRUFBQSwyQkFBQUUsa0JBRUFDLEtBQUFnSCxXQUdBLElBQUFDLEtBRUFDLFNBQUFySCxFQUFBLG9CQUNBc0gsS0FBQSxxQkFHQUQsU0FBQXJILEVBQUEsaUJBQ0FzSCxLQUFBLFNBQUFDLEdBQ0FBLEVBQUE5QyxhQUNBQyxNQUFBLFlBS0EyQyxTQUFBckgsRUFBQSx5QkFDQXNILEtBQUEsU0FBQUMsR0FDQUEsRUFBQTVDLHlCQUlBMEMsU0FBQXJILEVBQUEseUNBQ0FzSCxLQUFBLHdCQUdBRCxTQUFBckgsRUFBQSx3QkFDQXNILEtBQUEscUJBR0FELFNBQUFySCxFQUFBLGVBQ0FzSCxLQUFBLGdCQUdBRCxTQUFBckgsRUFBQSw0QkFDQXNILEtBQUEsNEJBR0FELFNBQUFySCxFQUFBLG1CQUNBc0gsS0FBQSxrQkE0QkEsSUF2QkF0SCxFQUFBYSxLQUFBdUcsRUFBQSxTQUFBeEIsRUFBQUQsR0FFQSxHQUFBQSxFQUFBMEIsU0FBQTdGLE9BQUEsQ0FHQSxHQUFBZ0csR0FBQTdCLEVBQUEwQixTQUFBSSxPQUFBLFdBQ0EsTUFBQSxLQUFBekgsRUFBQUcsTUFBQUcsUUFBQSx3QkFBQWtCLFFBSUEsaUJBQUFtRSxHQUFBMkIsS0FDQS9GLEVBQUFvRSxFQUFBMkIsTUFBQUUsR0FHQSxrQkFBQTdCLEdBQUEyQixNQUNBM0IsRUFBQTJCLEtBQUFFLE1BUUF4RyxPQUFBQyxLQUFBeUcsS0FBQUMsVUFBQSxDQUVBLEdBQUFMLEdBQUEsUUFBQXRHLE9BQUFDLEtBQUF5RyxLQUFBQyxTQUVBLG1CQUFBeEgsTUFBQW1ILElBRUFuSCxLQUFBbUgsT0FnQkFuSCxLQUFBeUgsb0JBQUEsU0FBQUMsR0FFQUEsRUFBQUEsR0FBQTdILEVBQUEseUNBRUE2SCxFQUFBaEgsS0FBQSxXQUVBLEdBQUFpSCxHQUFBOUgsRUFBQUcsTUFDQTRILEVBQUEvSCxFQUFBOEgsRUFBQWhHLEtBQUEsa0JBQUF4QixRQUFBLGdCQUVBd0gsR0FBQTFILEdBQUEsU0FBQSxXQUVBSixFQUFBRyxNQUFBZ0YsR0FBQSxZQUVBNEMsRUFBQUMsVUFBQSxLQUlBRCxFQUFBaEgsUUFBQSxPQU1BK0csRUFBQXBILFFBQUEsYUFjQVAsS0FBQTBFLGlCQUFBLFNBQUFnRCxHQUVBQSxFQUFBQSxHQUFBN0gsRUFBQSx3QkFFQTZILEVBQUFoSCxLQUFBLFdBRUEsR0FFQW9ELEdBRkE2QixFQUFBOUYsRUFBQUcsTUFDQTRILEVBQUEvSCxFQUFBLHNCQUFBOEYsRUFBQWhFLEtBQUEsTUFBQSxLQUdBZ0UsR0FBQTFGLEdBQUEsU0FBQSxXQUlBNkQsRUFGQSxhQUFBNkIsRUFBQWhFLEtBQUEsUUFFQWdFLEVBQUFYLEdBQUEsWUFBQVcsRUFBQTdCLE1BQUEsUUFJQTZCLEVBQUE3QixNQUlBOEQsRUFBQWxILEtBQUEsV0FFQSxHQUFBb0gsR0FBQWpJLEVBQUFHLE1BQUEyQixLQUFBLHlCQUNBb0csVUFFQUQsRUFBQUUsUUFBQSxLQUVBRCxFQUFBRCxFQUFBRyxNQUFBLEtBSUFGLEVBQUExQixLQUFBeUIsUUFJQUMsRUFBQUMsUUFBQWxFLEdBRUFqRSxFQUFBRyxNQUFBNkgsVUFBQSxLQUlBaEksRUFBQUcsTUFBQVksUUFBQSxTQVFBK0UsRUFBQXBGLFFBQUEsYUFjQVAsS0FBQWtJLGdCQUFBLFNBQUF2QyxHQUNBLEdBQUF3QyxHQUFBeEMsRUFBQWhFLEtBQUEsZ0JBQUEsV0FDQXlHLEVBQUF6QyxFQUFBaEUsS0FBQSxrQkFBQSxLQUNBMEcsRUFBQTFDLEVBQUFoRSxLQUFBLGtCQUFBLElBQ0FnRSxHQUFBMkMsWUFDQUMsV0FBQUosRUFDQUMsUUFBQUEsRUFDQUMsUUFBQUEsS0FZQXJJLEtBQUF5RSxpQkFBQSxTQUFBK0QsR0FFQSxHQUFBcEgsR0FBQXBCLElBRUF3SSxHQUFBQSxHQUFBM0ksRUFBQSxvQkFFQTJJLEVBQUE5SCxLQUFBLFdBQ0FVLEVBQUE4RyxnQkFBQXJJLEVBQUFHLFVBWUFBLEtBQUF5SSxlQUFBLFdBSUEsUUFBQUMsR0FBQTNFLEdBRUEsR0FLQTRFLEdBTEFDLEVBQUE3RSxFQUFBdkQsS0FBQSxTQUFBaUQsUUFDQXlDLEVBQUFuQyxFQUFBcEMsS0FBQSxzQkFDQWtILEVBQUE5RSxFQUFBcEMsS0FBQSwyQkFDQW1ILEVBQUEvRSxFQUFBcEMsS0FBQSxnQ0FBQSxLQUNBbUMsRUFBQUMsRUFBQXBDLEtBQUEsMkJBS0EsSUFGQW1ILEVBQUEsUUFBQUEsRUFBQSx1QkFBQSxHQUVBLFdBQUFELEVBQUEsQ0FFQSxHQUNBRSxHQURBQyxFQUFBQyxLQUFBQyxNQUFBbkYsRUFBQXBDLEtBQUEsOEJBR0FnSCxHQUFBOUksRUFBQSxpQkFBQXFHLEVBQUEsSUFBQTRDLEVBQUEsTUFDQSxLQUFBLEdBQUFqRixLQUFBbUYsR0FDQUQsRUFBQWpGLElBQUFELEVBQUEsdUJBQUEsR0FDQThFLEVBQUF6RSxPQUFBLGtCQUFBTCxFQUFBLElBQUFrRixFQUFBLElBQUFDLEVBQUFuRixHQUFBLGlCQUdBLElBQUEsYUFBQWdGLEVBQUEsQ0FFQUYsRUFBQTlJLEVBQUEsdUNBRUFpRSxFQUFBbUYsS0FBQUMsTUFBQXBGLEVBQ0EsSUFBQXFFLEdBQUFwRSxFQUFBcEMsS0FBQSxtQ0FBQSxHQUNBd0gsRUFBQXBGLEVBQUFwQyxLQUFBLGdDQUFBLEdBQ0F5SCxFQUFBckYsRUFBQXBDLEtBQUEsZ0NBQUEsRUFFQTBILFNBQUF4SixFQUFBLCtEQUFBc0ksRUFBQSxvQkFBQWlCLEVBQUEsb0JBQUFELEVBQUEsV0FBQWpELEVBQUEsOEJBQUFwQyxFQUFBd0YsS0FBQSxNQUNBbEksRUFBQThHLGdCQUFBbUIsU0FDQVYsRUFBQXpFLE9BQUFtRixTQUNBVixFQUFBekUsT0FBQSxjQUVBeUUsRUFBQXpFLE9BQUEseURBQUFnQyxFQUFBLGdDQUFBcEMsRUFBQXlGLEtBQUEsTUFDQVosRUFBQXpFLE9BQUEsY0FDQXlFLEVBQUF6RSxPQUFBLHlEQUFBZ0MsRUFBQSxrQ0FBQXBDLEVBQUEwRixPQUFBLFVBSUFiLEdBQUE5SSxFQUFBLGdCQUFBcUcsRUFBQSxXQUFBMkMsRUFBQSxZQUFBL0UsRUFBQSxJQUFBZ0YsRUFBQSxJQUdBL0UsR0FBQTBGLFFBQUF2RixPQUFBMEUsR0FBQTFFLE9BQUF5RSxHQUNBLFdBQUFFLEdBQ0F2RixXQUFBLFdBQ0FxRixFQUFBcEksUUFBQSxXQUNBLEtBbkRBLEdBQUFhLEdBQUFwQixJQXdEQUgsR0FBQSxtQkFBQUksR0FBQSxRQUFBLFNBQUE4QyxHQUVBQSxFQUFBbUMsZ0JBRUEsSUFDQXdFLEdBREE3RSxFQUFBaEYsRUFBQUcsS0FJQTBKLEdBREE3RSxFQUFBbEQsS0FBQSxlQUNBOUIsRUFBQWdGLEVBQUFsRCxLQUFBLGdCQUVBa0QsRUFBQTFFLFFBQUEseUJBQUFLLEtBQUEsd0JBR0FxRSxFQUFBeEIsU0FFQXFHLEVBQUFoSixLQUFBLFdBQ0FnSSxFQUFBN0ksRUFBQUcsWUFjQUEsS0FBQTJKLHFCQUFBLFdBRUEsR0FBQXZJLEdBQUFwQixJQUdBSCxHQUFBLDBCQUFBSSxHQUFBLFNBQUEsV0FFQUosRUFBQSxxQkFBQVUsUUFBQSw4QkFBQVYsRUFBQUcsTUFBQThELFNBS0FqRSxFQUFBLHFCQUFBSSxHQUFBLDhCQUFBLFNBQUE4QyxFQUFBNkcsR0FFQSxHQUFBQyxHQUFBaEssRUFBQUcsS0FFQSxRQUFBNEosR0FLQSxJQUFBLGNBQ0EsSUFBQSxjQUNBLElBQUEsUUFFQSxHQUFBRSxHQUFBLFFBQUFGLENBRUFDLEdBQUEvRixJQUFBLE1BQUFuQyxLQUFBLGlCQUFBbUksR0FBQXZKLFFBQUEsVUFDQWEsRUFBQTJGLFlBQUE4QyxFQUVBLE1BS0EsU0FFQUEsRUFBQXRKLFFBQUEsdUNBQUFxSixPQWlCQTVKLEtBQUErSixxQkFBQSxXQVlBLFFBQUFDLEtBRUEsR0FBQWxJLEdBQUFtSSxFQUFBekosS0FBQSxXQUNBLEtBQUFzQixFQUFBVCxPQUNBUyxFQUFBb0ksUUFBQUMsT0FFQXJJLEVBQUFvSSxRQUFBRSxPQVlBLFFBQUFDLEtBRUEsR0FBQUMsS0FJQSxPQUhBTCxHQUFBekosS0FBQSwwQ0FBQUUsS0FBQSxXQUNBNEosRUFBQWpFLEtBQUF4RyxFQUFBRyxNQUFBMkIsS0FBQSxjQUVBMkksRUFsQ0EsR0FBQUwsR0FBQXBLLEVBQUEsb0NBdUNBbUssS0FHQUMsRUFBQWhLLEdBQUEsUUFBQSxnQ0FBQSxTQUFBOEMsR0FFQUEsRUFBQW1DLGdCQUVBLElBQUFTLEdBQUE5RixFQUFBRyxNQUNBaUQsRUFBQTBDLEVBQUF4RixRQUFBLE1BQ0FvSyxFQUFBNUUsRUFBQXhGLFFBQUEsZ0JBRUFtQixNQUFBc0YsUUFBQXRFLE1BQUFpSSxHQUVBMUosT0FBQVMsS0FBQW1GLEtBQUFDLE1BQ0FuRCxNQUNBK0MsT0FBQSx1Q0FDQWtFLFVBQUE3RSxFQUFBaEUsS0FBQSxZQUVBZ0YsV0FBQSxXQUVBNEQsRUFBQS9KLEtBQUEsV0FBQTZDLFVBR0F3RCxRQUFBLFNBQUFDLEdBRUFBLEVBQUFELFNBRUE1RCxFQUFBd0gsUUFBQSxLQUNBbkgsV0FBQSxXQUNBTCxFQUFBSSxTQUNBMkcsS0FDQSxNQUlBTyxFQUFBRyxRQUFBLG9CQUFBNUQsRUFBQTZELFFBQUEsUUFJQXJKLEtBQUFzRixRQUFBbEUsS0FBQTZILFFBT0FOLEVBQUFoSyxHQUFBLFFBQUEscUNBQUEsU0FBQThDLEdBRUFBLEVBQUFtQyxnQkFFQSxJQUFBUyxHQUFBOUYsRUFBQUcsTUFFQXVLLEdBREE1RSxFQUFBeEYsUUFBQSxNQUNBd0YsRUFBQXhGLFFBQUEsaUJBRUFVLFFBQUFxQyxRQUFBNUIsS0FBQTZCLEtBQUFDLFVBQUEsbU1BSUE5QixLQUFBc0YsUUFBQXRFLE1BQUFpSSxHQUVBMUosT0FBQVMsS0FBQW1GLEtBQUFDLE1BQ0FuRCxNQUNBK0MsT0FBQSxxQ0FDQWtFLFVBQUE3RSxFQUFBaEUsS0FBQSxZQUVBZ0YsV0FBQSxXQUNBNEQsRUFBQS9KLEtBQUEsV0FBQTZDLFVBRUF3RCxRQUFBLFNBQUFDLEdBRUFBLEVBQUFELFFBRUFsQixFQUFBaUYsWUFBQSxnQ0FBQTlELEVBQUF2RCxLQUFBb0gsUUFBQSx5QkFJQUosRUFBQUcsUUFBQSxvQkFBQTVELEVBQUE2RCxRQUFBLFFBSUFySixLQUFBc0YsUUFBQWxFLEtBQUE2SCxTQU9BMUssRUFBQSxzQkFBQUksR0FBQSxTQUFBLFdBRUEsR0FBQTRLLEdBQUFoTCxFQUFBRyxNQUFBOEQsTUFDQUssRUFBQXRFLEVBQUFHLE1BQUFRLEtBQUEsaUJBQUFYLEVBQUFHLE1BQUE4RCxNQUFBLE1BQUFjLE1BR0EsSUFBQWlHLEVBQUEsQ0FHQSxRQUFBUixJQUFBckMsUUFBQTZDLEdBT0EsTUFMQUMsT0FBQXhKLEtBQUE2QixLQUFBMEMsUUFBQSx1Q0FBQWtGLEtBQUE1RyxTQUdBdEUsR0FBQUcsTUFBQThELElBQUEsSUFBQXZELFFBQUEsU0FNQSxJQUFBMEosR0FBQXBLLEVBQUEsb0NBQ0FtTCxLQUFBbkwsRUFBQSxVQUVBbUwsSUFBQTlHLE9BQUEsdU1BQ0E4RyxJQUFBOUcsT0FBQSxnQkFBQXJELE9BQUFDLEtBQUFtSyxVQUFBLDZCQUFBSixFQUFBLEtBQUExRyxFQUFBLGFBQ0E2RyxJQUFBOUcsT0FBQSxvREFBQTJHLEVBQUEscURBQUF2SixLQUFBNkIsS0FBQUMsVUFBQSxpQkFBQSx1REFBQXlILEVBQUEsMERBQUF2SixLQUFBNkIsS0FBQUMsVUFBQSxzQkFBQSxhQUdBNkcsRUFBQXpKLEtBQUEsZUFBQTBELE9BQUE4RyxLQUdBbkwsRUFBQUcsTUFBQThELElBQUEsSUFBQXZELFFBQUEsVUFHQXlKLElBR0FDLEVBQUExSixRQUFBLG1DQUtBMEosRUFBQXpKLEtBQUEsZUFBQTJCLFVBQ0FDLE9BQUEsb0JBRUFNLEtBQUEsU0FBQUgsRUFBQUMsR0FDQUEsRUFBQUksS0FBQXpDLFFBQUEsaUJBQUFJLFFBQUEsbUNBS0EwSixFQUFBaEssR0FBQSwrQkFBQSxXQUVBLEdBQUFzSyxHQUFBMUssRUFBQUcsS0FFQXNCLE1BQUFzRixRQUFBdEUsTUFBQWlJLEdBRUExSixPQUFBUyxLQUFBbUYsS0FBQUMsTUFDQW5ELE1BQ0ErQyxPQUFBLDBDQUNBZ0UsUUFBQUQsS0FFQWEsTUFBQSxTQUFBQyxFQUFBQyxFQUFBQyxHQUNBUCxNQUFBTyxJQUVBQyxTQUFBLFdBQ0FoSyxLQUFBc0YsUUFBQWxFLEtBQUE2SCxTQWVBdkssS0FBQXVMLGdCQUFBLFdBRUExTCxFQUFBLHFDQUFBSSxHQUFBLFFBQUEsV0FFQSxHQUFBNEUsR0FBQWhGLEVBQUFHLE1BQ0FpRCxFQUFBNEIsRUFBQTFFLFFBQUEsTUFDQXFMLEVBQUF2SSxFQUFBdEIsS0FBQSx1QkFDQThKLEVBQUE1RyxFQUFBbEQsS0FBQSxtQkFDQStKLEVBQUEsTUFBQTdHLEVBQUFsRCxLQUFBLHlCQUNBZ0ssRUFBQTlHLEVBQUFsRCxLQUFBLGdCQUNBaUssRUFBQS9MLEVBQUEsZ0RBQUE0RCxRQUNBb0ksRUFBQUQsRUFBQXBMLEtBQUEsZUFHQSxZQUFBcUUsRUFBQWxELEtBQUEsZ0JBRUFrRCxFQUFBRCxLQUFBdEQsS0FBQTZCLEtBQUFDLFVBQUEsV0FDQXlCLEVBQUFsRCxLQUFBLGNBQUEsVUFDQWlLLEVBQUFwTCxLQUFBLFNBQUF5RSxXQUFBLFlBQ0EyRyxFQUFBcEwsS0FBQSxvQ0FBQW1CLEtBQUEsTUFBQThKLEdBQ0FHLEVBQUFwTCxLQUFBLG9DQUFBc0QsSUFBQTBILEdBRUFFLElBQ0FHLEVBQUFyTCxLQUFBLHVCQUFBb0UsS0FBQStHLEdBQ0FFLEVBQUExQixRQUdBbEgsRUFBQTZJLE1BQUFGLEtBSUEvRyxFQUFBRCxLQUFBdEQsS0FBQTZCLEtBQUFDLFVBQUEsV0FDQXlCLEVBQUFsRCxLQUFBLGNBQUEsSUFDQXNCLEVBQUE4SSxLQUFBLE1BQUExSSxZQU1BeEQsRUFBQSx5Q0FBQUksR0FBQSxRQUFBLFdBRUEsR0FBQTRFLEdBQUFoRixFQUFBRyxNQUNBaUQsRUFBQTRCLEVBQUExRSxRQUFBLE1BQ0F5TCxFQUFBL0wsRUFBQSxnREFBQTRELE9BR0EsWUFBQW9CLEVBQUFsRCxLQUFBLGdCQUVBa0QsRUFBQUQsS0FBQXRELEtBQUE2QixLQUFBQyxVQUFBLFdBQ0F5QixFQUFBbEQsS0FBQSxjQUFBLFVBQ0FpSyxFQUFBcEwsS0FBQSxTQUFBeUUsV0FBQSxZQUVBaEMsRUFBQTZJLE1BQUFGLEtBSUEvRyxFQUFBRCxLQUFBdEQsS0FBQTZCLEtBQUFDLFVBQUEsNEJBQ0F5QixFQUFBbEQsS0FBQSxjQUFBLElBQ0FzQixFQUFBOEksS0FBQSxNQUFBMUksWUFRQXhELEVBQUEsaUJBQUFtTSxJQUFBLFFBQUEsbUVBQUEsV0FFQW5NLEVBQUFHLE1BQUEyQixLQUFBLHdCQUNBOUIsRUFBQUcsTUFBQTJCLEtBQUEsc0JBQUE5QixFQUFBRyxNQUFBOEQsU0FPQWpFLEVBQUEsaUJBQUFJLEdBQUEsU0FBQSxtRUFBQSxXQUVBLEdBQUE0SixHQUFBaEssRUFBQUcsTUFDQWlNLEVBQUFwQyxFQUFBL0YsTUFDQVAsRUFBQTBGLEtBQUFDLE1BQUFXLEVBQUExSixRQUFBLHVCQUFBd0IsS0FBQSx3QkFDQXVLLEVBQUEzSSxFQUFBMEksRUFFQSxLQUFBLEdBQUFFLEtBQUFELEdBQUEsQ0FFQSxHQUFBbkksR0FBQWxFLEVBQUEsZUFBQXFNLEVBQUFDLEdBQUFqRyxLQUFBLE1BQ0FrRyxFQUFBckksRUFBQTVELFFBQUEsc0JBSUErTCxHQUFBQyxHQUFBRSxTQUVBRCxFQUFBakMsT0FDQXBHLEVBQUFwQyxLQUFBLFdBQUEsWUFDQW9DLEVBQUFrQixXQUFBLFlBRUFnSCxJQUFBcEMsRUFBQWxJLEtBQUEsd0JBQ0FvQyxFQUFBRCxJQUFBc0ksRUFBQXpLLEtBQUEsK0JBU0FvQyxFQUFBcEMsS0FBQSxRQUFBLElBRUFvQyxFQUFBa0IsV0FBQSxZQUVBbUgsRUFBQWhDLFlBaUJBcEssS0FBQXNNLHdCQUFBLFNBQUFDLEdBRUFBLEVBQUFBLEdBQUExTSxFQUFBLDRCQUVBME0sRUFBQS9MLEtBQUEsMkJBQUFQLEdBQUEsUUFBQSxXQUVBSixFQUFBRyxNQUFBK0wsS0FBQSxxQkFBQXpMLFlBQUEsWUFJQWlNLEVBQUEvTCxLQUFBLHdCQUFBUCxHQUFBLFFBQUEsV0FFQSxHQUFBMEYsR0FBQTlGLEVBQUFHLE1BQ0FFLEVBQUF5RixFQUFBeEYsUUFBQSxxQkFDQXFNLEVBQUF0TSxFQUFBeUIsS0FBQSxlQUNBeUosRUFBQXpGLEVBQUFoRSxLQUFBLFlBR0EsU0FBQTZLLEVBQUF4RSxRQUFBLEtBQUEsQ0FFQSxHQUFBckUsR0FBQTlDLE9BQUE0TCxRQUFBdEcsUUFBQXFHLEVBQ0E3SSxHQUNBQSxFQUFBK0ksY0FBQXRCLEdBR0FOLE1BQUF4SixLQUFBNkIsS0FBQUMsVUFBQSxxREFBQSxLQUFBZ0ksT0FPQXZMLEdBQUEyTSxHQUFBMUksSUFBQWpFLEVBQUEyTSxHQUFBMUksTUFBQXNILEVBSUFsTCxHQUFBUyxZQUFBLGFBYUFYLEtBQUFnSCxVQUFBLFdBQ0FuSCxFQUFBLGtDQUFBSSxHQUFBLFFBQUEsV0FFQSxHQUFBNEUsR0FBQWhGLEVBQUFHLE1BQ0EyTSxFQUFBOUgsRUFBQTFFLFFBQUEsc0JBQ0F5TSxFQUFBL0gsRUFBQWxELEtBQUEsV0FFQWtELEdBQUF4RSxXQUFBTSxZQUFBLGVBRUFnTSxFQUFBbk0sS0FBQSxnQkFBQUcsWUFBQSxlQUVBa0UsRUFBQXBDLFNBQUEsZUFDQTVDLEVBQUEsSUFBQStNLEdBQUFuSyxTQUFBLGtCQVlBekMsS0FBQStHLFlBQUEsU0FBQXBCLEdBRUEsR0FBQWtILEdBQUEsYUFBQWxILEVBQUFoRSxLQUFBLFdBTUEsSUFKQWdFLEVBQUFtSCxrQkFDQXZJLE1BQUFzSSxFQUFBLE9BQUEsU0FHQUEsSUFBQWxILEVBQUFoRSxLQUFBLHVCQUFBLENBS0EsR0FBQW9MLEdBQUF6TCxLQUFBNkIsS0FBQUMsVUFBQSxRQUNBeUIsRUFBQWhGLEVBQUEsNEZBQUFrTixFQUFBLDhEQUNBcEgsR0FBQW9HLEtBQUEsWUFBQUQsTUFBQWpILEdBRUFjLEVBQUExRixHQUFBLFNBQUEsV0FDQSxHQUFBNEssR0FBQWhMLEVBQUFHLE1BQUE4RCxLQUNBK0csR0FDQWhHLEVBQUFsRCxLQUFBLE9BQUEsT0FBQWtKLEdBQUFWLE9BRUF0RixFQUFBdUYsU0FFQTdKLFFBQUEsWUFXQVAsS0FBQWdOLFlBQUEsV0FFQW5OLEVBQUEsZ0RBQUFJLEdBQUEsUUFBQSxXQUVBLEdBQUE0RSxHQUFBaEYsRUFBQUcsTUFDQWlLLEVBQUFwRixFQUFBMUUsUUFBQSxjQUdBLElBQUEwRSxFQUFBbEQsS0FBQSxhQUFBLENBQ0EsR0FBQWlELEdBQUFDLEVBQUFELE1BQ0FDLEdBQUFELEtBQUFDLEVBQUFsRCxLQUFBLGNBQ0FrRCxFQUFBbEQsS0FBQSxZQUFBaUQsR0FJQXFGLEVBQUF6SixLQUFBLGVBQUFFLEtBQUEsV0FFQWIsRUFBQUcsTUFBQWdFLFNBQUEsVUFDQW5FLEVBQUFHLE1BQUF5QyxTQUFBLFVBQUE5QixZQUFBLFVBRUFkLEVBQUFHLE1BQUF5QyxTQUFBLFVBQUE5QixZQUFBLGVBVUFYLEtBQUFtQixPQUtBTixRQUFBQyxLQUFBRyxVQUFBLEdBQUFGLElBRUFrTSIsImZpbGUiOiJsbG1zLW1ldGFib3hlcy5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICpcbiAqIENvbnRyaWJ1dG9yJ3MgTm90aWNlXG4gKiBcbiAqIFRoaXMgaXMgYSBjb21waWxlZCBmaWxlIGFuZCBzaG91bGQgbm90IGJlIGVkaXRlZCBkaXJlY3RseSFcbiAqIFRoZSB1bmNvbXBpbGVkIHNjcmlwdCBpcyBsb2NhdGVkIGluIHRoZSBcImFzc2V0cy9wcml2YXRlXCIgZGlyZWN0b3J5XG4gKiBcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4vKipcbiAqIExpZnRlckxNUyBBZG1pbiBQYW5lbCBNZXRhYm94IEZ1bmN0aW9uc1xuICpcbiAqIEBzaW5jZSAzLjAuMFxuICogQHNpbmNlIDMuMzAuMCBNYWRlIGF1dG9lbnJvbGwgdGFibGUgc29ydGFibGUsIGFkZGVkIEFKQVggc2F2ZSBmb3IgYWRkaW5nIG5ldyBjb3Vyc2VzLlxuICogQHZlcnNpb24gMy4zMC4wXG4gKi9cbiggZnVuY3Rpb24oICQgKSB7XG5cblx0LyoqXG5cdCAqIGpRdWVyeSBwbHVnaW4gdG8gYWxsb3cgXCJjb2xsYXBzaWJsZVwiIHNlY3Rpb25zXG5cdCAqXG5cdCAqIEByZXR1cm4gIGpRdWVyeSBvYmplY3Rcblx0ICogQHNpbmNlICAgMy4wLjBcblx0ICogQHZlcnNpb24gMy4yOS4wXG5cdCAqL1xuXHQkLmZuLmxsbXNDb2xsYXBzaWJsZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0dmFyICRncm91cCA9IHRoaXM7XG5cblx0XHR0aGlzLm9uKCAnY2xpY2snLCAnLmxsbXMtY29sbGFwc2libGUtaGVhZGVyJywgZnVuY3Rpb24oKSB7XG5cblx0XHRcdHZhciAkcGFyZW50ICAgPSAkKCB0aGlzICkuY2xvc2VzdCggJy5sbG1zLWNvbGxhcHNpYmxlJyApLFxuXHRcdFx0XHQkc2libGluZ3MgPSAkcGFyZW50LnNpYmxpbmdzKCAnLmxsbXMtY29sbGFwc2libGUnICk7XG5cblx0XHRcdCRwYXJlbnQudG9nZ2xlQ2xhc3MoICdvcGVuZWQnICkudHJpZ2dlciggJ2xsbXMtY29sbGFwc2libGUtdG9nZ2xlZCcgKTtcblxuXHRcdFx0JHBhcmVudC5maW5kKCAnLmxsbXMtY29sbGFwc2libGUtYm9keScgKS5zbGlkZVRvZ2dsZSggNDAwICk7XG5cblx0XHRcdCRzaWJsaW5ncy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0JCggdGhpcyApLnJlbW92ZUNsYXNzKCAnb3BlbmVkJyApO1xuXHRcdFx0XHQkKCB0aGlzICkuZmluZCggJy5sbG1zLWNvbGxhcHNpYmxlLWJvZHknICkuc2xpZGVVcCggNDAwICk7XG5cdFx0XHR9ICk7XG5cblx0XHR9ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9O1xuXG5cdHdpbmRvdy5sbG1zID0gd2luZG93LmxsbXMgfHwge307XG5cblx0dmFyIE1ldGFib3hlcyA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0LyoqXG5cdFx0ICogbG9hZCBhbGwgcGFydGlhbHNcblx0XHQgKi9cblx0XHQvKipcblx0XHQgKiBMaWZ0ZXJMTVMgQWRtaW4gTWV0YWJveCBSZXBlYXRlciBGaWVsZFxuXHRcdCAqXG5cdFx0ICogQHBhY2thZ2UgTGlmdGVyTE1TL1NjcmlwdHMvUGFydGlhbHNcblx0XHQgKlxuXHRcdCAqIEBzaW5jZSAgICAzLjExLjBcblx0XHQgKiBAdmVyc2lvbiAgMy4yMy4wXG5cdFx0ICovXG5cdFx0XG5cdFx0dGhpcy5yZXBlYXRlcnMgPSB7XG5cdFx0XG5cdFx0XHQvKipcblx0XHRcdCAqIFJlZmVyZW5jZSB0byB0aGUgcGFyZW50IG1ldGFib3ggY2xhc3Ncblx0XHRcdCAqXG5cdFx0XHQgKiBAdHlwZSAgb2JqXG5cdFx0XHQgKi9cblx0XHRcdG1ldGFib3hlczogdGhpcyxcblx0XHRcblx0XHRcdC8qKlxuXHRcdFx0ICogQSBqUXVlcnkgc2VsZWN0b3IgZm9yIGFsbCByZXBlYXRlciBlbGVtZW50cyBvbiB0aGUgY3VycmVudCBzY3JlZW5cblx0XHRcdCAqXG5cdFx0XHQgKiBAdHlwZSAge1t0eXBlXX1cblx0XHRcdCAqL1xuXHRcdFx0JHJlcGVhdGVyczogbnVsbCxcblx0XHRcblx0XHRcdC8qKlxuXHRcdFx0ICogSW5pdFxuXHRcdFx0ICpcblx0XHRcdCAqIEBzaW5jZSAgICAzLjExLjBcblx0XHRcdCAqIEB2ZXJzaW9uICAzLjIzLjBcblx0XHRcdCAqXG5cdFx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdFx0ICovXG5cdFx0XHRpbml0OiBmdW5jdGlvbigpIHtcblx0XHRcblx0XHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xuXHRcdFxuXHRcdFx0XHRzZWxmLiRyZXBlYXRlcnMgPSAkKCAnLmxsbXMtbWItbGlzdC5yZXBlYXRlcicgKTtcblx0XHRcblx0XHRcdFx0aWYgKCBzZWxmLiRyZXBlYXRlcnMubGVuZ3RoICkge1xuXHRcdFxuXHRcdFx0XHRcdC8vIHdhaXQgZm9yIHRpbnlNQ0UganVzdCBpbiBjYXNlIHRoZWlyIGVkaXRvcnMgaW4gdGhlIHJlcGVhdGVyc1xuXHRcdFx0XHRcdExMTVMud2FpdF9mb3IoXG5cdFx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuICggJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiB0aW55TUNFICk7XG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHNlbGYubG9hZCgpO1xuXHRcdFx0XHRcdFx0XHRzZWxmLmJpbmQoKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHQpO1xuXHRcdFxuXHRcdFx0XHRcdC8vIG9uIGNsaWNrIG9mIGFueSBwb3N0IHN1Ym1pdCBidXR0b25zIGFkZCBzb21lIGRhdGEgdG8gdGhlIHN1Ym1pdCBidXR0b25cblx0XHRcdFx0XHQvLyBzbyB3ZSBjYW4gc2VlIHdoaWNoIGJ1dHRvbiB0byB0cmlnZ2VyIGFmdGVyIHJlcGVhdGVycyBhcmUgZmluaXNoZWRcblx0XHRcdFx0XHQkKCAnI3Bvc3QgaW5wdXRbdHlwZT1cInN1Ym1pdFwiXSwgI3Bvc3QtcHJldmlldycgKS5vbiggJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHQkKCB0aGlzICkuYXR0ciggJ2RhdGEtbGxtcy1jbGlja2VkJywgJ3llcycgKTtcblx0XHRcdFx0XHR9ICk7XG5cdFx0XG5cdFx0XHRcdFx0Ly8gaGFuZGxlIHBvc3Qgc3VibWlzc2lvblxuXHRcdFx0XHRcdCQoICcjcG9zdCcgKS5vbiggJ3N1Ym1pdCcsIHNlbGYuaGFuZGxlX3N1Ym1pdCApO1xuXHRcdFxuXHRcdFx0XHR9XG5cdFx0XG5cdFx0XHR9LFxuXHRcdFxuXHRcdFx0LyoqXG5cdFx0XHQgKiBCaW5kIERPTSBFdmVudHNcblx0XHRcdCAqXG5cdFx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdFx0ICogQHNpbmNlICAgIDMuMTEuMFxuXHRcdFx0ICogQHZlcnNpb24gIDMuMTMuMFxuXHRcdFx0ICovXG5cdFx0XHRiaW5kOiBmdW5jdGlvbigpIHtcblx0XHRcblx0XHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xuXHRcdFxuXHRcdFx0XHRzZWxmLiRyZXBlYXRlcnMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XG5cdFx0XHRcdFx0dmFyICRyZXBlYXRlciA9ICQoIHRoaXMgKSxcblx0XHRcdFx0XHRcdCRyb3dzICAgICA9ICRyZXBlYXRlci5maW5kKCAnLmxsbXMtcmVwZWF0ZXItcm93cycgKSxcblx0XHRcdFx0XHRcdCRtb2RlbCAgICA9ICRyZXBlYXRlci5maW5kKCAnLmxsbXMtcmVwZWF0ZXItbW9kZWwnICk7XG5cdFx0XG5cdFx0XHRcdFx0dGlueU1DRS5FZGl0b3JNYW5hZ2VyLmV4ZWNDb21tYW5kKCAnbWNlUmVtb3ZlRWRpdG9yJywgdHJ1ZSwgJG1vZGVsLmZpbmQoICcubGxtcy1tYi1saXN0LmVkaXRvciB0ZXh0YXJlYScgKS5hdHRyKCAnaWQnICkgKTtcblx0XHRcblx0XHRcdFx0XHQvLyBmb3IgdGhlIHJlcGVhdGVyICsgYnV0dG9uXG5cdFx0XHRcdFx0JHJlcGVhdGVyLmZpbmQoICcubGxtcy1yZXBlYXRlci1uZXctYnRuJyApLm9uKCAnY2xpY2snLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHNlbGYuYWRkX3JvdyggJHJlcGVhdGVyLCBudWxsLCB0cnVlICk7XG5cdFx0XHRcdFx0fSApO1xuXHRcdFxuXHRcdFx0XHRcdC8vIG1ha2UgcmVwZWF0ZXIgcm93cyBzb3J0YWJsZVxuXHRcdFx0XHRcdCRyb3dzLnNvcnRhYmxlKCB7XG5cdFx0XHRcdFx0XHRoYW5kbGU6ICcubGxtcy1kcmFnLWhhbmRsZScsXG5cdFx0XHRcdFx0XHRpdGVtczogJy5sbG1zLXJlcGVhdGVyLXJvdycsXG5cdFx0XHRcdFx0XHRzdGFydDogZnVuY3Rpb24oIGV2ZW50LCB1aSApIHtcblx0XHRcdFx0XHRcdFx0JHJvd3MuYWRkQ2xhc3MoICdkcmFnZ2luZycgKTtcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRzdG9wOiBmdW5jdGlvbiggZXZlbnQsIHVpICkge1xuXHRcdFx0XHRcdFx0XHQkcm93cy5yZW1vdmVDbGFzcyggJ2RyYWdnaW5nJyApO1xuXHRcdFxuXHRcdFx0XHRcdFx0XHR2YXIgJGVkcyA9IHVpLml0ZW0uZmluZCggJ3RleHRhcmVhLndwLWVkaXRvci1hcmVhJyApO1xuXHRcdFx0XHRcdFx0XHQkZWRzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciBlZF9pZCA9ICQoIHRoaXMgKS5hdHRyKCAnaWQnICk7XG5cdFx0XHRcdFx0XHRcdFx0dGlueU1DRS5FZGl0b3JNYW5hZ2VyLmV4ZWNDb21tYW5kKCAnbWNlUmVtb3ZlRWRpdG9yJywgdHJ1ZSwgZWRfaWQgKTtcblx0XHRcdFx0XHRcdFx0XHR0aW55TUNFLkVkaXRvck1hbmFnZXIuZXhlY0NvbW1hbmQoICdtY2VBZGRFZGl0b3InLCB0cnVlLCBlZF9pZCApO1xuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XG5cdFx0XHRcdFx0XHRcdHNlbGYuc2F2ZSggJHJlcGVhdGVyICk7XG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdH0gKTtcblx0XHRcblx0XHRcdFx0XHQkcmVwZWF0ZXIub24oICdjbGljaycsICcubGxtcy1yZXBlYXRlci1yZW1vdmUnLCBmdW5jdGlvbiggZSApIHtcblx0XHRcdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHR2YXIgJHJvdyA9ICQoIHRoaXMgKS5jbG9zZXN0KCAnLmxsbXMtcmVwZWF0ZXItcm93JyApO1xuXHRcdFx0XHRcdFx0aWYgKCB3aW5kb3cuY29uZmlybSggTExNUy5sMTBuLnRyYW5zbGF0ZSggJ0FyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgdGhpcyByb3c/IFRoaXMgY2Fubm90IGJlIHVuZG9uZS4nICkgKSApIHtcblx0XHRcdFx0XHRcdFx0JHJvdy5yZW1vdmUoKTtcblx0XHRcdFx0XHRcdFx0c2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0c2VsZi5zYXZlKCAkcmVwZWF0ZXIgKTtcblx0XHRcdFx0XHRcdFx0fSwgMSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gKTtcblx0XHRcblx0XHRcdFx0fSApO1xuXHRcdFxuXHRcdFx0fSxcblx0XHRcblx0XHRcdC8qKlxuXHRcdFx0ICogQWRkIGEgbmV3IHJvdyB0byBhIHJlcGVhdGVyIHJvd3MgZ3JvdXBcblx0XHRcdCAqXG5cdFx0XHQgKiBAcGFyYW0gICAgb2JqICAgICRyZXBlYXRlciAgalF1ZXJ5IHNlbGVjdG9yIGZvciB0aGUgcmVwZWF0ZXIgdG8gYWRkIGEgcm93IHRvXG5cdFx0XHQgKiBAcGFyYW0gICAgb2JqICAgIGRhdGEgICAgICAgb3B0aW9uYWwgb2JqZWN0IG9mIGRhdGEgdG8gZmlsbCBmaWVsZHMgaW4gdGhlIHJvdyB3aXRoXG5cdFx0XHQgKiBAcGFyYW0gICAgYm9vbCAgIGV4cGFuZCAgICAgaWYgdHJ1ZSwgd2lsbCBhdXRvbWF0aWNhbGx5IG9wZW4gdGhlIHJvdyBhZnRlciBhZGRpbmcgaXQgdG8gdGhlIGRvbVxuXHRcdFx0ICogQHJldHVybiBcdCB2b2lkXG5cdFx0XHQgKiBAc2luY2UgICAgMy4xMS4wXG5cdFx0XHQgKiBAdmVyc2lvbiAgMy4xMS4wXG5cdFx0XHQgKi9cblx0XHRcdGFkZF9yb3c6IGZ1bmN0aW9uKCAkcmVwZWF0ZXIsIGRhdGEsIGV4cGFuZCApIHtcblx0XHRcblx0XHRcdFx0dmFyIHNlbGYgICAgICA9IHRoaXMsXG5cdFx0XHRcdFx0JHJvd3MgICAgID0gJHJlcGVhdGVyLmZpbmQoICcubGxtcy1yZXBlYXRlci1yb3dzJyApLFxuXHRcdFx0XHRcdCRtb2RlbCAgICA9ICRyZXBlYXRlci5maW5kKCAnLmxsbXMtcmVwZWF0ZXItbW9kZWwnICksXG5cdFx0XHRcdFx0JHJvdyAgICAgID0gJG1vZGVsLmZpbmQoICcubGxtcy1yZXBlYXRlci1yb3cnICkuY2xvbmUoKSxcblx0XHRcdFx0XHRuZXdfaW5kZXggPSAkcmVwZWF0ZXIuZmluZCggJy5sbG1zLXJlcGVhdGVyLXJvdycgKS5sZW5ndGgsXG5cdFx0XHRcdFx0ZWRpdG9yICAgID0gc2VsZi5yZWluZGV4KCAkcm93LCBuZXdfaW5kZXggKTtcblx0XHRcblx0XHRcdFx0aWYgKCBkYXRhICkge1xuXHRcdFx0XHRcdCQuZWFjaCggZGF0YSwgZnVuY3Rpb24oIGtleSwgdmFsICkge1xuXHRcdFxuXHRcdFx0XHRcdFx0dmFyICRmaWVsZCA9ICRyb3cuZmluZCggJ1tuYW1lXj1cIicgKyBrZXkgKyAnXCJdJyApO1xuXHRcdFxuXHRcdFx0XHRcdFx0aWYgKCAkZmllbGQuaGFzQ2xhc3MoICdsbG1zLXNlbGVjdDItc3R1ZGVudCcgKSApIHtcblx0XHRcdFx0XHRcdFx0JC5lYWNoKCB2YWwsIGZ1bmN0aW9uKCBpLCBkYXRhICkge1xuXHRcdFx0XHRcdFx0XHRcdCRmaWVsZC5hcHBlbmQoICc8b3B0aW9uIHZhbHVlPVwiJyArIGRhdGEua2V5ICsgJ1wiIHNlbGVjdGVkPVwic2VsZWN0ZWRcIj4nICsgZGF0YS50aXRsZSArICc8L29wdGlvbj4nIClcblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0XHQkZmllbGQudHJpZ2dlciggJ2NoYW5nZScgKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdCRmaWVsZC52YWwoIHZhbCApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFxuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0fVxuXHRcdFxuXHRcdFx0XHRzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRzZWxmLmJpbmRfcm93KCAkcm93ICk7XG5cdFx0XHRcdH0sIDEgKTtcblx0XHRcblx0XHRcdFx0JHJvd3MuYXBwZW5kKCAkcm93ICk7XG5cdFx0XHRcdGlmICggZXhwYW5kICkge1xuXHRcdFx0XHRcdCRyb3cuZmluZCggJy5sbG1zLWNvbGxhcHNpYmxlLWhlYWRlcicgKS50cmlnZ2VyKCAnY2xpY2snICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGlueU1DRS5FZGl0b3JNYW5hZ2VyLmV4ZWNDb21tYW5kKCAnbWNlQWRkRWRpdG9yJywgdHJ1ZSwgZWRpdG9yICk7XG5cdFx0XG5cdFx0XHRcdCRyZXBlYXRlci50cmlnZ2VyKCAnbGxtcy1uZXctcmVwZWF0ZXItcm93Jywge1xuXHRcdFx0XHRcdCRyb3c6ICRyb3csXG5cdFx0XHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdFx0fSApO1xuXHRcdFxuXHRcdFx0fSxcblx0XHRcblx0XHRcdC8qKlxuXHRcdFx0ICogQmluZCBET00gZXZlbnRzIGZvciBhIHNpbmdsZSByZXBlYXRlciByb3dcblx0XHRcdCAqXG5cdFx0XHQgKiBAcGFyYW0gICAgb2JqICAgJHJvdyAgalF1ZXJ5IHNlbGVjdG9yIGZvciB0aGUgcm93XG5cdFx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdFx0ICogQHNpbmNlICAgIDMuMTEuMFxuXHRcdFx0ICogQHZlcnNpb24gIDMuMTMuMFxuXHRcdFx0ICovXG5cdFx0XHRiaW5kX3JvdzogZnVuY3Rpb24oICRyb3cgKSB7XG5cdFx0XG5cdFx0XHRcdHRoaXMuYmluZF9yb3dfaGVhZGVyKCAkcm93ICk7XG5cdFx0XG5cdFx0XHRcdCRyb3cuZmluZCggJy5sbG1zLXNlbGVjdDInICkubGxtc1NlbGVjdDIoIHtcblx0XHRcdFx0XHR3aWR0aDogJzEwMCUnLFxuXHRcdFx0XHR9ICk7XG5cdFx0XG5cdFx0XHRcdCRyb3cuZmluZCggJy5sbG1zLXNlbGVjdDItc3R1ZGVudCcgKS5sbG1zU3R1ZGVudHNTZWxlY3QyKCk7XG5cdFx0XG5cdFx0XHRcdHRoaXMubWV0YWJveGVzLmJpbmRfZGF0ZXBpY2tlcnMoICRyb3cuZmluZCggJy5sbG1zLWRhdGVwaWNrZXInICkgKTtcblx0XHRcdFx0dGhpcy5tZXRhYm94ZXMuYmluZF9jb250cm9sbGVycyggJHJvdy5maW5kKCAnW2RhdGEtaXMtY29udHJvbGxlcl0nICkgKTtcblx0XHRcdFx0Ly8gdGhpcy5tZXRhYm94ZXMuYmluZF9tZXJnZV9jb2RlX2J1dHRvbnMoICRyb3cuZmluZCggJy5sbG1zLW1lcmdlLWNvZGUtd3JhcHBlcicgKSApO1xuXHRcdFx0fSxcblx0XHRcblx0XHRcdC8qKlxuXHRcdFx0ICogQmluZCByb3cgaGVhZGVyIGV2ZW50c1xuXHRcdFx0ICpcblx0XHRcdCAqIEBwYXJhbSAgICBvYmogICAkcm93ICBqUXVlcnkgc2VsZWN0b3IgZm9yIHRoZSByb3dcblx0XHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0XHQgKiBAc2luY2UgICAgMy4xMS4wXG5cdFx0XHQgKiBAdmVyc2lvbiAgMy4xMS4wXG5cdFx0XHQgKi9cblx0XHRcdGJpbmRfcm93X2hlYWRlcjogZnVuY3Rpb24oICRyb3cgKSB7XG5cdFx0XG5cdFx0XHRcdC8vIGhhbmRsZSB0aGUgdGl0bGUgZmllbGQgYmluZGluZ1xuXHRcdFx0XHR2YXIgJHRpdGxlID0gJHJvdy5maW5kKCAnLmxsbXMtcmVwZWF0ZXItdGl0bGUnICksXG5cdFx0XHRcdFx0JGZpZWxkID0gJHJvdy5maW5kKCAnLmxsbXMtY29sbGFwc2libGUtaGVhZGVyLXRpdGxlLWZpZWxkJyApO1xuXHRcdFxuXHRcdFx0XHQkdGl0bGUuYXR0ciggJ2RhdGEtZGVmYXVsdCcsICR0aXRsZS50ZXh0KCkgKTtcblx0XHRcblx0XHRcdFx0JGZpZWxkLm9uKCAna2V5dXAgZm9jdXNvdXQgYmx1cicsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHZhciB2YWwgPSAkKCB0aGlzICkudmFsKCk7XG5cdFx0XHRcdFx0aWYgKCAhIHZhbCApIHtcblx0XHRcdFx0XHRcdHZhbCA9ICR0aXRsZS5hdHRyKCAnZGF0YS1kZWZhdWx0JyApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQkdGl0bGUudGV4dCggdmFsICk7XG5cdFx0XHRcdH0gKS50cmlnZ2VyKCAna2V5dXAnICk7XG5cdFx0XG5cdFx0XHR9LFxuXHRcdFxuXHRcdFx0LyoqXG5cdFx0XHQgKiBIYW5kbGUgV1AgUG9zdCBmb3JtIHN1Ym1pc3Npb24gdG8gZW5zdXJlIHJlcGVhdGVycyBhcmUgc2F2ZWQgYmVmb3JlIHN1Ym1pdHRpbmcgdGhlIGZvcm0gdG8gc2F2ZS9wdWJsaXNoIHRoZSBwb3N0XG5cdFx0XHQgKlxuXHRcdFx0ICogQHBhcmFtICAgIG9iaiAgIGUgIEpTIGV2ZW50IG9iamVjdFxuXHRcdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHRcdCAqIEBzaW5jZSAgICAzLjExLjBcblx0XHRcdCAqIEB2ZXJzaW9uICAzLjIzLjBcblx0XHRcdCAqL1xuXHRcdFx0aGFuZGxlX3N1Ym1pdDogZnVuY3Rpb24oIGUgKSB7XG5cdFx0XG5cdFx0XHRcdC8vIGdldCB0aGUgYnV0dG9uIHVzZWQgdG8gc3VibWl0IHRoZSBmb3JtXG5cdFx0XHRcdHZhciAkYnRuICAgICA9ICQoICcjcG9zdCBbZGF0YS1sbG1zLWNsaWNrZWQ9XCJ5ZXNcIl0nICksXG5cdFx0XHRcdFx0JHNwaW5uZXIgPSAkYnRuLnBhcmVudCgpLmZpbmQoICcuc3Bpbm5lcicgKTtcblx0XHRcblx0XHRcdFx0aWYgKCAkYnRuLmlzKCAnI3Bvc3QtcHJldmlldycgKSApIHtcblx0XHRcdFx0XHQkYnRuLnJlbW92ZUF0dHIoICdkYXRhLWxsbXMtY2xpY2tlZCcgKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcblx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFxuXHRcdFx0XHQvLyBjb3JlIFVYIHRvIHByZXZlbnQgbXVsdGktY2xpY2svb3IgdGhlIGFwcGVhcmFuY2Ugb2YgYSBkZWxheVxuXHRcdFx0XHQkKCAnI3Bvc3QgaW5wdXRbdHlwZT1cInN1Ym1pdFwiXScgKS5hZGRDbGFzcyggJ2Rpc2FibGVkJyApLmF0dHIoICdkaXNhYmxlZCcsICdkaXNhYmxlZCcgKTtcblx0XHRcdFx0JHNwaW5uZXIuYWRkQ2xhc3MoICdpcy1hY3RpdmUnICk7XG5cdFx0XG5cdFx0XHRcdHZhciBzZWxmID0gd2luZG93LmxsbXMubWV0YWJveGVzLnJlcGVhdGVycyxcblx0XHRcdFx0XHRpICAgID0gMCxcblx0XHRcdFx0XHR3YWl0O1xuXHRcdFxuXHRcdFx0XHRzZWxmLiRyZXBlYXRlcnMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0c2VsZi5zYXZlKCAkKCB0aGlzICkgKTtcblx0XHRcdFx0fSApO1xuXHRcdFxuXHRcdFx0XHR3YWl0ID0gc2V0SW50ZXJ2YWwoIGZ1bmN0aW9uKCkge1xuXHRcdFxuXHRcdFx0XHRcdGlmICggaSA+PSA1OSB8fCAhICQoICcubGxtcy1tYi1saXN0LnJlcGVhdGVyLnByb2Nlc3NpbmcnICkubGVuZ3RoICkge1xuXHRcdFxuXHRcdFx0XHRcdFx0Y2xlYXJJbnRlcnZhbCggd2FpdCApO1xuXHRcdFx0XHRcdFx0JCggJyNwb3N0JyApLm9mZiggJ3N1Ym1pdCcsIHRoaXMuaGFuZGxlX3N1Ym1pdCApO1xuXHRcdFx0XHRcdFx0JHNwaW5uZXIucmVtb3ZlQ2xhc3MoICdpcy1hY3RpdmUnICk7XG5cdFx0XHRcdFx0XHQkYnRuLnJlbW92ZUNsYXNzKCAnZGlzYWJsZWQnICkucmVtb3ZlQXR0ciggJ2Rpc2FibGVkJyApLnRyaWdnZXIoICdjbGljaycgKTtcblx0XHRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFxuXHRcdFx0XHRcdFx0aSsrO1xuXHRcdFxuXHRcdFx0XHRcdH1cblx0XHRcblx0XHRcdFx0fSwgMTAwMCApO1xuXHRcdFxuXHRcdFx0fSxcblx0XHRcblx0XHRcdC8qKlxuXHRcdFx0ICogTG9hZCByZXBlYXRlciBkYXRhIGZyb20gdGhlIHNlcnZlciBhbmQgY3JlYXRlIHJvd3MgaW4gdGhlIERPTVxuXHRcdFx0ICpcblx0XHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0XHQgKiBAc2luY2UgICAgMy4xMS4wXG5cdFx0XHQgKiBAdmVyc2lvbiAgMy4xMi4xXG5cdFx0XHQgKi9cblx0XHRcdGxvYWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFxuXHRcdFx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFx0XG5cdFx0XHRcdHNlbGYuJHJlcGVhdGVycy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcblx0XHRcdFx0XHR2YXIgJHJlcGVhdGVyID0gJCggdGhpcyApO1xuXHRcdFxuXHRcdFx0XHRcdC8vIGVuc3VyZSB0aGUgcmVwZWF0ZXIgaXMgb25seSBsb2FkZWQgb25jZSB0byBwcmV2ZW50IGR1cGxpY2F0ZXMgcmVzdWx0aW5nIGZyb20gZHVwbGljYXRpbmcgYmluZGluZ1xuXHRcdFx0XHRcdC8vIG9uIGNlcnRhaW4gc2l0ZXMgd2hpY2ggSSBjYW5ub3QgcXVpdGUgZXhwbGFpbi4uLlxuXHRcdFx0XHRcdGlmICggJHJlcGVhdGVyLmhhc0NsYXNzKCAnaXMtbG9hZGVkJyApIHx8ICRyZXBlYXRlci5oYXNDbGFzcyggJ3Byb2Nlc3NpbmcnICkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXHRcdFxuXHRcdFx0XHRcdHNlbGYuc3RvcmUoICRyZXBlYXRlciwgJ2xvYWQnLCBmdW5jdGlvbiggZGF0YSApIHtcblx0XHRcblx0XHRcdFx0XHRcdCRyZXBlYXRlci5hZGRDbGFzcyggJ2lzLWxvYWRlZCcgKTtcblx0XHRcblx0XHRcdFx0XHRcdCQuZWFjaCggZGF0YS5kYXRhLCBmdW5jdGlvbiggaSwgb2JqICkge1xuXHRcdFx0XHRcdFx0XHRzZWxmLmFkZF9yb3coICRyZXBlYXRlciwgb2JqLCBmYWxzZSApO1xuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFxuXHRcdFx0XHRcdFx0Ly8gZm9yIGVhY2ggcm93IHdpdGhpbiB0aGUgcmVwZWF0ZXJcblx0XHRcdFx0XHRcdCRyZXBlYXRlci5maW5kKCAnLmxsbXMtcmVwZWF0ZXItcm93cyAubGxtcy1yZXBlYXRlci1yb3cnICkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHNlbGYuYmluZF9yb3coICQoIHRoaXMgKSApO1xuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFxuXHRcdFx0XHRcdH0gKTtcblx0XHRcblx0XHRcdFx0fSApO1xuXHRcdFxuXHRcdFx0fSxcblx0XHRcblx0XHRcdC8qKlxuXHRcdFx0ICogUmVpbmRleCBhIHJvd1xuXHRcdFx0ICogcmVuYW1lcyBpZHMsIGF0dHJzLCBhbmQgZXRjLi4uXG5cdFx0XHQgKiBVc2VkIHdoZW4gY2xvbmluZyB0aGUgbW9kZWwgZm9yIG5ldyByb3dzXG5cdFx0XHQgKlxuXHRcdFx0ICogQHBhcmFtICAgIG9iaiAgICAgICAgICAkcm93ICBqUXVlcnkgc2VsZWN0b3IgZm9yIHRoZSByb3dcblx0XHRcdCAqIEBwYXJhbSAgICBpbnR8c3RyaW5nICAgaW5kZXggIGluZGV4IChvciBpZCkgdG8gdXNlIHdoZW4gcmVuYW1pbmdcblx0XHRcdCAqIEByZXR1cm4gICBzdHJpbmdcblx0XHRcdCAqIEBzaW5jZSAgICAzLjExLjBcblx0XHRcdCAqIEB2ZXJzaW9uICAzLjExLjBcblx0XHRcdCAqL1xuXHRcdFx0cmVpbmRleDogZnVuY3Rpb24oICRyb3csIGluZGV4ICkge1xuXHRcdFxuXHRcdFx0XHR2YXIgb2xkX2luZGV4ID0gJHJvdy5hdHRyKCAnZGF0YS1yb3ctb3JkZXInICksXG5cdFx0XHRcdFx0JGVkICAgICAgID0gJHJvdy5maW5kKCAnLmxsbXMtbWItbGlzdC5lZGl0b3IgdGV4dGFyZWEnICk7XG5cdFx0XG5cdFx0XHRcdHRpbnlNQ0UuRWRpdG9yTWFuYWdlci5leGVjQ29tbWFuZCggJ21jZVJlbW92ZUVkaXRvcicsIHRydWUsICRlZC5hdHRyKCAnaWQnICkgKTtcblx0XHRcblx0XHRcdFx0ZnVuY3Rpb24gcmVwbGFjZV9hdHRyKCAkZWwsIGF0dHIgKSB7XG5cdFx0XHRcdFx0JGVsLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0dmFyIHN0ciA9ICQoIHRoaXMgKS5hdHRyKCBhdHRyICk7XG5cdFx0XHRcdFx0XHQkKCB0aGlzICkuYXR0ciggYXR0ciwgc3RyLnJlcGxhY2UoIG9sZF9pbmRleCwgaW5kZXggKSApO1xuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0fTtcblx0XHRcblx0XHRcdFx0JHJvdy5hdHRyKCAnZGF0YS1yb3ctb3JkZXInLCBpbmRleCApO1xuXHRcdFxuXHRcdFx0XHRyZXBsYWNlX2F0dHIoICRyb3csICdkYXRhLXJvdy1vcmRlcicgKTtcblx0XHRcblx0XHRcdFx0cmVwbGFjZV9hdHRyKCAkcm93LmZpbmQoICdidXR0b24uaW5zZXJ0LW1lZGlhJyApLCAnZGF0YS1lZGl0b3InICk7XG5cdFx0XG5cdFx0XHRcdHJlcGxhY2VfYXR0ciggJHJvdy5maW5kKCAnaW5wdXRbbmFtZV49XCJfbGxtc1wiXSwgdGV4dGFyZWFbbmFtZV49XCJfbGxtc1wiXSwgc2VsZWN0W25hbWVePVwiX2xsbXNcIl0nICksICdpZCcgKTtcblx0XHRcdFx0cmVwbGFjZV9hdHRyKCAkcm93LmZpbmQoICdpbnB1dFtuYW1lXj1cIl9sbG1zXCJdLCB0ZXh0YXJlYVtuYW1lXj1cIl9sbG1zXCJdLCBzZWxlY3RbbmFtZV49XCJfbGxtc1wiXScgKSwgJ25hbWUnICk7XG5cdFx0XHRcdHJlcGxhY2VfYXR0ciggJHJvdy5maW5kKCAnW2RhdGEtY29udHJvbGxlcl0nICksICdkYXRhLWNvbnRyb2xsZXInICk7XG5cdFx0XHRcdHJlcGxhY2VfYXR0ciggJHJvdy5maW5kKCAnW2RhdGEtY29udHJvbGxlcl0nICksICdkYXRhLWNvbnRyb2xsZXInICk7XG5cdFx0XHRcdHJlcGxhY2VfYXR0ciggJHJvdy5maW5kKCAnYnV0dG9uLndwLXN3aXRjaC1lZGl0b3InICksICdkYXRhLXdwLWVkaXRvci1pZCcgKTtcblx0XHRcdFx0cmVwbGFjZV9hdHRyKCAkcm93LmZpbmQoICdidXR0b24ud3Atc3dpdGNoLWVkaXRvcicgKSwgJ2lkJyApO1xuXHRcdFx0XHRyZXBsYWNlX2F0dHIoICRyb3cuZmluZCggJy53cC1lZGl0b3ItdG9vbHMnICksICdpZCcgKTtcblx0XHRcdFx0cmVwbGFjZV9hdHRyKCAkcm93LmZpbmQoICcud3AtZWRpdG9yLWNvbnRhaW5lcicgKSwgJ2lkJyApO1xuXHRcdFxuXHRcdFx0XHRyZXR1cm4gJGVkLmF0dHIoICdpZCcgKTtcblx0XHRcblx0XHRcdH0sXG5cdFx0XG5cdFx0XHQvKipcblx0XHRcdCAqIFNhdmUgYSBzaW5nbGUgcmVwZWF0ZXJzIGRhdGEgdG8gdGhlIHNlcnZlclxuXHRcdFx0ICpcblx0XHRcdCAqIEBwYXJhbSAgICBvYmogICAkcmVwZWF0ZXIgIGpRdWVyeSBzZWxlY3RvciBmb3IgYSByZXBlYXRlciBlbGVtZW50XG5cdFx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdFx0ICogQHNpbmNlICAgIDMuMTEuMFxuXHRcdFx0ICogQHZlcnNpb24gIDMuMTMuMFxuXHRcdFx0ICovXG5cdFx0XHRzYXZlOiBmdW5jdGlvbiggJHJlcGVhdGVyICkge1xuXHRcdFx0XHQkcmVwZWF0ZXIudHJpZ2dlciggJ2xsbXMtcmVwZWF0ZXItYmVmb3JlLXNhdmUnLCB7ICRlbDogJHJlcGVhdGVyIH0gKTtcblx0XHRcdFx0dGhpcy5zdG9yZSggJHJlcGVhdGVyLCAnc2F2ZScgKTtcblx0XHRcdH0sXG5cdFx0XG5cdFx0XHQvKipcblx0XHRcdCAqIENvbnZlcnQgYSByZXBlYXRlciBlbGVtZW50IGludG8gYW4gYXJyYXkgb2Ygb2JqZWN0cyB0aGF0IGNhbiBiZSBzYXZlZCB0byB0aGUgZGF0YWJhc2Vcblx0XHRcdCAqXG5cdFx0XHQgKiBAcGFyYW0gICAgb2JqICAgJHJlcGVhdGVyICBqUXVlcnkgc2VsZWN0b3IgZm9yIGEgcmVwZWF0ZXIgZWxlbWVudFxuXHRcdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHRcdCAqIEBzaW5jZSAgICAzLjExLjBcblx0XHRcdCAqIEB2ZXJzaW9uICAzLjExLjBcblx0XHRcdCAqL1xuXHRcdFx0c2VyaWFsaXplOiBmdW5jdGlvbiggJHJlcGVhdGVyICkge1xuXHRcdFxuXHRcdFx0XHR2YXIgcm93cyA9IFtdO1xuXHRcdFxuXHRcdFx0XHQkcmVwZWF0ZXIuZmluZCggJy5sbG1zLXJlcGVhdGVyLXJvd3MgLmxsbXMtcmVwZWF0ZXItcm93JyApLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFxuXHRcdFx0XHRcdHZhciBvYmogPSB7fTtcblx0XHRcblx0XHRcdFx0XHQvLyBlYXN5Li4uXG5cdFx0XHRcdFx0JCggdGhpcyApLmZpbmQoICdpbnB1dFtuYW1lXj1cIl9sbG1zXCJdLCBzZWxlY3RbbmFtZV49XCJfbGxtc1wiXScgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdG9ialsgJCggdGhpcyApLmF0dHIoICduYW1lJyApIF0gPSAkKCB0aGlzICkudmFsKCk7XG5cdFx0XHRcdFx0fSApO1xuXHRcdFxuXHRcdFx0XHRcdC8vIGNoZWNrIGlmIHRoZSB0ZXh0YXJlYSBpcyBhIHRpbnlNQ0UgaW5zdGFuY2Vcblx0XHRcdFx0XHQkKCB0aGlzICkuZmluZCggJ3RleHRhcmVhW25hbWVePVwiX2xsbXNcIl0nICkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XG5cdFx0XHRcdFx0XHR2YXIgbmFtZSA9ICQoIHRoaXMgKS5hdHRyKCAnbmFtZScgKTtcblx0XHRcblx0XHRcdFx0XHRcdC8vIGlmIGl0IGlzIGFuIGVkaXRvclxuXHRcdFx0XHRcdFx0aWYgKCB0aW55TUNFLmVkaXRvcnNbIG5hbWUgXSApIHtcblx0XHRcdFx0XHRcdFx0b2JqWyBuYW1lIF0gPSB0aW55TUNFLmVkaXRvcnNbIG5hbWUgXS5nZXRDb250ZW50KCk7XG5cdFx0XHRcdFx0XHRcdC8vIGdyYWIgdGhlIHZhbCBvZiB0aGUgdGV4dGFyZWFcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdG9ialsgbmFtZSBdID0gJCggdGhpcyApLnZhbCgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFxuXHRcdFx0XHRcdH0gKTtcblx0XHRcblx0XHRcdFx0XHRyb3dzLnB1c2goIG9iaiApO1xuXHRcdFxuXHRcdFx0XHR9ICk7XG5cdFx0XG5cdFx0XHRcdHJldHVybiByb3dzO1xuXHRcdFxuXHRcdFx0fSxcblx0XHRcblx0XHRcdC8qKlxuXHRcdFx0ICogQUpBWCBtZXRob2QgZm9yIGludGVyYWN0aW5nIHdpdGggdGhlIHJlcGVhdGVyJ3MgaGFuZGxlciBvbiB0aGUgc2VydmVyXG5cdFx0XHQgKlxuXHRcdFx0ICogQHBhcmFtICAgIG9iaiAgICAgICAkcmVwZWF0ZXIgIGpRdWVyeSBzZWxlY3RvciBmb3IgdGhlIHJlcGVhdGVyIGVsZW1lbnRcblx0XHRcdCAqIEBwYXJhbSAgICBzdHJpbmcgICAgYWN0aW9uICAgICBhY3Rpb24gdG8gY2FsbCBbc2F2ZXxsb2FkXVxuXHRcdFx0ICogQHBhcmFtICAgIGZ1bmN0aW9uICBjYiAgICAgICAgIGNhbGxiYWNrIGZ1bmN0aW9uXG5cdFx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdFx0ICogQHNpbmNlICAgIDMuMTEuMFxuXHRcdFx0ICogQHZlcnNpb24gIDMuMTEuMFxuXHRcdFx0ICovXG5cdFx0XHRzdG9yZTogZnVuY3Rpb24oICRyZXBlYXRlciwgYWN0aW9uLCBjYiApIHtcblx0XHRcblx0XHRcdFx0Y2IgICAgICAgPSBjYiB8fCBmdW5jdGlvbigpe307XG5cdFx0XHRcdHZhciBzZWxmID0gdGhpcyxcblx0XHRcdFx0XHRkYXRhID0ge1xuXHRcdFx0XHRcdFx0YWN0aW9uOiAkcmVwZWF0ZXIuZmluZCggJy5sbG1zLXJlcGVhdGVyLWZpZWxkLWhhbmRsZXInICkudmFsKCksXG5cdFx0XHRcdFx0XHRzdG9yZV9hY3Rpb246IGFjdGlvbixcblx0XHRcdFx0fTtcblx0XHRcblx0XHRcdFx0aWYgKCAnc2F2ZScgPT09IGFjdGlvbiApIHtcblx0XHRcdFx0XHRkYXRhLnJvd3MgPSBzZWxmLnNlcmlhbGl6ZSggJHJlcGVhdGVyICk7XG5cdFx0XHRcdH1cblx0XHRcblx0XHRcdFx0TExNUy5BamF4LmNhbGwoIHtcblx0XHRcdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0XHRcdGJlZm9yZVNlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdFxuXHRcdFx0XHRcdFx0JHJlcGVhdGVyLmFkZENsYXNzKCAncHJvY2Vzc2luZycgKTtcblx0XHRcdFx0XHRcdExMTVMuU3Bpbm5lci5zdGFydCggJHJlcGVhdGVyICk7XG5cdFx0XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRzdWNjZXNzOiBmdW5jdGlvbiggciApIHtcblx0XHRcblx0XHRcdFx0XHRcdGNiKCByICk7XG5cdFx0XHRcdFx0XHRMTE1TLlNwaW5uZXIuc3RvcCggJHJlcGVhdGVyICk7XG5cdFx0XHRcdFx0XHQkcmVwZWF0ZXIucmVtb3ZlQ2xhc3MoICdwcm9jZXNzaW5nJyApO1xuXHRcdFxuXHRcdFx0XHRcdH1cblx0XHRcblx0XHRcdFx0fSApO1xuXHRcdFxuXHRcdFx0fVxuXHRcdFxuXHRcdH07XG5cdFx0dGhpcy5yZXBlYXRlcnMuaW5pdCgpO1xuXHRcdFxuXG5cdFx0LyoqXG5cdFx0ICogSW5pdGlhbGl6ZVxuXHRcdCAqXG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4wLjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xMy4wXG5cdFx0ICovXG5cdFx0dGhpcy5pbml0ID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdHZhciBzZWxmID0gdGhpcztcblxuXHRcdFx0JCggJy5sbG1zLXNlbGVjdDItcG9zdCcgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5wb3N0X3NlbGVjdCggJCggdGhpcyApICk7XG5cdFx0XHR9ICk7XG5cblx0XHRcdCQoICcubGxtcy1jb2xsYXBzaWJsZS1ncm91cCcgKS5sbG1zQ29sbGFwc2libGUoKTtcblxuXHRcdFx0dGhpcy5iaW5kX3RhYnMoKTtcblxuXHRcdFx0Ly8gYmluZCBldmVyeXRoaW5nIGJldHRlciBhbmQgbGVzcyByZXBldGl0aXZlbHkuLi5cblx0XHRcdHZhciBiaW5kaW5ncyA9IFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHNlbGVjdG9yOiAkKCAnLmxsbXMtZGF0ZXBpY2tlcicgKSxcblx0XHRcdFx0XHRmdW5jOiAnYmluZF9kYXRlcGlja2VycycsXG5cdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0c2VsZWN0b3I6ICQoICcubGxtcy1zZWxlY3QyJyApLFxuXHRcdFx0XHRcdGZ1bmM6IGZ1bmN0aW9uKCAkc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHQkc2VsZWN0b3IubGxtc1NlbGVjdDIoIHtcblx0XHRcdFx0XHRcdFx0d2lkdGg6ICcxMDAlJyxcblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHR9LFxuXHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHNlbGVjdG9yOiAkKCAnLmxsbXMtc2VsZWN0Mi1zdHVkZW50JyApLFxuXHRcdFx0XHRcdGZ1bmM6IGZ1bmN0aW9uKCAkc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHQkc2VsZWN0b3IubGxtc1N0dWRlbnRzU2VsZWN0MigpO1xuXHRcdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRzZWxlY3RvcjogJCggJ2lucHV0W3R5cGU9XCJjaGVja2JveFwiXVtkYXRhLWNvbnRyb2xzXScgKSxcblx0XHRcdFx0XHRmdW5jOiAnYmluZF9jYl9jb250cm9sbGVycycsXG5cdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0c2VsZWN0b3I6ICQoICdbZGF0YS1pcy1jb250cm9sbGVyXScgKSxcblx0XHRcdFx0XHRmdW5jOiAnYmluZF9jb250cm9sbGVycycsXG5cdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0c2VsZWN0b3I6ICQoICcubGxtcy10YWJsZScgKSxcblx0XHRcdFx0XHRmdW5jOiAnYmluZF90YWJsZXMnLFxuXHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHNlbGVjdG9yOiAkKCAnLmxsbXMtbWVyZ2UtY29kZS13cmFwcGVyJyApLFxuXHRcdFx0XHRcdGZ1bmM6ICdiaW5kX21lcmdlX2NvZGVfYnV0dG9ucycsXG5cdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0c2VsZWN0b3I6ICQoICdhLmxsbXMtZWRpdGFibGUnICksXG5cdFx0XHRcdFx0ZnVuYzogJ2JpbmRfZWRpdGFibGVzJyxcblx0XHRcdH0sXG5cdFx0XHRdO1xuXG5cdFx0XHQvLyBiaW5kIGFsbCB0aGUgYmluZGFibGVzIGJ1dCBkb24ndCBiaW5kIHRoaW5ncyBpbiByZXBlYXRlcnNcblx0XHRcdCQuZWFjaCggYmluZGluZ3MsIGZ1bmN0aW9uKCBpbmRleCwgb2JqICkge1xuXG5cdFx0XHRcdGlmICggb2JqLnNlbGVjdG9yLmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIHJlZHVjZSB0aGUgc2VsZWN0b3IgdG8gZXhjbHVkZSBpdGVtcyBpbiBhIHJlcGVhdGVyXG5cdFx0XHRcdFx0dmFyIHJlZHVjZWQgPSBvYmouc2VsZWN0b3IuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiAoIDAgPT09ICQoIHRoaXMgKS5jbG9zZXN0KCAnLmxsbXMtcmVwZWF0ZXItbW9kZWwnICkubGVuZ3RoICk7XG5cdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdFx0Ly8gYmluZCBieSBzdHJpbmdcblx0XHRcdFx0XHRpZiAoICdzdHJpbmcnID09PSB0eXBlb2Ygb2JqLmZ1bmMgKSB7XG5cdFx0XHRcdFx0XHRzZWxmWyBvYmouZnVuYyBdKCByZWR1Y2VkICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vIGJpbmQgYnkgYW4gYW5vbnltb3VzIGZ1bmN0aW9uXG5cdFx0XHRcdFx0ZWxzZSBpZiAoICdmdW5jdGlvbicgPT09IHR5cGVvZiBvYmouZnVuYyApIHtcblx0XHRcdFx0XHRcdG9iai5mdW5jKCByZWR1Y2VkICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSApO1xuXG5cdFx0XHQvLyBpZiBhIHBvc3QgdHlwZSBpcyBzZXQgJiBhIGJpbmQgZXhpc3RzIGZvciBpdCwgYmluZCBpdFxuXHRcdFx0aWYgKCB3aW5kb3cubGxtcy5wb3N0LnBvc3RfdHlwZSApIHtcblxuXHRcdFx0XHR2YXIgZnVuYyA9ICdiaW5kXycgKyB3aW5kb3cubGxtcy5wb3N0LnBvc3RfdHlwZTtcblxuXHRcdFx0XHRpZiAoICdmdW5jdGlvbicgPT09IHR5cGVvZiB0aGlzW2Z1bmNdICkge1xuXG5cdFx0XHRcdFx0dGhpc1tmdW5jXSgpO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIEJpbmQgY2hlY2tib3hlcyB0aGF0IGNvbnRyb2wgdGhlIGRpc3BsYXkgb2Ygb3RoZXIgZWxlbWVudHNcblx0XHQgKlxuXHRcdCAqIEBwYXJhbSAgICBvYmogICAkY29udHJvbGxlcnMgIGpRdWVyeSBzZWxlY3RvciBmb3IgY2hlY2tib3hlcyB0byBiZSBib3VuZCBhcyBjaGVja2JveCBjb250cm9sbGVyc1xuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMC4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTEuMFxuXHRcdCAqL1xuXHRcdHRoaXMuYmluZF9jYl9jb250cm9sbGVycyA9IGZ1bmN0aW9uKCAkY29udHJvbGxlcnMgKSB7XG5cblx0XHRcdCRjb250cm9sbGVycyA9ICRjb250cm9sbGVycyB8fCAkKCAnaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdW2RhdGEtY29udHJvbHNdJyApO1xuXG5cdFx0XHQkY29udHJvbGxlcnMuZWFjaCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0dmFyICRjYiAgICAgICAgID0gJCggdGhpcyApLFxuXHRcdFx0XHRcdCRjb250cm9sbGVkID0gJCggJGNiLmF0dHIoICdkYXRhLWNvbnRyb2xzJyApICkuY2xvc2VzdCggJy5sbG1zLW1iLWxpc3QnICk7XG5cblx0XHRcdFx0JGNiLm9uKCAnY2hhbmdlJywgZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRpZiAoICQoIHRoaXMgKS5pcyggJzpjaGVja2VkJyApICkge1xuXG5cdFx0XHRcdFx0XHQkY29udHJvbGxlZC5zbGlkZURvd24oIDIwMCApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0JGNvbnRyb2xsZWQuc2xpZGVVcCggMjAwICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdCRjYi50cmlnZ2VyKCAnY2hhbmdlJyApO1xuXG5cdFx0XHR9ICk7XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogQmluZCBlbGVtZW50cyB0aGF0IGNvbnRyb2wgdGhlIGRpc3BsYXkgb2Ygb3RoZXIgZWxlbWVudHNcblx0XHQgKlxuXHRcdCAqIEBwYXJhbSAgICBvYmogICAkY29udHJvbGxlcnMgIGpRdWVyeSBzZWxlY3RvciBmb3IgZWxlbWVudHMgdG8gYmUgYm91bmQgYXMgY2hlY2tib3ggY29udHJvbGxlcnNcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjAuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjExLjBcblx0XHQgKi9cblx0XHR0aGlzLmJpbmRfY29udHJvbGxlcnMgPSBmdW5jdGlvbiggJGNvbnRyb2xsZXJzICkge1xuXG5cdFx0XHQkY29udHJvbGxlcnMgPSAkY29udHJvbGxlcnMgfHwgJCggJ1tkYXRhLWlzLWNvbnRyb2xsZXJdJyApO1xuXG5cdFx0XHQkY29udHJvbGxlcnMuZWFjaCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0dmFyICRlbCAgICAgICAgID0gJCggdGhpcyApLFxuXHRcdFx0XHRcdCRjb250cm9sbGVkID0gJCggJ1tkYXRhLWNvbnRyb2xsZXI9XCIjJyArICRlbC5hdHRyKCAnaWQnICkgKyAnXCJdJyApLFxuXHRcdFx0XHRcdHZhbDtcblxuXHRcdFx0XHQkZWwub24oICdjaGFuZ2UnLCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdGlmICggJ2NoZWNrYm94JyA9PT0gJGVsLmF0dHIoICd0eXBlJyApICkge1xuXG5cdFx0XHRcdFx0XHR2YWwgPSAkZWwuaXMoICc6Y2hlY2tlZCcgKSA/ICRlbC52YWwoKSA6ICdmYWxzZSc7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHR2YWwgPSAkZWwudmFsKCk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQkY29udHJvbGxlZC5lYWNoKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0dmFyIHBvc3NpYmxlID0gJCggdGhpcyApLmF0dHIoICdkYXRhLWNvbnRyb2xsZXItdmFsdWUnICksXG5cdFx0XHRcdFx0XHRcdHZhbHMgICAgID0gW107XG5cblx0XHRcdFx0XHRcdGlmICggLTEgIT09IHBvc3NpYmxlLmluZGV4T2YoICcsJyApICkge1xuXG5cdFx0XHRcdFx0XHRcdHZhbHMgPSBwb3NzaWJsZS5zcGxpdCggJywnICk7XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0dmFscy5wdXNoKCBwb3NzaWJsZSApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGlmICggLTEgIT09IHZhbHMuaW5kZXhPZiggdmFsICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0JCggdGhpcyApLnNsaWRlRG93biggMjAwICk7XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0JCggdGhpcyApLnNsaWRlVXAoIDIwMCApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdCRlbC50cmlnZ2VyKCAnY2hhbmdlJyApO1xuXG5cdFx0XHR9ICk7XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogQmluZCBhIHNpbmdsZSBkYXRlcGlja2VyIGVsZW1lbnRcblx0XHQgKlxuXHRcdCAqIEBwYXJhbSAgICBvYmogICAkZWwgIGpRdWVyeSBzZWxlY3RvciBmb3IgdGhlIGlucHV0IHRvIGJpbmQgdGhlIGRhdGVwaWNrZXIgdG9cblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjAuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjEwLjBcblx0XHQgKi9cblx0XHR0aGlzLmJpbmRfZGF0ZXBpY2tlciA9IGZ1bmN0aW9uKCAkZWwgKSB7XG5cdFx0XHR2YXIgZm9ybWF0ICA9ICRlbC5hdHRyKCAnZGF0YS1mb3JtYXQnICkgfHwgJ21tL2RkL3l5Jyxcblx0XHRcdFx0bWF4RGF0ZSA9ICRlbC5hdHRyKCAnZGF0YS1tYXgtZGF0ZScgKSB8fCBudWxsLFxuXHRcdFx0XHRtaW5EYXRlID0gJGVsLmF0dHIoICdkYXRhLW1pbi1kYXRlJyApIHx8IG51bGw7XG5cdFx0XHQkZWwuZGF0ZXBpY2tlcigge1xuXHRcdFx0XHRkYXRlRm9ybWF0OiBmb3JtYXQsXG5cdFx0XHRcdG1heERhdGU6IG1heERhdGUsXG5cdFx0XHRcdG1pbkRhdGU6IG1pbkRhdGUsXG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0LyoqXG5cdFx0ICogQmluZCBhbGwgTGlmdGVyTE1TIGRhdGVwaWNrZXJzXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0gICAgb2JqICAgJGRhdGVwaWNrZXJzICBqUXVlcnkgc2VsZWN0b3IgZm9yIHRoZSBlbGVtZW50cyB0byBiaW5kXG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4wLjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xMS4wXG5cdFx0ICovXG5cdFx0dGhpcy5iaW5kX2RhdGVwaWNrZXJzID0gZnVuY3Rpb24oICRkYXRlcGlja2VycyApIHtcblxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xuXG5cdFx0XHQkZGF0ZXBpY2tlcnMgPSAkZGF0ZXBpY2tlcnMgfHwgJCggJy5sbG1zLWRhdGVwaWNrZXInICk7XG5cblx0XHRcdCRkYXRlcGlja2Vycy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5iaW5kX2RhdGVwaWNrZXIoICQoIHRoaXMgKSApO1xuXHRcdFx0fSApO1xuXG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIEJpbmQgbGxtcy1lZGl0YWJsZSBtZXRhYm94IGZpZWxkcyBhbmQgcmVsYXRlZCBkb20gaW50ZXJhY3Rpb25zXG5cdFx0ICpcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjEwLjBcblx0XHQgKiBAdmVyc2lvbiAgMy4yOC4wXG5cdFx0ICovXG5cdFx0dGhpcy5iaW5kX2VkaXRhYmxlcyA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cblx0XHRcdGZ1bmN0aW9uIG1ha2VfZWRpdGFibGUoICRmaWVsZCApIHtcblxuXHRcdFx0XHR2YXIgJGxhYmVsICAgPSAkZmllbGQuZmluZCggJ2xhYmVsJyApLmNsb25lKCksXG5cdFx0XHRcdFx0bmFtZSAgICAgPSAkZmllbGQuYXR0ciggJ2RhdGEtbGxtcy1lZGl0YWJsZScgKSxcblx0XHRcdFx0XHR0eXBlICAgICA9ICRmaWVsZC5hdHRyKCAnZGF0YS1sbG1zLWVkaXRhYmxlLXR5cGUnICksXG5cdFx0XHRcdFx0cmVxdWlyZWQgPSAkZmllbGQuYXR0ciggJ2RhdGEtbGxtcy1lZGl0YWJsZS1yZXF1aXJlZCcgKSB8fCAnbm8nLFxuXHRcdFx0XHRcdHZhbCAgICAgID0gJGZpZWxkLmF0dHIoICdkYXRhLWxsbXMtZWRpdGFibGUtdmFsdWUnICksXG5cdFx0XHRcdFx0JGlucHV0O1xuXG5cdFx0XHRcdHJlcXVpcmVkID0gKCAneWVzJyA9PT0gcmVxdWlyZWQgKSA/ICcgcmVxdWlyZWQ9XCJyZXF1aXJlZFwiJyA6ICcnO1xuXG5cdFx0XHRcdGlmICggJ3NlbGVjdCcgPT09IHR5cGUgKSB7XG5cblx0XHRcdFx0XHR2YXIgb3B0aW9ucyA9IEpTT04ucGFyc2UoICRmaWVsZC5hdHRyKCAnZGF0YS1sbG1zLWVkaXRhYmxlLW9wdGlvbnMnICkgKSxcblx0XHRcdFx0XHRcdHNlbGVjdGVkO1xuXG5cdFx0XHRcdFx0JGlucHV0ID0gJCggJzxzZWxlY3QgbmFtZT1cIicgKyBuYW1lICsgJ1wiJyArIHJlcXVpcmVkICsgJyAvPicgKTtcblx0XHRcdFx0XHRmb3IgKCB2YXIga2V5IGluIG9wdGlvbnMgKSB7XG5cdFx0XHRcdFx0XHRzZWxlY3RlZCA9IHZhbCA9PT0ga2V5ID8gJyBzZWxlY3RlZD1cInNlbGVjdGVkXCInIDogJyc7XG5cdFx0XHRcdFx0XHQkaW5wdXQuYXBwZW5kKCAnPG9wdGlvbiB2YWx1ZT1cIicgKyBrZXkgKyAnXCInICsgc2VsZWN0ZWQgKyAnPicgKyBvcHRpb25zWyBrZXkgXSArICc8L29wdGlvbj4nICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSBpZiAoICdkYXRldGltZScgPT09IHR5cGUgKSB7XG5cblx0XHRcdFx0XHQkaW5wdXQgPSAkKCAnPGRpdiBjbGFzcz1cImxsbXMtZGF0ZXRpbWUtZmllbGRcIiAvPicgKTtcblxuXHRcdFx0XHRcdHZhbCAgICAgICAgICA9IEpTT04ucGFyc2UoIHZhbCApO1xuXHRcdFx0XHRcdHZhciBmb3JtYXQgICA9ICRmaWVsZC5hdHRyKCAnZGF0YS1sbG1zLWVkaXRhYmxlLWRhdGUtZm9ybWF0JyApIHx8ICcnLFxuXHRcdFx0XHRcdFx0bWluX2RhdGUgPSAkZmllbGQuYXR0ciggJ2RhdGEtbGxtcy1lZGl0YWJsZS1kYXRlLW1pbicgKSB8fCAnJyxcblx0XHRcdFx0XHRcdG1heF9kYXRlID0gJGZpZWxkLmF0dHIoICdkYXRhLWxsbXMtZWRpdGFibGUtZGF0ZS1tYXgnICkgfHwgJyc7XG5cblx0XHRcdFx0XHQkcGlja2VyID0gJCggJzxpbnB1dCBjbGFzcz1cImxsbXMtZGF0ZS1pbnB1dCBsbG1zLWRhdGVwaWNrZXJcIiBkYXRhLWZvcm1hdD1cIicgKyBmb3JtYXQgKyAnXCIgZGF0YS1tYXgtZGF0ZT1cIicgKyBtYXhfZGF0ZSArICdcIiBkYXRhLW1pbi1kYXRlPVwiJyArIG1pbl9kYXRlICsgJ1wiIG5hbWU9XCInICsgbmFtZSArICdbZGF0ZV1cIiB0eXBlPVwidGV4dFwiIHZhbHVlPVwiJyArIHZhbC5kYXRlICsgJ1wiPicgKTtcblx0XHRcdFx0XHRzZWxmLmJpbmRfZGF0ZXBpY2tlciggJHBpY2tlciApO1xuXHRcdFx0XHRcdCRpbnB1dC5hcHBlbmQoICRwaWNrZXIgKTtcblx0XHRcdFx0XHQkaW5wdXQuYXBwZW5kKCAnPGVtPkA8L2VtPicgKTtcblxuXHRcdFx0XHRcdCRpbnB1dC5hcHBlbmQoICc8aW5wdXQgY2xhc3M9XCJsbG1zLXRpbWUtaW5wdXRcIiBtYXg9XCIyM1wiIG1pbj1cIjBcIiBuYW1lPVwiJyArIG5hbWUgKyAnW2hvdXJdXCIgdHlwZT1cIm51bWJlclwiIHZhbHVlPVwiJyArIHZhbC5ob3VyICsgJ1wiPicgKTtcblx0XHRcdFx0XHQkaW5wdXQuYXBwZW5kKCAnPGVtPjo8L2VtPicgKTtcblx0XHRcdFx0XHQkaW5wdXQuYXBwZW5kKCAnPGlucHV0IGNsYXNzPVwibGxtcy10aW1lLWlucHV0XCIgbWF4PVwiNTlcIiBtaW49XCIwXCIgbmFtZT1cIicgKyBuYW1lICsgJ1ttaW51dGVdXCIgdHlwZT1cIm51bWJlclwiIHZhbHVlPVwiJyArIHZhbC5taW51dGUgKyAnXCI+JyApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQkaW5wdXQgPSAkKCAnPGlucHV0IG5hbWU9XCInICsgbmFtZSArICdcIiB0eXBlPVwiJyArIHR5cGUgKyAnXCIgdmFsdWU9XCInICsgdmFsICsgJ1wiJyArIHJlcXVpcmVkICsgJz4nICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQkZmllbGQuZW1wdHkoKS5hcHBlbmQoICRsYWJlbCApLmFwcGVuZCggJGlucHV0ICk7XG5cdFx0XHRcdGlmICggJ3NlbGVjdCcgPT09IHR5cGUgKSB7XG5cdFx0XHRcdFx0c2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHQkaW5wdXQudHJpZ2dlciggJ2NoYW5nZScgKTtcblx0XHRcdFx0XHR9LCAxMDAgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHR9O1xuXG5cdFx0XHQkKCAnYS5sbG1zLWVkaXRhYmxlJyApLm9uKCAnY2xpY2snLCBmdW5jdGlvbiggZSApIHtcblxuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRcdFx0dmFyICRidG4gPSAkKCB0aGlzICksXG5cdFx0XHRcdFx0JGZpZWxkcztcblxuXHRcdFx0XHRpZiAoICRidG4uYXR0ciggJ2RhdGEtZmllbGRzJyApICkge1xuXHRcdFx0XHRcdCRmaWVsZHMgPSAkKCAkYnRuLmF0dHIoICdkYXRhLWZpZWxkcycgKSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCRmaWVsZHMgPSAkYnRuLmNsb3Nlc3QoICcubGxtcy1tZXRhYm94LXNlY3Rpb24nICkuZmluZCggJ1tkYXRhLWxsbXMtZWRpdGFibGVdJyApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0JGJ0bi5yZW1vdmUoKTtcblxuXHRcdFx0XHQkZmllbGRzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdG1ha2VfZWRpdGFibGUoICQoIHRoaXMgKSApO1xuXHRcdFx0XHR9ICk7XG5cblx0XHRcdH0gKTtcblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBCaW5kIEVuZ2FnZW1lbnQgcG9zdCB0eXBlIEpTXG5cdFx0ICpcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjEuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjEuMFxuXHRcdCAqL1xuXHRcdHRoaXMuYmluZF9sbG1zX2VuZ2FnZW1lbnQgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xuXG5cdFx0XHQvLyB3aGVuIHRoZSBlbmdhZ2VtZW50IHR5cGUgY2hhbmdlcyB3ZSBuZWVkIHRvIGRvIHNvbWUgdGhpbmdzIHRvIHRoZSBVSVxuXHRcdFx0JCggJyNfbGxtc19lbmdhZ2VtZW50X3R5cGUnICkub24oICdjaGFuZ2UnLCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQkKCAnI19sbG1zX2VuZ2FnZW1lbnQnICkudHJpZ2dlciggJ2xsbXMtZW5nYWdlbWVudC10eXBlLWNoYW5nZScsICQoIHRoaXMgKS52YWwoKSApO1xuXG5cdFx0XHR9ICk7XG5cblx0XHRcdC8vIGN1c3RvbSB0cmlnZ2VyIHdoZW4gY2FsbGVkIHdoZW4gdGhlIGVuZ2FnZW1lbnQgdHlwZSBjaGFuZ2VzXG5cdFx0XHQkKCAnI19sbG1zX2VuZ2FnZW1lbnQnICkub24oICdsbG1zLWVuZ2FnZW1lbnQtdHlwZS1jaGFuZ2UnLCBmdW5jdGlvbiggZSwgZW5nYWdlbWVudF90eXBlICkge1xuXG5cdFx0XHRcdHZhciAkc2VsZWN0ID0gJCggdGhpcyApO1xuXG5cdFx0XHRcdHN3aXRjaCAoIGVuZ2FnZW1lbnRfdHlwZSApIHtcblxuXHRcdFx0XHRcdC8qKlxuXHRcdFx0XHRcdCAqIGNvcmUgZW5nYWdlbWVudHMgcmVsYXRlZCB0byBhIENQVFxuXHRcdFx0XHRcdCAqL1xuXHRcdFx0XHRcdGNhc2UgJ2FjaGlldmVtZW50Jzpcblx0XHRcdFx0XHRjYXNlICdjZXJ0aWZpY2F0ZSc6XG5cdFx0XHRcdFx0Y2FzZSAnZW1haWwnOlxuXG5cdFx0XHRcdFx0XHR2YXIgY3B0ID0gJ2xsbXNfJyArIGVuZ2FnZW1lbnRfdHlwZTtcblxuXHRcdFx0XHRcdFx0JHNlbGVjdC52YWwoIG51bGwgKS5hdHRyKCAnZGF0YS1wb3N0LXR5cGUnLCBjcHQgKS50cmlnZ2VyKCAnY2hhbmdlJyApO1xuXHRcdFx0XHRcdFx0c2VsZi5wb3N0X3NlbGVjdCggJHNlbGVjdCApO1xuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHQvKipcblx0XHRcdFx0XHQgKiBBbGxvdyBvdGhlciBwbHVnaW5zIGFuZCBkZXZlbG9wZXJzIHRvIGhvb2sgaW50byB0aGUgZW5nYWdlbWVudCB0eXBlIGNoYW5nZSBhY3Rpb25cblx0XHRcdFx0XHQgKi9cblx0XHRcdFx0XHRkZWZhdWx0OlxuXG5cdFx0XHRcdFx0XHQkc2VsZWN0LnRyaWdnZXIoICdsbG1zLWVuZ2FnZW1lbnQtdHlwZS1jaGFuZ2UtZXh0ZXJuYWwnLCBlbmdhZ2VtZW50X3R5cGUgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gKTtcblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBBY3Rpb25zIGZvciBtZW1iZXJzaGlwc1xuXHRcdCAqXG5cdFx0ICogQHNpbmNlIDMuMC4wXG5cdFx0ICogQHNpbmNlIDMuMzAuMCBNYWRlIGF1dG9lbnJvbGwgdGFibGUgc29ydGFibGUsIGFkZGVkIEFKQVggc2F2ZSBmb3IgYWRkaW5nIG5ldyBjb3Vyc2VzLlxuXHRcdCAqIEB2ZXJzaW9uIDMuMzAuMFxuXHRcdCAqXG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKi9cblx0XHR0aGlzLmJpbmRfbGxtc19tZW1iZXJzaGlwID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdHZhciAkdGFibGUgPSAkKCAnLmxsbXMtbWItbGlzdC5fbGxtc19jb250ZW50X3RhYmxlJyApO1xuXG5cdFx0XHQvKipcblx0XHRcdCAqIEhpZGUvU2hvdyBlbXB0eSBtZXNzYWdlIGhlYWRlciByb3cgZGVwZW5kaW5nIG9uIHRoZSBudW1iZXIgb2Ygcm93cyBpbiB0aGUgdGJvZHlcblx0XHRcdCAqXG5cdFx0XHQgKiBAc2luY2UgMy4zMC4wXG5cdFx0XHQgKiBAdmVyc2lvbiAzLjMwLjBcblx0XHRcdCAqXG5cdFx0XHQgKiBAcmV0dXJuIHZvaWRcblx0XHRcdCAqL1xuXHRcdFx0ZnVuY3Rpb24gdG9nZ2xlX2hlYWRlcl9yb3coKSB7XG5cblx0XHRcdFx0dmFyICRyb3dzID0gJHRhYmxlLmZpbmQoICd0Ym9keSB0cicgKTtcblx0XHRcdFx0aWYgKCAxID09PSAkcm93cy5sZW5ndGggKSB7XG5cdFx0XHRcdFx0JHJvd3MuZmlyc3QoKS5zaG93KCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0JHJvd3MuZmlyc3QoKS5oaWRlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBSZXRyaWV2ZSBhbiBhcnJheSBvZiBjb3Vyc2UgSURzIGluIHRoZSB0YWJsZS5cblx0XHRcdCAqXG5cdFx0XHQgKiBAc2luY2UgMy4zMC4wXG5cdFx0XHQgKiBAdmVyc2lvbiAzLjMwLjBcblx0XHRcdCAqXG5cdFx0XHQgKiBAcmV0dXJuIGFycmF5XG5cdFx0XHQgKi9cblx0XHRcdGZ1bmN0aW9uIGdldF9jb3Vyc2VfaWRzKCkge1xuXG5cdFx0XHRcdHZhciBjb3Vyc2VzID0gW107XG5cdFx0XHRcdCR0YWJsZS5maW5kKCAndGJvZHkgdHIgYVtocmVmPVwiI2xsbXMtY291cnNlLXJlbW92ZVwiXScgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRjb3Vyc2VzLnB1c2goICQoIHRoaXMgKS5hdHRyKCAnZGF0YS1pZCcgKSApO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHJldHVybiBjb3Vyc2VzO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIE9uIGluaXQsIHRvZ2dsZSB0aGUgaGVhZGVyIHJvdyB2aXNpYmlsaXR5LlxuXHRcdFx0dG9nZ2xlX2hlYWRlcl9yb3coKTtcblxuXHRcdFx0Ly8gcmVtb3ZlIGF1dG8tZW5yb2xsIGNvdXJzZVxuXHRcdFx0JHRhYmxlLm9uKCAnY2xpY2snLCAnYVtocmVmPVwiI2xsbXMtY291cnNlLXJlbW92ZVwiXScsIGZ1bmN0aW9uKCBlICkge1xuXG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblxuXHRcdFx0XHR2YXIgJGVsICAgICAgICA9ICQoIHRoaXMgKSxcblx0XHRcdFx0XHQkcm93ICAgICAgID0gJGVsLmNsb3Nlc3QoICd0cicgKSxcblx0XHRcdFx0XHQkY29udGFpbmVyID0gJGVsLmNsb3Nlc3QoICcubGxtcy1tYi1saXN0JyApO1xuXG5cdFx0XHRcdExMTVMuU3Bpbm5lci5zdGFydCggJGNvbnRhaW5lciApO1xuXG5cdFx0XHRcdHdpbmRvdy5MTE1TLkFqYXguY2FsbCgge1xuXHRcdFx0XHRcdGRhdGE6IHtcblx0XHRcdFx0XHRcdGFjdGlvbjogJ21lbWJlcnNoaXBfcmVtb3ZlX2F1dG9fZW5yb2xsX2NvdXJzZScsXG5cdFx0XHRcdFx0XHRjb3Vyc2VfaWQ6ICRlbC5hdHRyKCAnZGF0YS1pZCcgKSxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdGJlZm9yZVNlbmQ6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQkY29udGFpbmVyLmZpbmQoICdwLmVycm9yJyApLnJlbW92ZSgpO1xuXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRzdWNjZXNzOiBmdW5jdGlvbiggciApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCByLnN1Y2Nlc3MgKSB7XG5cblx0XHRcdFx0XHRcdFx0JHJvdy5mYWRlT3V0KCAyMDAgKTtcblx0XHRcdFx0XHRcdFx0c2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0JHJvdy5yZW1vdmUoKTtcblx0XHRcdFx0XHRcdFx0XHR0b2dnbGVfaGVhZGVyX3JvdygpO1xuXHRcdFx0XHRcdFx0XHR9LCA0MDAgKTtcblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQkY29udGFpbmVyLnByZXBlbmQoICc8cCBjbGFzcz1cImVycm9yXCI+JyArIHIubWVzc2FnZSArICc8L3A+JyApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdExMTVMuU3Bpbm5lci5zdG9wKCAkY29udGFpbmVyICk7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0fSApO1xuXG5cdFx0XHR9ICk7XG5cblx0XHRcdC8vIGJ1bGsgZW5yb2xsIGFsbCBtZW1iZXJzIGludG8gYSBjb3Vyc2Vcblx0XHRcdCR0YWJsZS5vbiggJ2NsaWNrJywgJ2FbaHJlZj1cIiNsbG1zLWNvdXJzZS1idWxrLWVucm9sbFwiXScsIGZ1bmN0aW9uKCBlICkge1xuXG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblxuXHRcdFx0XHR2YXIgJGVsICAgICAgICA9ICQoIHRoaXMgKSxcblx0XHRcdFx0XHQkcm93ICAgICAgID0gJGVsLmNsb3Nlc3QoICd0cicgKSxcblx0XHRcdFx0XHQkY29udGFpbmVyID0gJGVsLmNsb3Nlc3QoICcubGxtcy1tYi1saXN0JyApO1xuXG5cdFx0XHRcdGlmICggISB3aW5kb3cuY29uZmlybSggTExNUy5sMTBuLnRyYW5zbGF0ZSggJ0NsaWNrIG9rYXkgdG8gZW5yb2xsIGFsbCBhY3RpdmUgbWVtYmVycyBpbnRvIHRoZSBzZWxlY3RlZCBjb3Vyc2UuIEVucm9sbG1lbnQgd2lsbCB0YWtlIHBsYWNlIGluIHRoZSBiYWNrZ3JvdW5kIGFuZCB5b3UgbWF5IGxlYXZlIHlvdXIgc2l0ZSBhZnRlciBjb25maXJtYXRpb24uIFRoaXMgYWN0aW9uIGNhbm5vdCBiZSB1bmRvbmUhJyApICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0TExNUy5TcGlubmVyLnN0YXJ0KCAkY29udGFpbmVyICk7XG5cblx0XHRcdFx0d2luZG93LkxMTVMuQWpheC5jYWxsKCB7XG5cdFx0XHRcdFx0ZGF0YToge1xuXHRcdFx0XHRcdFx0YWN0aW9uOiAnYnVsa19lbnJvbGxfbWVtYmVyc2hpcF9pbnRvX2NvdXJzZScsXG5cdFx0XHRcdFx0XHRjb3Vyc2VfaWQ6ICRlbC5hdHRyKCAnZGF0YS1pZCcgKSxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdGJlZm9yZVNlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0JGNvbnRhaW5lci5maW5kKCAncC5lcnJvcicgKS5yZW1vdmUoKTtcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHN1Y2Nlc3M6IGZ1bmN0aW9uKCByICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIHIuc3VjY2VzcyApIHtcblxuXHRcdFx0XHRcdFx0XHQkZWwucmVwbGFjZVdpdGgoICc8c3Ryb25nIHN0eWxlPVwiZmxvYXQ6cmlnaHQ7XCI+JyArIHIuZGF0YS5tZXNzYWdlICsgJyZuYnNwOyZuYnNwOzwvc3Ryb25nPicgKTtcblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQkY29udGFpbmVyLnByZXBlbmQoICc8cCBjbGFzcz1cImVycm9yXCI+JyArIHIubWVzc2FnZSArICc8L3A+JyApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdExMTVMuU3Bpbm5lci5zdG9wKCAkY29udGFpbmVyICk7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0fSApO1xuXG5cdFx0XHR9ICk7XG5cblx0XHRcdC8vIEFkZCBhbiBpdGVtIHRvIHRoZSBhdXRvZW5yb2xsIHRhYmxlIG9uIHNlbGVjdC5cblx0XHRcdCQoICcjX2xsbXNfYXV0b19lbnJvbGwnICkub24oICdjaGFuZ2UnLCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHR2YXIgaWQgICAgPSAkKCB0aGlzICkudmFsKCksXG5cdFx0XHRcdFx0dGl0bGUgPSAkKCB0aGlzICkuZmluZCggJ29wdGlvblt2YWx1ZT1cIicgKyAkKCB0aGlzICkudmFsKCkgKyAnXCJdJyApLnRleHQoKTtcblxuXHRcdFx0XHQvLyBJZiB0aGVyZSdzIG5vIElEXG5cdFx0XHRcdGlmICggISBpZCApIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0Ly8gUHJldmVudCBEdXBlcy5cblx0XHRcdFx0fSBlbHNlIGlmICggLTEgIT09IGdldF9jb3Vyc2VfaWRzKCkuaW5kZXhPZiggaWQgKSApIHtcblxuXHRcdFx0XHRcdGFsZXJ0KCBMTE1TLmwxMG4ucmVwbGFjZSggJ1wiJXNcIiBpcyBhbHJlYWR5IGluIHRoZSBjb3Vyc2UgbGlzdC4nLCB7ICclcyc6IHRpdGxlIH0gKSApXG5cblx0XHRcdFx0XHQvLyByZXNldCB0aGUgc2VsZWN0IGZpZWxkLlxuXHRcdFx0XHRcdCQoIHRoaXMgKS52YWwoICcnICkudHJpZ2dlciggJ2NoYW5nZScgKTtcblxuXHRcdFx0XHRcdHJldHVybjtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyICR0YWJsZSA9ICQoICcubGxtcy1tYi1saXN0Ll9sbG1zX2NvbnRlbnRfdGFibGUnICk7XG5cdFx0XHRcdFx0JHRyICAgID0gJCggJzx0ciAvPicgKTtcblxuXHRcdFx0XHQkdHIuYXBwZW5kKCAnPHRkPjxzcGFuIGNsYXNzPVwibGxtcy1kcmFnLWhhbmRsZVwiIHN0eWxlPVwiY29sb3I6Izk5OTtcIj48aSBjbGFzcz1cImZhIGZhLWVsbGlwc2lzLXZcIiBhcmlhLWhpZGRlbj1cInRydWVcIiBzdHlsZT1cIm1hcmdpbi1yaWdodDoycHg7XCI+PC9pPjxpIGNsYXNzPVwiZmEgZmEtZWxsaXBzaXMtdlwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT48L3NwYW4+PC90ZD4nICk7XG5cdFx0XHRcdCR0ci5hcHBlbmQoICc8dGQ+PGEgaHJlZj1cIicgKyB3aW5kb3cubGxtcy5hZG1pbl91cmwgKyAncG9zdC5waHA/YWN0aW9uPWVkaXQmcG9zdD0nICsgaWQgKyAnXCI+JyArIHRpdGxlICsgJzwvYT48L3RkPicgKTtcblx0XHRcdFx0JHRyLmFwcGVuZCggJzx0ZD48YSBjbGFzcz1cImxsbXMtYnV0dG9uLWRhbmdlciBzbWFsbFwiIGRhdGEtaWQ9XCInICsgaWQgKyAnXCIgaHJlZj1cIiNsbG1zLWNvdXJzZS1yZW1vdmVcIiBzdHlsZT1cImZsb2F0OnJpZ2h0O1wiPicgKyBMTE1TLmwxMG4udHJhbnNsYXRlKCAnUmVtb3ZlIGNvdXJzZScgKSArICc8L2E+PGEgY2xhc3M9XCJsbG1zLWJ1dHRvbi1zZWNvbmRhcnkgc21hbGxcIiBkYXRhLWlkPVwiJyArIGlkICsgJ1wiIGhyZWY9XCIjbGxtcy1jb3Vyc2UtYnVsay1lbnJvbGxcIiBzdHlsZT1cImZsb2F0OnJpZ2h0O1wiPicgKyBMTE1TLmwxMG4udHJhbnNsYXRlKCAnRW5yb2xsIEFsbCBNZW1iZXJzJyApICsgJzwvYT48L3RkPicgKTtcblxuXHRcdFx0XHQvLyBhcHBlbmQgdGhlIGVsZW1lbnQgdG8gdGhlIHRhYmxlLlxuXHRcdFx0XHQkdGFibGUuZmluZCggJ3RhYmxlIHRib2R5JyApLmFwcGVuZCggJHRyICk7XG5cblx0XHRcdFx0Ly8gcmVzZXQgdGhlIHNlbGVjdCBmaWVsZC5cblx0XHRcdFx0JCggdGhpcyApLnZhbCggJycgKS50cmlnZ2VyKCAnY2hhbmdlJyApO1xuXG5cdFx0XHRcdC8vIFNob3cgdGhlIGhlYWRlciByb3cuXG5cdFx0XHRcdHRvZ2dsZV9oZWFkZXJfcm93KCk7XG5cblx0XHRcdFx0Ly8gdHJpZ2dlciBhIHNhdmUgZXZlbnQuXG5cdFx0XHRcdCR0YWJsZS50cmlnZ2VyKCAnbGxtcy1zYXZlLWF1dG9lbnJvbGwtY291cnNlcycgKTtcblxuXHRcdFx0fSApO1xuXG5cdFx0XHQvLyBNYWtlIGF1dG9lbnJvbGxtZW50IHRhYmxlIHNvcnRhYmxlLlxuXHRcdFx0JHRhYmxlLmZpbmQoICd0YWJsZSB0Ym9keScgKS5zb3J0YWJsZSgge1xuXHRcdFx0XHRoYW5kbGU6ICcubGxtcy1kcmFnLWhhbmRsZScsXG5cdFx0XHRcdC8vIFNhdmUgb3JkZXIgb24gc3RvcC5cblx0XHRcdFx0c3RvcDogZnVuY3Rpb24oIGV2ZW50LCB1aSApIHtcblx0XHRcdFx0XHR1aS5pdGVtLmNsb3Nlc3QoICcubGxtcy1tYi1saXN0JyApLnRyaWdnZXIoICdsbG1zLXNhdmUtYXV0b2Vucm9sbC1jb3Vyc2VzJyApO1xuXHRcdFx0XHR9LFxuXHRcdFx0fSApO1xuXG5cdFx0XHQvLyBTYXZlIGNvdXJzZXMgJiBjb3Vyc2Ugb3JkZXIuXG5cdFx0XHQkdGFibGUub24oICdsbG1zLXNhdmUtYXV0b2Vucm9sbC1jb3Vyc2VzJywgZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0dmFyICRjb250YWluZXIgPSAkKCB0aGlzICk7XG5cblx0XHRcdFx0TExNUy5TcGlubmVyLnN0YXJ0KCAkY29udGFpbmVyICk7XG5cblx0XHRcdFx0d2luZG93LkxMTVMuQWpheC5jYWxsKCB7XG5cdFx0XHRcdFx0ZGF0YToge1xuXHRcdFx0XHRcdFx0YWN0aW9uOiAnbGxtc19zYXZlX21lbWJlcnNoaXBfYXV0b2Vucm9sbF9jb3Vyc2VzJyxcblx0XHRcdFx0XHRcdGNvdXJzZXM6IGdldF9jb3Vyc2VfaWRzKCksXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRlcnJvcjogZnVuY3Rpb24oIGpxeGhyLCBjb2RlLCBlcnJvcl9tc2cgKSB7XG5cdFx0XHRcdFx0XHRhbGVydCggZXJyb3JfbXNnICk7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRjb21wbGV0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRMTE1TLlNwaW5uZXIuc3RvcCggJGNvbnRhaW5lciApO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0fSApO1xuXG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIEFjdGlvbnMgZm9yIE9SREVSU1xuXHRcdCAqXG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4wLjBcblx0XHQgKiBAdmVyc2lvbiAgMy4yOC4wXG5cdFx0ICovXG5cdFx0dGhpcy5iaW5kX2xsbXNfb3JkZXIgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0JCggJ2J1dHRvbltuYW1lPVwibGxtcy1yZWZ1bmQtdG9nZ2xlXCJdJyApLm9uKCAnY2xpY2snLCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHR2YXIgJGJ0biAgICAgICAgICAgICAgPSAkKCB0aGlzICksXG5cdFx0XHRcdFx0JHJvdyAgICAgICAgICAgICAgPSAkYnRuLmNsb3Nlc3QoICd0cicgKSxcblx0XHRcdFx0XHR0eG5faWQgICAgICAgICAgICA9ICRyb3cuYXR0ciggJ2RhdGEtdHJhbnNhY3Rpb24taWQnICksXG5cdFx0XHRcdFx0cmVmdW5kYWJsZV9hbW91bnQgPSAkYnRuLmF0dHIoICdkYXRhLXJlZnVuZGFibGUnICksXG5cdFx0XHRcdFx0Z2F0ZXdheV9zdXBwb3J0cyAgPSAoICcxJyA9PT0gJGJ0bi5hdHRyKCAnZGF0YS1nYXRld2F5LXN1cHBvcnRzJyApICkgPyB0cnVlIDogZmFsc2UsXG5cdFx0XHRcdFx0Z2F0ZXdheV90aXRsZSAgICAgPSAkYnRuLmF0dHIoICdkYXRhLWdhdGV3YXknICksXG5cdFx0XHRcdFx0JG5ld19yb3cgICAgICAgICAgPSAkKCAnI2xsbXMtdHhuLXJlZnVuZC1tb2RlbCAubGxtcy10eG4tcmVmdW5kLWZvcm0nICkuY2xvbmUoKSxcblx0XHRcdFx0XHQkZ2F0ZXdheV9idG4gICAgICA9ICRuZXdfcm93LmZpbmQoICcuZ2F0ZXdheS1idG4nICk7XG5cblx0XHRcdFx0Ly8gY29uZmlndXJlIGFuZCBhZGQgdGhlIGZvcm1cblx0XHRcdFx0aWYgKCAncmVtb3ZlJyAhPT0gJGJ0bi5hdHRyKCAnZGF0YS1hY3Rpb24nICkgKSB7XG5cblx0XHRcdFx0XHQkYnRuLnRleHQoIExMTVMubDEwbi50cmFuc2xhdGUoICdDYW5jZWwnICkgKTtcblx0XHRcdFx0XHQkYnRuLmF0dHIoICdkYXRhLWFjdGlvbicsICdyZW1vdmUnICk7XG5cdFx0XHRcdFx0JG5ld19yb3cuZmluZCggJ2lucHV0JyApLnJlbW92ZUF0dHIoICdkaXNhYmxlZCcgKTtcblx0XHRcdFx0XHQkbmV3X3Jvdy5maW5kKCAnaW5wdXRbbmFtZT1cImxsbXNfcmVmdW5kX2Ftb3VudFwiXScgKS5hdHRyKCAnbWF4JywgcmVmdW5kYWJsZV9hbW91bnQgKTtcblx0XHRcdFx0XHQkbmV3X3Jvdy5maW5kKCAnaW5wdXRbbmFtZT1cImxsbXNfcmVmdW5kX3R4bl9pZFwiXScgKS52YWwoIHR4bl9pZCApO1xuXG5cdFx0XHRcdFx0aWYgKCBnYXRld2F5X3N1cHBvcnRzICkge1xuXHRcdFx0XHRcdFx0JGdhdGV3YXlfYnRuLmZpbmQoICcubGxtcy1nYXRld2F5LXRpdGxlJyApLnRleHQoIGdhdGV3YXlfdGl0bGUgKTtcblx0XHRcdFx0XHRcdCRnYXRld2F5X2J0bi5zaG93KCk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0JHJvdy5hZnRlciggJG5ld19yb3cgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0JGJ0bi50ZXh0KCBMTE1TLmwxMG4udHJhbnNsYXRlKCAnUmVmdW5kJyApICk7XG5cdFx0XHRcdFx0JGJ0bi5hdHRyKCAnZGF0YS1hY3Rpb24nLCAnJyApO1xuXHRcdFx0XHRcdCRyb3cubmV4dCggJ3RyJyApLnJlbW92ZSgpO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSApO1xuXG5cdFx0XHQkKCAnYnV0dG9uW25hbWU9XCJsbG1zLW1hbnVhbC10eG4tdG9nZ2xlXCJdJyApLm9uKCAnY2xpY2snLCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHR2YXIgJGJ0biAgICAgPSAkKCB0aGlzICksXG5cdFx0XHRcdFx0JHJvdyAgICAgPSAkYnRuLmNsb3Nlc3QoICd0cicgKSxcblx0XHRcdFx0XHQkbmV3X3JvdyA9ICQoICcjbGxtcy1tYW51YWwtdHhuLW1vZGVsIC5sbG1zLW1hbnVhbC10eG4tZm9ybScgKS5jbG9uZSgpO1xuXG5cdFx0XHRcdC8vIGNvbmZpZ3VyZSBhbmQgYWRkIHRoZSBmb3JtXG5cdFx0XHRcdGlmICggJ3JlbW92ZScgIT09ICRidG4uYXR0ciggJ2RhdGEtYWN0aW9uJyApICkge1xuXG5cdFx0XHRcdFx0JGJ0bi50ZXh0KCBMTE1TLmwxMG4udHJhbnNsYXRlKCAnQ2FuY2VsJyApICk7XG5cdFx0XHRcdFx0JGJ0bi5hdHRyKCAnZGF0YS1hY3Rpb24nLCAncmVtb3ZlJyApO1xuXHRcdFx0XHRcdCRuZXdfcm93LmZpbmQoICdpbnB1dCcgKS5yZW1vdmVBdHRyKCAnZGlzYWJsZWQnICk7XG5cblx0XHRcdFx0XHQkcm93LmFmdGVyKCAkbmV3X3JvdyApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQkYnRuLnRleHQoIExMTVMubDEwbi50cmFuc2xhdGUoICdSZWNvcmQgYSBNYW51YWwgUGF5bWVudCcgKSApO1xuXHRcdFx0XHRcdCRidG4uYXR0ciggJ2RhdGEtYWN0aW9uJywgJycgKTtcblx0XHRcdFx0XHQkcm93Lm5leHQoICd0cicgKS5yZW1vdmUoKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gKTtcblxuXHRcdFx0Ly8gY2FjaGUgdGhlIG9yaWdpbmFsIHZhbHVlIHdoZW4gZm9jdXNpbmcgb24gYSBwYXltZW50IGdhdGV3YXkgc2VsZWN0XG5cdFx0XHQvLyB1c2VkIGJlbG93IHNvIHRoZSBvcmlnaW5hbCBmaWVsZCByZWxhdGVkIGRhdGEgY2FuIGJlIHJlc3RvcmVkIHdoZW4gc3dpdGNoaW5nIGJhY2sgdG8gdGhlIG9yaWdpbmFsbHkgc2VsZWN0ZWQgZ2F0ZXdheVxuXHRcdFx0JCggJy5sbG1zLW1ldGFib3gnICkub25lKCAnZm9jdXMnLCAnLmxsbXMtbWV0YWJveC1maWVsZFtkYXRhLWxsbXMtZWRpdGFibGU9XCJwYXltZW50X2dhdGV3YXlcIl0gc2VsZWN0JywgZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0aWYgKCAhICQoIHRoaXMgKS5hdHRyKCAnZGF0YS1vcmlnaW5hbC12YWx1ZScgKSApIHtcblx0XHRcdFx0XHQkKCB0aGlzICkuYXR0ciggJ2RhdGEtb3JpZ2luYWwtdmFsdWUnLCAkKCB0aGlzICkudmFsKCkgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHR9ICk7XG5cblx0XHRcdC8vIHdoZW4gc2VsZWN0aW5nIGEgbmV3IHBheW1lbnQgZ2F0ZXdheSBnZXQgZmllbGQgZGF0YSBhbmQgdXBkYXRlIHRoZSBkb20gdG8gb25seSBkaXNwbGF5IHRoZSBmaWVsZHNcblx0XHRcdC8vIHN1cHBvcnRlZC9uZWVkZWQgYnkgdGhlIG5ld2x5IHNlbGVjdGVkIGdhdGV3YXlcblx0XHRcdCQoICcubGxtcy1tZXRhYm94JyApLm9uKCAnY2hhbmdlJywgJy5sbG1zLW1ldGFib3gtZmllbGRbZGF0YS1sbG1zLWVkaXRhYmxlPVwicGF5bWVudF9nYXRld2F5XCJdIHNlbGVjdCcsIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdHZhciAkc2VsZWN0ICAgICAgPSAkKCB0aGlzICksXG5cdFx0XHRcdFx0Z2F0ZXdheSAgICAgID0gJHNlbGVjdC52YWwoKSxcblx0XHRcdFx0XHRkYXRhICAgICAgICAgPSBKU09OLnBhcnNlKCAkc2VsZWN0LmNsb3Nlc3QoICcubGxtcy1tZXRhYm94LWZpZWxkJyApLmF0dHIoICdkYXRhLWdhdGV3YXktZmllbGRzJyApICksXG5cdFx0XHRcdFx0Z2F0ZXdheV9kYXRhID0gZGF0YVsgZ2F0ZXdheSBdO1xuXG5cdFx0XHRcdGZvciAoIHZhciBmaWVsZCBpbiBnYXRld2F5X2RhdGEgKSB7XG5cblx0XHRcdFx0XHR2YXIgJGZpZWxkID0gJCggJ2lucHV0W25hbWU9XCInICsgZ2F0ZXdheV9kYXRhWyBmaWVsZCBdLm5hbWUgKyAnXCJdJyApLFxuXHRcdFx0XHRcdFx0JHdyYXAgID0gJGZpZWxkLmNsb3Nlc3QoICcubGxtcy1tZXRhYm94LWZpZWxkJyApO1xuXG5cdFx0XHRcdFx0Ly8gaWYgdGhlIGZpZWxkIGlzIGVuYWJsZWQgc2hvdyBpdCB0aGUgZmllbGQgYW5kLCBpZiB3ZSdyZSBzd2l0Y2hpbmcgYmFjayB0byB0aGUgb3JpZ2luYWxseSBzZWxlY3RlZFxuXHRcdFx0XHRcdC8vIGdhdGV3YXksIHJlbG9hZCB0aGUgdmFsdWUgZnJvbSB0aGUgZG9tXG5cdFx0XHRcdFx0aWYgKCBnYXRld2F5X2RhdGFbIGZpZWxkIF0uZW5hYmxlZCApIHtcblxuXHRcdFx0XHRcdFx0JHdyYXAuc2hvdygpO1xuXHRcdFx0XHRcdFx0JGZpZWxkLmF0dHIoICdyZXF1aXJlZCcsICdyZXF1aXJlZCcgKTtcblx0XHRcdFx0XHRcdCRmaWVsZC5yZW1vdmVBdHRyKCAnZGlzYWJsZWQnICk7XG5cblx0XHRcdFx0XHRcdGlmICggZ2F0ZXdheSA9PT0gJHNlbGVjdC5hdHRyKCAnZGF0YS1vcmlnaW5hbC12YWx1ZScgKSApIHtcblx0XHRcdFx0XHRcdFx0JGZpZWxkLnZhbCggJHdyYXAuYXR0ciggJ2RhdGEtbGxtcy1lZGl0YWJsZS12YWx1ZScgKSApO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBvdGhlcndpc2UgaGlkZSB0aGUgZmllbGRcblx0XHRcdFx0XHRcdC8vIHRoaXMgd2lsbCBlbnN1cmUgaXQgZ2V0cyB1cGRhdGVkIGluIHRoZSBkYXRhYmFzZVxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdC8vIGFsd2F5cyBjbGVhciB0aGUgdmFsdWUgd2hlbiBzd2l0Y2hpbmdcblx0XHRcdFx0XHRcdC8vIGVuc3VyZXMgdGhhdCBvdXRkYXRlZCBkYXRhIGlzIHJlbW92ZWQgZnJvbSB0aGUgREJcblx0XHRcdFx0XHRcdCRmaWVsZC5hdHRyKCAndmFsdWUnLCAnJyApO1xuXG5cdFx0XHRcdFx0XHQkZmllbGQucmVtb3ZlQXR0ciggJ3JlcXVpcmVkJyApO1xuXHRcdFx0XHRcdFx0Ly8gJGZpZWxkLmF0dHIoICdkaXNhYmxlZCcsICdkaXNhYmxlZCcgKTtcblx0XHRcdFx0XHRcdCR3cmFwLmhpZGUoKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gKTtcblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBCaW5kcyBjdXN0b20gbGxtcyBtZXJnZSBjb2RlIGJ1dHRvbnNcblx0XHQgKlxuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMS4wXG5cdFx0ICogQHZlcnNpb24gIDMuOS4yXG5cdFx0ICovXG5cdFx0dGhpcy5iaW5kX21lcmdlX2NvZGVfYnV0dG9ucyA9IGZ1bmN0aW9uKCAkd3JhcHBlcnMgKSB7XG5cblx0XHRcdCR3cmFwcGVycyA9ICR3cmFwcGVycyB8fCAkKCAnLmxsbXMtbWVyZ2UtY29kZS13cmFwcGVyJyApO1xuXG5cdFx0XHQkd3JhcHBlcnMuZmluZCggJy5sbG1zLW1lcmdlLWNvZGUtYnV0dG9uJyApLm9uKCAnY2xpY2snLCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQkKCB0aGlzICkubmV4dCggJy5sbG1zLW1lcmdlLWNvZGVzJyApLnRvZ2dsZUNsYXNzKCAnYWN0aXZlJyApO1xuXG5cdFx0XHR9ICk7XG5cblx0XHRcdCR3cmFwcGVycy5maW5kKCAnLmxsbXMtbWVyZ2UtY29kZXMgbGknICkub24oICdjbGljaycsIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdHZhciAkZWwgICAgID0gJCggdGhpcyApLFxuXHRcdFx0XHRcdCRwYXJlbnQgPSAkZWwuY2xvc2VzdCggJy5sbG1zLW1lcmdlLWNvZGVzJyApLFxuXHRcdFx0XHRcdHRhcmdldCAgPSAkcGFyZW50LmF0dHIoICdkYXRhLXRhcmdldCcgKSxcblx0XHRcdFx0XHRjb2RlICAgID0gJGVsLmF0dHIoICdkYXRhLWNvZGUnICk7XG5cblx0XHRcdFx0Ly8gZGVhbGluZyB3aXRoIGEgdGlueW1jZSBpbnN0YW5jZVxuXHRcdFx0XHRpZiAoIC0xID09PSB0YXJnZXQuaW5kZXhPZiggJyMnICkgKSB7XG5cblx0XHRcdFx0XHR2YXIgZWRpdG9yID0gd2luZG93LnRpbnltY2UuZWRpdG9yc1sgdGFyZ2V0IF07XG5cdFx0XHRcdFx0aWYgKCBlZGl0b3IgKSB7XG5cdFx0XHRcdFx0XHRlZGl0b3IuaW5zZXJ0Q29udGVudCggY29kZSApO1xuXHRcdFx0XHRcdH0gLy8gZmFsbGJhY2sgaW4gY2FzZSB3ZSBjYW4ndCBhY2Nlc3MgdGhlIGVkaXRvciBkaXJlY3RseVxuXHRcdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdFx0YWxlcnQoIExMTVMubDEwbi50cmFuc2xhdGUoICdDb3B5IHRoaXMgY29kZSBhbmQgcGFzdGUgaXQgaW50byB0aGUgZGVzaXJlZCBhcmVhJyApICsgJzogJyArIGNvZGUgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXHRcdFx0XHQvLyBkZWFsaW5nIHdpdGggYSBET00gaWRcblx0XHRcdFx0ZWxzZSB7XG5cblx0XHRcdFx0XHQkKCB0YXJnZXQgKS52YWwoICQoIHRhcmdldCApLnZhbCgpICsgY29kZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQkcGFyZW50LnJlbW92ZUNsYXNzKCAnYWN0aXZlJyApO1xuXG5cdFx0XHR9ICk7XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogQmluZCBtZXRhYm94IHRhYnNcblx0XHQgKlxuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMC4wXG5cdFx0ICogQHZlcnNpb24gIDMuMC4wXG5cdFx0ICovXG5cdFx0dGhpcy5iaW5kX3RhYnMgPSBmdW5jdGlvbigpIHtcblx0XHRcdCQoICcubGxtcy1uYXYtdGFiLXdyYXBwZXIgLnRhYnMgbGknICkub24oICdjbGljaycsIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdHZhciAkYnRuICAgICA9ICQoIHRoaXMgKSxcblx0XHRcdFx0XHQkbWV0YWJveCA9ICRidG4uY2xvc2VzdCggJy5sbG1zLW1iLWNvbnRhaW5lcicgKSxcblx0XHRcdFx0XHR0YWJfaWQgICA9ICRidG4uYXR0ciggJ2RhdGEtdGFiJyApO1xuXG5cdFx0XHRcdCRidG4uc2libGluZ3MoKS5yZW1vdmVDbGFzcyggJ2xsbXMtYWN0aXZlJyApO1xuXG5cdFx0XHRcdCRtZXRhYm94LmZpbmQoICcudGFiLWNvbnRlbnQnICkucmVtb3ZlQ2xhc3MoICdsbG1zLWFjdGl2ZScgKTtcblxuXHRcdFx0XHQkYnRuLmFkZENsYXNzKCAnbGxtcy1hY3RpdmUnICk7XG5cdFx0XHRcdCQoICcjJyArIHRhYl9pZCApLmFkZENsYXNzKCAnbGxtcy1hY3RpdmUnICk7XG5cblx0XHRcdH0gKTtcblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogRW5hYmxlIFdQIFBvc3QgVGFibGUgc2VhcmNoZXMgZm9yIGFwcGxpY2FibGUgc2VsZWN0MiBib3hlc1xuXHRcdCAqXG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4wLjBcblx0XHQgKiBAdmVyc2lvbiAgMy4yMS4wXG5cdFx0ICovXG5cdFx0dGhpcy5wb3N0X3NlbGVjdCA9IGZ1bmN0aW9uKCAkZWwgKSB7XG5cblx0XHRcdHZhciBtdWx0aSA9ICdtdWx0aXBsZScgPT09ICRlbC5hdHRyKCAnbXVsdGlwbGUnICk7XG5cblx0XHRcdCRlbC5sbG1zUG9zdHNTZWxlY3QyKCB7XG5cdFx0XHRcdHdpZHRoOiBtdWx0aSA/ICcxMDAlJyA6ICc2NSUnLFxuXHRcdFx0fSApO1xuXG5cdFx0XHRpZiAoIG11bHRpIHx8ICRlbC5hdHRyKCAnZGF0YS1uby12aWV3LWJ1dHRvbicgKSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBhZGQgYSBcIlZpZXdcIiBidXR0b24gdG8gc2VlIHdoYXQgdGhlIHNlbGVjdGVkIHBhZ2UgbG9va3MgbGlrZVxuXHRcdFx0dmFyIG1zZyAgPSBMTE1TLmwxMG4udHJhbnNsYXRlKCAnVmlldycgKSxcblx0XHRcdFx0JGJ0biA9ICQoICc8YSBjbGFzcz1cImxsbXMtYnV0dG9uLXNlY29uZGFyeSBzbWFsbFwiIHN0eWxlPVwibWFyZ2luLWxlZnQ6NXB4O1wiIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCIjXCI+JyArIG1zZyArICcgPGkgY2xhc3M9XCJmYSBmYS1leHRlcm5hbC1saW5rXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPjwvYT4nICk7XG5cdFx0XHQkZWwubmV4dCggJy5zZWxlY3QyJyApLmFmdGVyKCAkYnRuICk7XG5cblx0XHRcdCRlbC5vbiggJ2NoYW5nZScsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgaWQgPSAkKCB0aGlzICkudmFsKCk7XG5cdFx0XHRcdGlmICggaWQgKSB7XG5cdFx0XHRcdFx0JGJ0bi5hdHRyKCAnaHJlZicsICcvP3A9JyArIGlkICkuc2hvdygpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCRidG4uaGlkZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICkudHJpZ2dlciggJ2NoYW5nZScgKTtcblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBCaW5kIGRvbSBldmVudHMgZm9yIC5sbG1zLXRhYmxlc1xuXHRcdCAqXG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4wLjBcblx0XHQgKiBAdmVyc2lvbiAgMy4wLjBcblx0XHQgKi9cblx0XHR0aGlzLmJpbmRfdGFibGVzID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdCQoICcubGxtcy10YWJsZSBidXR0b25bbmFtZT1cImxsbXMtZXhwYW5kLXRhYmxlXCJdJyApLm9uKCAnY2xpY2snLCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHR2YXIgJGJ0biAgID0gJCggdGhpcyApLFxuXHRcdFx0XHRcdCR0YWJsZSA9ICRidG4uY2xvc2VzdCggJy5sbG1zLXRhYmxlJyApXG5cblx0XHRcdFx0Ly8gc3dpdGNoIHRoZSB0ZXh0IG9uIHRoZSBidXR0b24gaWYgYWx0IHRleHQgaXMgZm91bmRcblx0XHRcdFx0aWYgKCAkYnRuLmF0dHIoICdkYXRhLXRleHQnICkgKSB7XG5cdFx0XHRcdFx0dmFyIHRleHQgPSAkYnRuLnRleHQoKTtcblx0XHRcdFx0XHQkYnRuLnRleHQoICRidG4uYXR0ciggJ2RhdGEtdGV4dCcgKSApO1xuXHRcdFx0XHRcdCRidG4uYXR0ciggJ2RhdGEtdGV4dCcsIHRleHQgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIHN3aXRjaCBjbGFzc2VzIG9uIGFsbCBleHBhbmRhYmxlIGVsZW1lbnRzXG5cdFx0XHRcdCR0YWJsZS5maW5kKCAnLmV4cGFuZGFibGUnICkuZWFjaCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRpZiAoICQoIHRoaXMgKS5oYXNDbGFzcyggJ2Nsb3NlZCcgKSApIHtcblx0XHRcdFx0XHRcdCQoIHRoaXMgKS5hZGRDbGFzcyggJ29wZW5lZCcgKS5yZW1vdmVDbGFzcyggJ2Nsb3NlZCcgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0JCggdGhpcyApLmFkZENsYXNzKCAnY2xvc2VkJyApLnJlbW92ZUNsYXNzKCAnb3BlbmVkJyApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdH0gKTtcblxuXHRcdH07XG5cblx0XHQvLyBnb1xuXHRcdHRoaXMuaW5pdCgpO1xuXG5cdH07XG5cblx0Ly8gaW5pdGlhbGl6ZSB0aGUgb2JqZWN0XG5cdHdpbmRvdy5sbG1zLm1ldGFib3hlcyA9IG5ldyBNZXRhYm94ZXMoKTtcblxufSApKCBqUXVlcnkgKTtcbiIsIi8qKlxuICogTGlmdGVyTE1TIEFkbWluIE1ldGFib3ggUmVwZWF0ZXIgRmllbGRcbiAqXG4gKiBAcGFja2FnZSBMaWZ0ZXJMTVMvU2NyaXB0cy9QYXJ0aWFsc1xuICpcbiAqIEBzaW5jZSAgICAzLjExLjBcbiAqIEB2ZXJzaW9uICAzLjIzLjBcbiAqL1xuXG50aGlzLnJlcGVhdGVycyA9IHtcblxuXHQvKipcblx0ICogUmVmZXJlbmNlIHRvIHRoZSBwYXJlbnQgbWV0YWJveCBjbGFzc1xuXHQgKlxuXHQgKiBAdHlwZSAgb2JqXG5cdCAqL1xuXHRtZXRhYm94ZXM6IHRoaXMsXG5cblx0LyoqXG5cdCAqIEEgalF1ZXJ5IHNlbGVjdG9yIGZvciBhbGwgcmVwZWF0ZXIgZWxlbWVudHMgb24gdGhlIGN1cnJlbnQgc2NyZWVuXG5cdCAqXG5cdCAqIEB0eXBlICB7W3R5cGVdfVxuXHQgKi9cblx0JHJlcGVhdGVyczogbnVsbCxcblxuXHQvKipcblx0ICogSW5pdFxuXHQgKlxuXHQgKiBAc2luY2UgICAgMy4xMS4wXG5cdCAqIEB2ZXJzaW9uICAzLjIzLjBcblx0ICpcblx0ICogQHJldHVybiAgIHZvaWRcblx0ICovXG5cdGluaXQ6IGZ1bmN0aW9uKCkge1xuXG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xuXG5cdFx0c2VsZi4kcmVwZWF0ZXJzID0gJCggJy5sbG1zLW1iLWxpc3QucmVwZWF0ZXInICk7XG5cblx0XHRpZiAoIHNlbGYuJHJlcGVhdGVycy5sZW5ndGggKSB7XG5cblx0XHRcdC8vIHdhaXQgZm9yIHRpbnlNQ0UganVzdCBpbiBjYXNlIHRoZWlyIGVkaXRvcnMgaW4gdGhlIHJlcGVhdGVyc1xuXHRcdFx0TExNUy53YWl0X2Zvcihcblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuICggJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiB0aW55TUNFICk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHNlbGYubG9hZCgpO1xuXHRcdFx0XHRcdHNlbGYuYmluZCgpO1xuXHRcdFx0XHR9XG5cdFx0XHQpO1xuXG5cdFx0XHQvLyBvbiBjbGljayBvZiBhbnkgcG9zdCBzdWJtaXQgYnV0dG9ucyBhZGQgc29tZSBkYXRhIHRvIHRoZSBzdWJtaXQgYnV0dG9uXG5cdFx0XHQvLyBzbyB3ZSBjYW4gc2VlIHdoaWNoIGJ1dHRvbiB0byB0cmlnZ2VyIGFmdGVyIHJlcGVhdGVycyBhcmUgZmluaXNoZWRcblx0XHRcdCQoICcjcG9zdCBpbnB1dFt0eXBlPVwic3VibWl0XCJdLCAjcG9zdC1wcmV2aWV3JyApLm9uKCAnY2xpY2snLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0JCggdGhpcyApLmF0dHIoICdkYXRhLWxsbXMtY2xpY2tlZCcsICd5ZXMnICk7XG5cdFx0XHR9ICk7XG5cblx0XHRcdC8vIGhhbmRsZSBwb3N0IHN1Ym1pc3Npb25cblx0XHRcdCQoICcjcG9zdCcgKS5vbiggJ3N1Ym1pdCcsIHNlbGYuaGFuZGxlX3N1Ym1pdCApO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0LyoqXG5cdCAqIEJpbmQgRE9NIEV2ZW50c1xuXHQgKlxuXHQgKiBAcmV0dXJuICAgdm9pZFxuXHQgKiBAc2luY2UgICAgMy4xMS4wXG5cdCAqIEB2ZXJzaW9uICAzLjEzLjBcblx0ICovXG5cdGJpbmQ6IGZ1bmN0aW9uKCkge1xuXG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xuXG5cdFx0c2VsZi4kcmVwZWF0ZXJzLmVhY2goIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR2YXIgJHJlcGVhdGVyID0gJCggdGhpcyApLFxuXHRcdFx0XHQkcm93cyAgICAgPSAkcmVwZWF0ZXIuZmluZCggJy5sbG1zLXJlcGVhdGVyLXJvd3MnICksXG5cdFx0XHRcdCRtb2RlbCAgICA9ICRyZXBlYXRlci5maW5kKCAnLmxsbXMtcmVwZWF0ZXItbW9kZWwnICk7XG5cblx0XHRcdHRpbnlNQ0UuRWRpdG9yTWFuYWdlci5leGVjQ29tbWFuZCggJ21jZVJlbW92ZUVkaXRvcicsIHRydWUsICRtb2RlbC5maW5kKCAnLmxsbXMtbWItbGlzdC5lZGl0b3IgdGV4dGFyZWEnICkuYXR0ciggJ2lkJyApICk7XG5cblx0XHRcdC8vIGZvciB0aGUgcmVwZWF0ZXIgKyBidXR0b25cblx0XHRcdCRyZXBlYXRlci5maW5kKCAnLmxsbXMtcmVwZWF0ZXItbmV3LWJ0bicgKS5vbiggJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHNlbGYuYWRkX3JvdyggJHJlcGVhdGVyLCBudWxsLCB0cnVlICk7XG5cdFx0XHR9ICk7XG5cblx0XHRcdC8vIG1ha2UgcmVwZWF0ZXIgcm93cyBzb3J0YWJsZVxuXHRcdFx0JHJvd3Muc29ydGFibGUoIHtcblx0XHRcdFx0aGFuZGxlOiAnLmxsbXMtZHJhZy1oYW5kbGUnLFxuXHRcdFx0XHRpdGVtczogJy5sbG1zLXJlcGVhdGVyLXJvdycsXG5cdFx0XHRcdHN0YXJ0OiBmdW5jdGlvbiggZXZlbnQsIHVpICkge1xuXHRcdFx0XHRcdCRyb3dzLmFkZENsYXNzKCAnZHJhZ2dpbmcnICk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHN0b3A6IGZ1bmN0aW9uKCBldmVudCwgdWkgKSB7XG5cdFx0XHRcdFx0JHJvd3MucmVtb3ZlQ2xhc3MoICdkcmFnZ2luZycgKTtcblxuXHRcdFx0XHRcdHZhciAkZWRzID0gdWkuaXRlbS5maW5kKCAndGV4dGFyZWEud3AtZWRpdG9yLWFyZWEnICk7XG5cdFx0XHRcdFx0JGVkcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHZhciBlZF9pZCA9ICQoIHRoaXMgKS5hdHRyKCAnaWQnICk7XG5cdFx0XHRcdFx0XHR0aW55TUNFLkVkaXRvck1hbmFnZXIuZXhlY0NvbW1hbmQoICdtY2VSZW1vdmVFZGl0b3InLCB0cnVlLCBlZF9pZCApO1xuXHRcdFx0XHRcdFx0dGlueU1DRS5FZGl0b3JNYW5hZ2VyLmV4ZWNDb21tYW5kKCAnbWNlQWRkRWRpdG9yJywgdHJ1ZSwgZWRfaWQgKTtcblx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0XHRzZWxmLnNhdmUoICRyZXBlYXRlciApO1xuXHRcdFx0XHR9LFxuXHRcdFx0fSApO1xuXG5cdFx0XHQkcmVwZWF0ZXIub24oICdjbGljaycsICcubGxtcy1yZXBlYXRlci1yZW1vdmUnLCBmdW5jdGlvbiggZSApIHtcblx0XHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0dmFyICRyb3cgPSAkKCB0aGlzICkuY2xvc2VzdCggJy5sbG1zLXJlcGVhdGVyLXJvdycgKTtcblx0XHRcdFx0aWYgKCB3aW5kb3cuY29uZmlybSggTExNUy5sMTBuLnRyYW5zbGF0ZSggJ0FyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgdGhpcyByb3c/IFRoaXMgY2Fubm90IGJlIHVuZG9uZS4nICkgKSApIHtcblx0XHRcdFx0XHQkcm93LnJlbW92ZSgpO1xuXHRcdFx0XHRcdHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0c2VsZi5zYXZlKCAkcmVwZWF0ZXIgKTtcblx0XHRcdFx0XHR9LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblxuXHRcdH0gKTtcblxuXHR9LFxuXG5cdC8qKlxuXHQgKiBBZGQgYSBuZXcgcm93IHRvIGEgcmVwZWF0ZXIgcm93cyBncm91cFxuXHQgKlxuXHQgKiBAcGFyYW0gICAgb2JqICAgICRyZXBlYXRlciAgalF1ZXJ5IHNlbGVjdG9yIGZvciB0aGUgcmVwZWF0ZXIgdG8gYWRkIGEgcm93IHRvXG5cdCAqIEBwYXJhbSAgICBvYmogICAgZGF0YSAgICAgICBvcHRpb25hbCBvYmplY3Qgb2YgZGF0YSB0byBmaWxsIGZpZWxkcyBpbiB0aGUgcm93IHdpdGhcblx0ICogQHBhcmFtICAgIGJvb2wgICBleHBhbmQgICAgIGlmIHRydWUsIHdpbGwgYXV0b21hdGljYWxseSBvcGVuIHRoZSByb3cgYWZ0ZXIgYWRkaW5nIGl0IHRvIHRoZSBkb21cblx0ICogQHJldHVybiBcdCB2b2lkXG5cdCAqIEBzaW5jZSAgICAzLjExLjBcblx0ICogQHZlcnNpb24gIDMuMTEuMFxuXHQgKi9cblx0YWRkX3JvdzogZnVuY3Rpb24oICRyZXBlYXRlciwgZGF0YSwgZXhwYW5kICkge1xuXG5cdFx0dmFyIHNlbGYgICAgICA9IHRoaXMsXG5cdFx0XHQkcm93cyAgICAgPSAkcmVwZWF0ZXIuZmluZCggJy5sbG1zLXJlcGVhdGVyLXJvd3MnICksXG5cdFx0XHQkbW9kZWwgICAgPSAkcmVwZWF0ZXIuZmluZCggJy5sbG1zLXJlcGVhdGVyLW1vZGVsJyApLFxuXHRcdFx0JHJvdyAgICAgID0gJG1vZGVsLmZpbmQoICcubGxtcy1yZXBlYXRlci1yb3cnICkuY2xvbmUoKSxcblx0XHRcdG5ld19pbmRleCA9ICRyZXBlYXRlci5maW5kKCAnLmxsbXMtcmVwZWF0ZXItcm93JyApLmxlbmd0aCxcblx0XHRcdGVkaXRvciAgICA9IHNlbGYucmVpbmRleCggJHJvdywgbmV3X2luZGV4ICk7XG5cblx0XHRpZiAoIGRhdGEgKSB7XG5cdFx0XHQkLmVhY2goIGRhdGEsIGZ1bmN0aW9uKCBrZXksIHZhbCApIHtcblxuXHRcdFx0XHR2YXIgJGZpZWxkID0gJHJvdy5maW5kKCAnW25hbWVePVwiJyArIGtleSArICdcIl0nICk7XG5cblx0XHRcdFx0aWYgKCAkZmllbGQuaGFzQ2xhc3MoICdsbG1zLXNlbGVjdDItc3R1ZGVudCcgKSApIHtcblx0XHRcdFx0XHQkLmVhY2goIHZhbCwgZnVuY3Rpb24oIGksIGRhdGEgKSB7XG5cdFx0XHRcdFx0XHQkZmllbGQuYXBwZW5kKCAnPG9wdGlvbiB2YWx1ZT1cIicgKyBkYXRhLmtleSArICdcIiBzZWxlY3RlZD1cInNlbGVjdGVkXCI+JyArIGRhdGEudGl0bGUgKyAnPC9vcHRpb24+JyApXG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdCRmaWVsZC50cmlnZ2VyKCAnY2hhbmdlJyApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCRmaWVsZC52YWwoIHZhbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdHNlbGYuYmluZF9yb3coICRyb3cgKTtcblx0XHR9LCAxICk7XG5cblx0XHQkcm93cy5hcHBlbmQoICRyb3cgKTtcblx0XHRpZiAoIGV4cGFuZCApIHtcblx0XHRcdCRyb3cuZmluZCggJy5sbG1zLWNvbGxhcHNpYmxlLWhlYWRlcicgKS50cmlnZ2VyKCAnY2xpY2snICk7XG5cdFx0fVxuXHRcdHRpbnlNQ0UuRWRpdG9yTWFuYWdlci5leGVjQ29tbWFuZCggJ21jZUFkZEVkaXRvcicsIHRydWUsIGVkaXRvciApO1xuXG5cdFx0JHJlcGVhdGVyLnRyaWdnZXIoICdsbG1zLW5ldy1yZXBlYXRlci1yb3cnLCB7XG5cdFx0XHQkcm93OiAkcm93LFxuXHRcdFx0ZGF0YTogZGF0YSxcblx0XHR9ICk7XG5cblx0fSxcblxuXHQvKipcblx0ICogQmluZCBET00gZXZlbnRzIGZvciBhIHNpbmdsZSByZXBlYXRlciByb3dcblx0ICpcblx0ICogQHBhcmFtICAgIG9iaiAgICRyb3cgIGpRdWVyeSBzZWxlY3RvciBmb3IgdGhlIHJvd1xuXHQgKiBAcmV0dXJuICAgdm9pZFxuXHQgKiBAc2luY2UgICAgMy4xMS4wXG5cdCAqIEB2ZXJzaW9uICAzLjEzLjBcblx0ICovXG5cdGJpbmRfcm93OiBmdW5jdGlvbiggJHJvdyApIHtcblxuXHRcdHRoaXMuYmluZF9yb3dfaGVhZGVyKCAkcm93ICk7XG5cblx0XHQkcm93LmZpbmQoICcubGxtcy1zZWxlY3QyJyApLmxsbXNTZWxlY3QyKCB7XG5cdFx0XHR3aWR0aDogJzEwMCUnLFxuXHRcdH0gKTtcblxuXHRcdCRyb3cuZmluZCggJy5sbG1zLXNlbGVjdDItc3R1ZGVudCcgKS5sbG1zU3R1ZGVudHNTZWxlY3QyKCk7XG5cblx0XHR0aGlzLm1ldGFib3hlcy5iaW5kX2RhdGVwaWNrZXJzKCAkcm93LmZpbmQoICcubGxtcy1kYXRlcGlja2VyJyApICk7XG5cdFx0dGhpcy5tZXRhYm94ZXMuYmluZF9jb250cm9sbGVycyggJHJvdy5maW5kKCAnW2RhdGEtaXMtY29udHJvbGxlcl0nICkgKTtcblx0XHQvLyB0aGlzLm1ldGFib3hlcy5iaW5kX21lcmdlX2NvZGVfYnV0dG9ucyggJHJvdy5maW5kKCAnLmxsbXMtbWVyZ2UtY29kZS13cmFwcGVyJyApICk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEJpbmQgcm93IGhlYWRlciBldmVudHNcblx0ICpcblx0ICogQHBhcmFtICAgIG9iaiAgICRyb3cgIGpRdWVyeSBzZWxlY3RvciBmb3IgdGhlIHJvd1xuXHQgKiBAcmV0dXJuICAgdm9pZFxuXHQgKiBAc2luY2UgICAgMy4xMS4wXG5cdCAqIEB2ZXJzaW9uICAzLjExLjBcblx0ICovXG5cdGJpbmRfcm93X2hlYWRlcjogZnVuY3Rpb24oICRyb3cgKSB7XG5cblx0XHQvLyBoYW5kbGUgdGhlIHRpdGxlIGZpZWxkIGJpbmRpbmdcblx0XHR2YXIgJHRpdGxlID0gJHJvdy5maW5kKCAnLmxsbXMtcmVwZWF0ZXItdGl0bGUnICksXG5cdFx0XHQkZmllbGQgPSAkcm93LmZpbmQoICcubGxtcy1jb2xsYXBzaWJsZS1oZWFkZXItdGl0bGUtZmllbGQnICk7XG5cblx0XHQkdGl0bGUuYXR0ciggJ2RhdGEtZGVmYXVsdCcsICR0aXRsZS50ZXh0KCkgKTtcblxuXHRcdCRmaWVsZC5vbiggJ2tleXVwIGZvY3Vzb3V0IGJsdXInLCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB2YWwgPSAkKCB0aGlzICkudmFsKCk7XG5cdFx0XHRpZiAoICEgdmFsICkge1xuXHRcdFx0XHR2YWwgPSAkdGl0bGUuYXR0ciggJ2RhdGEtZGVmYXVsdCcgKTtcblx0XHRcdH1cblx0XHRcdCR0aXRsZS50ZXh0KCB2YWwgKTtcblx0XHR9ICkudHJpZ2dlciggJ2tleXVwJyApO1xuXG5cdH0sXG5cblx0LyoqXG5cdCAqIEhhbmRsZSBXUCBQb3N0IGZvcm0gc3VibWlzc2lvbiB0byBlbnN1cmUgcmVwZWF0ZXJzIGFyZSBzYXZlZCBiZWZvcmUgc3VibWl0dGluZyB0aGUgZm9ybSB0byBzYXZlL3B1Ymxpc2ggdGhlIHBvc3Rcblx0ICpcblx0ICogQHBhcmFtICAgIG9iaiAgIGUgIEpTIGV2ZW50IG9iamVjdFxuXHQgKiBAcmV0dXJuICAgdm9pZFxuXHQgKiBAc2luY2UgICAgMy4xMS4wXG5cdCAqIEB2ZXJzaW9uICAzLjIzLjBcblx0ICovXG5cdGhhbmRsZV9zdWJtaXQ6IGZ1bmN0aW9uKCBlICkge1xuXG5cdFx0Ly8gZ2V0IHRoZSBidXR0b24gdXNlZCB0byBzdWJtaXQgdGhlIGZvcm1cblx0XHR2YXIgJGJ0biAgICAgPSAkKCAnI3Bvc3QgW2RhdGEtbGxtcy1jbGlja2VkPVwieWVzXCJdJyApLFxuXHRcdFx0JHNwaW5uZXIgPSAkYnRuLnBhcmVudCgpLmZpbmQoICcuc3Bpbm5lcicgKTtcblxuXHRcdGlmICggJGJ0bi5pcyggJyNwb3N0LXByZXZpZXcnICkgKSB7XG5cdFx0XHQkYnRuLnJlbW92ZUF0dHIoICdkYXRhLWxsbXMtY2xpY2tlZCcgKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHQvLyBjb3JlIFVYIHRvIHByZXZlbnQgbXVsdGktY2xpY2svb3IgdGhlIGFwcGVhcmFuY2Ugb2YgYSBkZWxheVxuXHRcdCQoICcjcG9zdCBpbnB1dFt0eXBlPVwic3VibWl0XCJdJyApLmFkZENsYXNzKCAnZGlzYWJsZWQnICkuYXR0ciggJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJyApO1xuXHRcdCRzcGlubmVyLmFkZENsYXNzKCAnaXMtYWN0aXZlJyApO1xuXG5cdFx0dmFyIHNlbGYgPSB3aW5kb3cubGxtcy5tZXRhYm94ZXMucmVwZWF0ZXJzLFxuXHRcdFx0aSAgICA9IDAsXG5cdFx0XHR3YWl0O1xuXG5cdFx0c2VsZi4kcmVwZWF0ZXJzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0c2VsZi5zYXZlKCAkKCB0aGlzICkgKTtcblx0XHR9ICk7XG5cblx0XHR3YWl0ID0gc2V0SW50ZXJ2YWwoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRpZiAoIGkgPj0gNTkgfHwgISAkKCAnLmxsbXMtbWItbGlzdC5yZXBlYXRlci5wcm9jZXNzaW5nJyApLmxlbmd0aCApIHtcblxuXHRcdFx0XHRjbGVhckludGVydmFsKCB3YWl0ICk7XG5cdFx0XHRcdCQoICcjcG9zdCcgKS5vZmYoICdzdWJtaXQnLCB0aGlzLmhhbmRsZV9zdWJtaXQgKTtcblx0XHRcdFx0JHNwaW5uZXIucmVtb3ZlQ2xhc3MoICdpcy1hY3RpdmUnICk7XG5cdFx0XHRcdCRidG4ucmVtb3ZlQ2xhc3MoICdkaXNhYmxlZCcgKS5yZW1vdmVBdHRyKCAnZGlzYWJsZWQnICkudHJpZ2dlciggJ2NsaWNrJyApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGkrKztcblxuXHRcdFx0fVxuXG5cdFx0fSwgMTAwMCApO1xuXG5cdH0sXG5cblx0LyoqXG5cdCAqIExvYWQgcmVwZWF0ZXIgZGF0YSBmcm9tIHRoZSBzZXJ2ZXIgYW5kIGNyZWF0ZSByb3dzIGluIHRoZSBET01cblx0ICpcblx0ICogQHJldHVybiAgIHZvaWRcblx0ICogQHNpbmNlICAgIDMuMTEuMFxuXHQgKiBAdmVyc2lvbiAgMy4xMi4xXG5cdCAqL1xuXHRsb2FkOiBmdW5jdGlvbigpIHtcblxuXHRcdHZhciBzZWxmID0gdGhpcztcblxuXHRcdHNlbGYuJHJlcGVhdGVycy5lYWNoKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0dmFyICRyZXBlYXRlciA9ICQoIHRoaXMgKTtcblxuXHRcdFx0Ly8gZW5zdXJlIHRoZSByZXBlYXRlciBpcyBvbmx5IGxvYWRlZCBvbmNlIHRvIHByZXZlbnQgZHVwbGljYXRlcyByZXN1bHRpbmcgZnJvbSBkdXBsaWNhdGluZyBiaW5kaW5nXG5cdFx0XHQvLyBvbiBjZXJ0YWluIHNpdGVzIHdoaWNoIEkgY2Fubm90IHF1aXRlIGV4cGxhaW4uLi5cblx0XHRcdGlmICggJHJlcGVhdGVyLmhhc0NsYXNzKCAnaXMtbG9hZGVkJyApIHx8ICRyZXBlYXRlci5oYXNDbGFzcyggJ3Byb2Nlc3NpbmcnICkgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0c2VsZi5zdG9yZSggJHJlcGVhdGVyLCAnbG9hZCcsIGZ1bmN0aW9uKCBkYXRhICkge1xuXG5cdFx0XHRcdCRyZXBlYXRlci5hZGRDbGFzcyggJ2lzLWxvYWRlZCcgKTtcblxuXHRcdFx0XHQkLmVhY2goIGRhdGEuZGF0YSwgZnVuY3Rpb24oIGksIG9iaiApIHtcblx0XHRcdFx0XHRzZWxmLmFkZF9yb3coICRyZXBlYXRlciwgb2JqLCBmYWxzZSApO1xuXHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0Ly8gZm9yIGVhY2ggcm93IHdpdGhpbiB0aGUgcmVwZWF0ZXJcblx0XHRcdFx0JHJlcGVhdGVyLmZpbmQoICcubGxtcy1yZXBlYXRlci1yb3dzIC5sbG1zLXJlcGVhdGVyLXJvdycgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRzZWxmLmJpbmRfcm93KCAkKCB0aGlzICkgKTtcblx0XHRcdFx0fSApO1xuXG5cdFx0XHR9ICk7XG5cblx0XHR9ICk7XG5cblx0fSxcblxuXHQvKipcblx0ICogUmVpbmRleCBhIHJvd1xuXHQgKiByZW5hbWVzIGlkcywgYXR0cnMsIGFuZCBldGMuLi5cblx0ICogVXNlZCB3aGVuIGNsb25pbmcgdGhlIG1vZGVsIGZvciBuZXcgcm93c1xuXHQgKlxuXHQgKiBAcGFyYW0gICAgb2JqICAgICAgICAgICRyb3cgIGpRdWVyeSBzZWxlY3RvciBmb3IgdGhlIHJvd1xuXHQgKiBAcGFyYW0gICAgaW50fHN0cmluZyAgIGluZGV4ICBpbmRleCAob3IgaWQpIHRvIHVzZSB3aGVuIHJlbmFtaW5nXG5cdCAqIEByZXR1cm4gICBzdHJpbmdcblx0ICogQHNpbmNlICAgIDMuMTEuMFxuXHQgKiBAdmVyc2lvbiAgMy4xMS4wXG5cdCAqL1xuXHRyZWluZGV4OiBmdW5jdGlvbiggJHJvdywgaW5kZXggKSB7XG5cblx0XHR2YXIgb2xkX2luZGV4ID0gJHJvdy5hdHRyKCAnZGF0YS1yb3ctb3JkZXInICksXG5cdFx0XHQkZWQgICAgICAgPSAkcm93LmZpbmQoICcubGxtcy1tYi1saXN0LmVkaXRvciB0ZXh0YXJlYScgKTtcblxuXHRcdHRpbnlNQ0UuRWRpdG9yTWFuYWdlci5leGVjQ29tbWFuZCggJ21jZVJlbW92ZUVkaXRvcicsIHRydWUsICRlZC5hdHRyKCAnaWQnICkgKTtcblxuXHRcdGZ1bmN0aW9uIHJlcGxhY2VfYXR0ciggJGVsLCBhdHRyICkge1xuXHRcdFx0JGVsLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgc3RyID0gJCggdGhpcyApLmF0dHIoIGF0dHIgKTtcblx0XHRcdFx0JCggdGhpcyApLmF0dHIoIGF0dHIsIHN0ci5yZXBsYWNlKCBvbGRfaW5kZXgsIGluZGV4ICkgKTtcblx0XHRcdH0gKTtcblx0XHR9O1xuXG5cdFx0JHJvdy5hdHRyKCAnZGF0YS1yb3ctb3JkZXInLCBpbmRleCApO1xuXG5cdFx0cmVwbGFjZV9hdHRyKCAkcm93LCAnZGF0YS1yb3ctb3JkZXInICk7XG5cblx0XHRyZXBsYWNlX2F0dHIoICRyb3cuZmluZCggJ2J1dHRvbi5pbnNlcnQtbWVkaWEnICksICdkYXRhLWVkaXRvcicgKTtcblxuXHRcdHJlcGxhY2VfYXR0ciggJHJvdy5maW5kKCAnaW5wdXRbbmFtZV49XCJfbGxtc1wiXSwgdGV4dGFyZWFbbmFtZV49XCJfbGxtc1wiXSwgc2VsZWN0W25hbWVePVwiX2xsbXNcIl0nICksICdpZCcgKTtcblx0XHRyZXBsYWNlX2F0dHIoICRyb3cuZmluZCggJ2lucHV0W25hbWVePVwiX2xsbXNcIl0sIHRleHRhcmVhW25hbWVePVwiX2xsbXNcIl0sIHNlbGVjdFtuYW1lXj1cIl9sbG1zXCJdJyApLCAnbmFtZScgKTtcblx0XHRyZXBsYWNlX2F0dHIoICRyb3cuZmluZCggJ1tkYXRhLWNvbnRyb2xsZXJdJyApLCAnZGF0YS1jb250cm9sbGVyJyApO1xuXHRcdHJlcGxhY2VfYXR0ciggJHJvdy5maW5kKCAnW2RhdGEtY29udHJvbGxlcl0nICksICdkYXRhLWNvbnRyb2xsZXInICk7XG5cdFx0cmVwbGFjZV9hdHRyKCAkcm93LmZpbmQoICdidXR0b24ud3Atc3dpdGNoLWVkaXRvcicgKSwgJ2RhdGEtd3AtZWRpdG9yLWlkJyApO1xuXHRcdHJlcGxhY2VfYXR0ciggJHJvdy5maW5kKCAnYnV0dG9uLndwLXN3aXRjaC1lZGl0b3InICksICdpZCcgKTtcblx0XHRyZXBsYWNlX2F0dHIoICRyb3cuZmluZCggJy53cC1lZGl0b3ItdG9vbHMnICksICdpZCcgKTtcblx0XHRyZXBsYWNlX2F0dHIoICRyb3cuZmluZCggJy53cC1lZGl0b3ItY29udGFpbmVyJyApLCAnaWQnICk7XG5cblx0XHRyZXR1cm4gJGVkLmF0dHIoICdpZCcgKTtcblxuXHR9LFxuXG5cdC8qKlxuXHQgKiBTYXZlIGEgc2luZ2xlIHJlcGVhdGVycyBkYXRhIHRvIHRoZSBzZXJ2ZXJcblx0ICpcblx0ICogQHBhcmFtICAgIG9iaiAgICRyZXBlYXRlciAgalF1ZXJ5IHNlbGVjdG9yIGZvciBhIHJlcGVhdGVyIGVsZW1lbnRcblx0ICogQHJldHVybiAgIHZvaWRcblx0ICogQHNpbmNlICAgIDMuMTEuMFxuXHQgKiBAdmVyc2lvbiAgMy4xMy4wXG5cdCAqL1xuXHRzYXZlOiBmdW5jdGlvbiggJHJlcGVhdGVyICkge1xuXHRcdCRyZXBlYXRlci50cmlnZ2VyKCAnbGxtcy1yZXBlYXRlci1iZWZvcmUtc2F2ZScsIHsgJGVsOiAkcmVwZWF0ZXIgfSApO1xuXHRcdHRoaXMuc3RvcmUoICRyZXBlYXRlciwgJ3NhdmUnICk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIENvbnZlcnQgYSByZXBlYXRlciBlbGVtZW50IGludG8gYW4gYXJyYXkgb2Ygb2JqZWN0cyB0aGF0IGNhbiBiZSBzYXZlZCB0byB0aGUgZGF0YWJhc2Vcblx0ICpcblx0ICogQHBhcmFtICAgIG9iaiAgICRyZXBlYXRlciAgalF1ZXJ5IHNlbGVjdG9yIGZvciBhIHJlcGVhdGVyIGVsZW1lbnRcblx0ICogQHJldHVybiAgIHZvaWRcblx0ICogQHNpbmNlICAgIDMuMTEuMFxuXHQgKiBAdmVyc2lvbiAgMy4xMS4wXG5cdCAqL1xuXHRzZXJpYWxpemU6IGZ1bmN0aW9uKCAkcmVwZWF0ZXIgKSB7XG5cblx0XHR2YXIgcm93cyA9IFtdO1xuXG5cdFx0JHJlcGVhdGVyLmZpbmQoICcubGxtcy1yZXBlYXRlci1yb3dzIC5sbG1zLXJlcGVhdGVyLXJvdycgKS5lYWNoKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0dmFyIG9iaiA9IHt9O1xuXG5cdFx0XHQvLyBlYXN5Li4uXG5cdFx0XHQkKCB0aGlzICkuZmluZCggJ2lucHV0W25hbWVePVwiX2xsbXNcIl0sIHNlbGVjdFtuYW1lXj1cIl9sbG1zXCJdJyApLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRvYmpbICQoIHRoaXMgKS5hdHRyKCAnbmFtZScgKSBdID0gJCggdGhpcyApLnZhbCgpO1xuXHRcdFx0fSApO1xuXG5cdFx0XHQvLyBjaGVjayBpZiB0aGUgdGV4dGFyZWEgaXMgYSB0aW55TUNFIGluc3RhbmNlXG5cdFx0XHQkKCB0aGlzICkuZmluZCggJ3RleHRhcmVhW25hbWVePVwiX2xsbXNcIl0nICkuZWFjaCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0dmFyIG5hbWUgPSAkKCB0aGlzICkuYXR0ciggJ25hbWUnICk7XG5cblx0XHRcdFx0Ly8gaWYgaXQgaXMgYW4gZWRpdG9yXG5cdFx0XHRcdGlmICggdGlueU1DRS5lZGl0b3JzWyBuYW1lIF0gKSB7XG5cdFx0XHRcdFx0b2JqWyBuYW1lIF0gPSB0aW55TUNFLmVkaXRvcnNbIG5hbWUgXS5nZXRDb250ZW50KCk7XG5cdFx0XHRcdFx0Ly8gZ3JhYiB0aGUgdmFsIG9mIHRoZSB0ZXh0YXJlYVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdG9ialsgbmFtZSBdID0gJCggdGhpcyApLnZhbCgpO1xuXHRcdFx0XHR9XG5cblx0XHRcdH0gKTtcblxuXHRcdFx0cm93cy5wdXNoKCBvYmogKTtcblxuXHRcdH0gKTtcblxuXHRcdHJldHVybiByb3dzO1xuXG5cdH0sXG5cblx0LyoqXG5cdCAqIEFKQVggbWV0aG9kIGZvciBpbnRlcmFjdGluZyB3aXRoIHRoZSByZXBlYXRlcidzIGhhbmRsZXIgb24gdGhlIHNlcnZlclxuXHQgKlxuXHQgKiBAcGFyYW0gICAgb2JqICAgICAgICRyZXBlYXRlciAgalF1ZXJ5IHNlbGVjdG9yIGZvciB0aGUgcmVwZWF0ZXIgZWxlbWVudFxuXHQgKiBAcGFyYW0gICAgc3RyaW5nICAgIGFjdGlvbiAgICAgYWN0aW9uIHRvIGNhbGwgW3NhdmV8bG9hZF1cblx0ICogQHBhcmFtICAgIGZ1bmN0aW9uICBjYiAgICAgICAgIGNhbGxiYWNrIGZ1bmN0aW9uXG5cdCAqIEByZXR1cm4gICB2b2lkXG5cdCAqIEBzaW5jZSAgICAzLjExLjBcblx0ICogQHZlcnNpb24gIDMuMTEuMFxuXHQgKi9cblx0c3RvcmU6IGZ1bmN0aW9uKCAkcmVwZWF0ZXIsIGFjdGlvbiwgY2IgKSB7XG5cblx0XHRjYiAgICAgICA9IGNiIHx8IGZ1bmN0aW9uKCl7fTtcblx0XHR2YXIgc2VsZiA9IHRoaXMsXG5cdFx0XHRkYXRhID0ge1xuXHRcdFx0XHRhY3Rpb246ICRyZXBlYXRlci5maW5kKCAnLmxsbXMtcmVwZWF0ZXItZmllbGQtaGFuZGxlcicgKS52YWwoKSxcblx0XHRcdFx0c3RvcmVfYWN0aW9uOiBhY3Rpb24sXG5cdFx0fTtcblxuXHRcdGlmICggJ3NhdmUnID09PSBhY3Rpb24gKSB7XG5cdFx0XHRkYXRhLnJvd3MgPSBzZWxmLnNlcmlhbGl6ZSggJHJlcGVhdGVyICk7XG5cdFx0fVxuXG5cdFx0TExNUy5BamF4LmNhbGwoIHtcblx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRiZWZvcmVTZW5kOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQkcmVwZWF0ZXIuYWRkQ2xhc3MoICdwcm9jZXNzaW5nJyApO1xuXHRcdFx0XHRMTE1TLlNwaW5uZXIuc3RhcnQoICRyZXBlYXRlciApO1xuXG5cdFx0XHR9LFxuXHRcdFx0c3VjY2VzczogZnVuY3Rpb24oIHIgKSB7XG5cblx0XHRcdFx0Y2IoIHIgKTtcblx0XHRcdFx0TExNUy5TcGlubmVyLnN0b3AoICRyZXBlYXRlciApO1xuXHRcdFx0XHQkcmVwZWF0ZXIucmVtb3ZlQ2xhc3MoICdwcm9jZXNzaW5nJyApO1xuXG5cdFx0XHR9XG5cblx0XHR9ICk7XG5cblx0fVxuXG59O1xudGhpcy5yZXBlYXRlcnMuaW5pdCgpO1xuIl19
