!function(i){window.llms=window.llms||{};window.llms.admin_tables=new function(){this.$tables=null,this.init=function(){var t=this;t.$tables=i(".llms-gb-table"),t.$tables.length&&t.bind()},this.bind=function(){var a=this;this.$tables.each(function(){var e=i(this);e.on("click",'button[name="llms-table-paging"]',function(t){t.preventDefault(),a.change_page(e,i(this))}),e.on("click",'button[name="llms-table-export"]',function(t){t.preventDefault(),a.export(e,i(this))}),e.on("click","a.llms-sortable",function(t){t.preventDefault(),a.change_order(e,i(this))}),e.parent().find(".llms-table-filters").on("change","select.llms-table-filter",function(t){a.change_filter(e,i(this))}),e.parent().find(".llms-table-search").on("keyup","input",function(a,n){var r=null;return function(){var t=this,e=arguments;window.clearTimeout(r),r=window.setTimeout(function(){a.apply(t,e)},n)}}(function(t){switch(t.keyCode){case 37:case 38:case 39:case 40:return;default:a.search(e,i(this))}},250))})},this.change_order=function(t,e){this.reload(t,{order:e.attr("data-order"),orderby:e.attr("data-orderby"),page:1})},this.change_filter=function(t,e){this.reload(t,{filter:e.val(),filterby:e.attr("name"),page:1})},this.change_page=function(t,e){this.reload(t,{order:this.get_args(t,"order"),orderby:this.get_args(t,"orderby"),page:e.attr("data-page")})},this.export=function(t,a,e){var n=this,r=t.find(".llms-table-export .llms-table-export-msg"),s=t.find(".llms-table-export .llms-table-progress");function l(){LLMS.Spinner.stop(a,"small"),a.removeAttr("disabled")}LLMS.Ajax.call({data:i.extend({action:"export_admin_table",handler:t.attr("data-handler"),filename:e},JSON.parse(t.attr("data-args"))),beforeSend:function(){a.attr("disabled")||(a.attr("disabled","disabled"),LLMS.Spinner.start(a,"small"))},error:function(t,e,a){var n=LLMS.l10n.translate("An error was encountered generating the export");l(),s.hide(),r.html('<span class="llms-error">'+n+": "+a+"</span>"),console.error(t)},success:function(e){!e.success&&e.message?(l(),s.hide(),r.html('<span class="llms-error">'+e.message+"</span>")):e.success&&e.data&&e.data.progress&&(r.html(""),s.is("visible")||100===e.data.progress||s.css("display","inline-block"),s.find(".llms-table-progress-text").text(e.data.progress+"%"),s.find(".llms-table-progress-inner").css("width",e.data.progress+"%"),100!==e.data.progress?n.export(t,a,e.data.filename):setTimeout(function(){var t="llms-dl-export";i("#"+t).remove(),i("<a />",{id:t,href:e.data.url,style:"display: hidden;",download:""}).appendTo("body"),i("#"+t)[0].click(),l(),s.hide()},1e3))}})},this.get_args=function(t,e){var a=JSON.parse(t.attr("data-args"));return e?!!a[e]&&a[e]:a},this.reload=function(e,t){t=i.extend({action:"get_admin_table_data",handler:e.attr("data-handler")},JSON.parse(e.attr("data-args")),t),LLMS.Ajax.call({data:t,beforeSend:function(){LLMS.Spinner.start(e.closest(".llms-table-wrap"))},success:function(t){LLMS.Spinner.stop(e.closest(".llms-table-wrap")),t.success&&(e.attr("data-args",t.data.args),e.find("thead").replaceWith(t.data.thead),e.find("tbody").replaceWith(t.data.tbody),e.find("tfoot").replaceWith(t.data.tfoot))}})},this.search=function(t,e){var a=e.val();len=a.length,(0===len||3<=len)&&this.reload(t,{page:1,search:e.val()})},this.init()}}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
