var LLMS=window.LLMS||{};!function(t){"use strict";LLMS.Achievements={init:function(){var e=this;t(".llms-achievement")&&t(document).on("ready",function(){e.bind(),e.maybe_open()})},bind:function(){var e=this;t(".llms-achievement").each(function(){e.create_modal(t(this))}),t(".llms-achievement").on("click",function(){var s=t(this),n="achievement-"+s.attr("data-id"),i=t("#"+n);i.length||e.create_modal(s),i.iziModal("open")})},create_modal:function(e){var s="achievement-"+e.attr("data-id"),n=t("#"+s);n.length||(n=t('<div class="llms-achievement-modal" id="'+s+'" />'),t("body").append(n)),n.iziModal({headerColor:"#3a3a3a",group:"achievements",history:!0,loop:!0,overlayColor:"rgba( 0, 0, 0, 0.6 )",transitionIn:"fadeInDown",transitionOut:"fadeOutDown",width:340,onOpening:function(t){t.setTitle(e.find(".llms-achievement-title").html()),t.setSubtitle(e.find(".llms-achievement-date").html()),t.setContent('<div class="llms-achievement">'+e.html()+"</div>")},onClosing:function(){window.history.pushState("",document.title,window.location.pathname+window.location.search)}})},maybe_open:function(){var e=window.location.hash;e&&-1!==e.indexOf("achievement-")&&t('a[href="'+e+'"]').first().trigger("click")}},LLMS.Ajax={url:window.ajaxurl||window.llms.ajaxurl,type:"post",data:[],cache:!1,dataType:"json",async:!0,response:[],init:function(e){if(null===e||"object"!=typeof e)return!1;e.url=this.url,e.type="type"in e?e.type:this.type,e.data="data"in e?e.data:this.data,e.cache="cache"in e?e.cache:this.cache,e.dataType="dataType"in e?e.dataType:this.dataType,e.async="async"in e?e.async:this.async,e.data._ajax_nonce=wp_ajax_data.nonce;var s=LLMS.Rest,n=s.get_query_vars();return e.data.post_id="post"in n?n.post:null,!e.data.post_id&&t("input#post_ID").length&&(e.data.post_id=t("input#post_ID").val()),e},call:function(t){var e=this.init(t);return!!e&&(this.request(e),this)},request:function(e){return t.ajax(e),this}},LLMS.Donut=function(e){function s(e){this.settings=t.extend({element:e.element,percent:100},e),this.circle=this.settings.element.find("path"),this.settings.stroke_width=parseInt(this.circle.css("stroke-width")),this.radius=(parseInt(this.settings.element.css("width"))-this.settings.stroke_width)/2,this.angle=-97.5,this.i=Math.round(.75*this.settings.percent),this.first=!0,this.animate=function(){this.timer=setInterval(this.loop.bind(this),10)},this.loop=function(){this.angle+=5,this.angle%=360;var t,e=this.angle/180*Math.PI,s=this.radius+this.settings.stroke_width/2+Math.cos(e)*this.radius,n=this.radius+this.settings.stroke_width/2+Math.sin(e)*this.radius;this.first===!0?(t=this.circle.attr("d")+" M "+s+" "+n,this.first=!1):t=this.circle.attr("d")+" L "+s+" "+n,this.circle.attr("d",t),this.i--,this.i<=0&&clearInterval(this.timer)}}function n(t){var e='<path d="M100,100" />';t.append('<svg preserveAspectRatio="xMidYMid" xmlns:xlink="http://www.w3.org/1999/xlink">'+e+"</svg>");var n=new s({element:t,percent:t.attr("data-perc")});n.animate()}n(e)},LLMS.Instructors={init:function(){var e=this;t("body").hasClass("wp-admin")||t(".llms-instructors").length&&LLMS.wait_for_matchHeight(function(){e.bind()})},bind:function(){t(".llms-instructors .llms-author").matchHeight()}},LLMS.l10n=LLMS.l10n||{},LLMS.l10n.translate=function(t){var e=this;return e.strings[t]?e.strings[t]:t},LLMS.l10n.replace=function(e,s){var n=this.translate(e);return t.each(s,function(t,e){-1!==t.indexOf("s")?e=e.toString():-1!==t.indexOf("d")&&(e=1*e),n=n.replace(t,e)}),n},LLMS.LessonPreview={$els:null,init:function(){var e=this;this.$locked=t('a[href="#llms-lesson-locked"]'),this.$locked.length&&e.bind(),t(".llms-course-navigation").length&&LLMS.wait_for_matchHeight(function(){e.match_height()})},bind:function(){var e=this;this.$locked.on("click",function(){return!1}),this.$locked.on("mouseenter",function(){var s=t(this).find(".llms-tooltip");if(!s.length){var n=t(this).attr("data-tooltip-msg");n||(n=LLMS.l10n.translate("You do not have permission to access this content")),s=e.get_tooltip(n),t(this).append(s)}setTimeout(function(){s.addClass("show")},10)}),this.$locked.on("mouseleave",function(){var e=t(this).find(".llms-tooltip");e.removeClass("show")})},match_height:function(){t(".llms-course-navigation .llms-lesson-link").matchHeight()},get_tooltip:function(e){var s=t('<div class="llms-tooltip" />');return s.append('<div class="llms-tooltip-content">'+e+"</div>"),s}},LLMS.Loops={init:function(){var e=this;t(".llms-loop").length&&LLMS.wait_for_matchHeight(function(){e.match_height()})},match_height:function(){t(".llms-loop-item .llms-loop-item-content").matchHeight(),t(".llms-achievement-loop-item .llms-achievement").matchHeight(),t(".llms-certificate-loop-item .llms-certificate").matchHeight()}},LLMS.OutlineCollapse={$outlines:null,init:function(){this.$outlines=t(".llms-widget-syllabus--collapsible"),this.$outlines.length&&this.bind()},bind:function(){var e=this;this.$outlines.each(function(){var s=t(this),n=s.find(".llms-section .section-header");n.on("click",function(s){s.preventDefault();var n=t(this),i=n.closest(".llms-section"),o=e.get_section_state(i);switch(o){case"closed":e.open_section(i);break;case"opened":e.close_section(i)}}),s.find(".llms-collapse-toggle").on("click",function(s){s.preventDefault();var i=t(this),o=i.attr("data-action"),a="close"===o?"opened":"closed";n.each(function(){var s=t(this).closest(".llms-section"),n=e.get_section_state(s);if(a!==n)return!0;switch(n){case"closed":e.close_section(s);break;case"opened":e.open_section(s)}t(this).trigger("click")})})})},close_section:function(t){t.removeClass("llms-section--opened").addClass("llms-section--closed")},open_section:function(t){t.removeClass("llms-section--closed").addClass("llms-section--opened")},get_section_state:function(t){return t.hasClass("llms-section--opened")?"opened":"closed"}},t.extend(LLMS.PasswordStrength,{$pass:t(".llms-password"),$conf:t(".llms-password-confirm"),$meter:t(".llms-password-strength-meter"),$form:null,init:function(){if(!t("body").hasClass("wp-admin")&&this.$meter.length){this.$form=this.$pass.closest("form");var e,s=this,n=0;e=setInterval(function(){if(n>=300)console.log("cannot do password strength meter.");else{if("undefined"==typeof wp&&"undefined"==typeof wp.passwordStrength)return void n++;s.bind(),s.$form.trigger("llms-password-strength-ready")}clearInterval(e)},100)}},bind:function(){var t=this;this.$form.hasClass("llms-checkout")||this.$form.on("submit",t,t.submit),t.$pass.add(t.$conf).on("keyup",function(){t.check_strength()})},check_strength:function(){var t=this.$pass.closest(".llms-form-field"),e=this.$conf.closest(".llms-form-field"),s=this.$pass.val().length,n=this.$conf.val().length;return s||n?(this.get_current_strength_status()?(t.removeClass("invalid").addClass("valid"),n&&e.removeClass("invalid").addClass("valid")):(t.removeClass("valid").addClass("invalid"),n&&e.removeClass("valid").addClass("invalid")),this.$meter.removeClass("too-short very-weak weak medium strong mismatch"),this.$meter.show().addClass(this.get_current_strength("slug")),void this.$meter.html(this.get_current_strength("text"))):(t.removeClass("valid invalid"),e.removeClass("valid invalid"),void this.$meter.hide())},checkout:function(t,e){e(t.get_current_strength_status()?!0:LLMS.l10n.translate("There is an issue with your chosen password."))},get_blacklist:function(){var t=wp.passwordStrength.userInputBlacklist();return t},get_current_strength:function(t){t=t||"int";var e,s=this.$pass.val(),n=this.$conf.val();return s.length<6?e=-1:(e=wp.passwordStrength.meter(s,this.get_blacklist(),n),0===e&&(e=1)),"slug"===t?this.get_strength_slug(e):"text"===t?this.get_strength_text(e):e},get_current_strength_status:function(){var t=this.get_current_strength(),e=this.get_strength_value(this.get_minimum_strength());return 5!==t&&t>=e},get_strength_slug:function(t){var e={"-1":"too-short",1:"very-weak",2:"weak",3:"medium",4:"strong",5:"mismatch"};return e[t]?e[t]:e[5]},get_strength_text:function(t){var e={"-1":LLMS.l10n.translate("Too Short"),1:LLMS.l10n.translate("Very Weak"),2:LLMS.l10n.translate("Weak"),3:LLMS.l10n.translate("Medium"),4:LLMS.l10n.translate("Strong"),5:LLMS.l10n.translate("Mismatch")};return e[t]?e[t]:e[5]},get_strength_value:function(t){var e={"too-short":-1,"very-weak":1,weak:2,medium:3,strong:4,mismatch:5};return e[t]?e[t]:e.mismatch},submit:function(e){var s=e.data;e.preventDefault(),s.$pass.trigger("keyup"),s.get_current_strength_status()?(s.$form.off("submit",s.submit),s.$form.trigger("submit")):(t("html, body").animate({scrollTop:s.$meter.offset().top-100},200),s.$meter.hide(),setTimeout(function(){s.$meter.fadeIn(400)},220))}}),LLMS.Pricing_Tables={init:function(){var e=this;t("body").hasClass("wp-admin")||t(".llms-access-plans").length&&(LLMS.wait_for_matchHeight(function(){e.bind()}),this.$locked=t('a[href="#llms-plan-locked"]'),this.$locked.length&&LLMS.wait_for_popover(function(){e.bind_locked()}))},bind:function(){t(".llms-access-plan-content").matchHeight(),t(".llms-access-plan-pricing.trial").matchHeight()},bind_locked:function(){this.$locked.each(function(){t(this).webuiPopover({animation:"pop",closeable:!0,content:function(e){var s=t('<div class="llms-members-only-restrictions" />');return s.append(e.$element.closest(".llms-access-plan").find(".llms-access-plan-restrictions ul").clone()),s},placement:"top",style:"inverse",title:LLMS.l10n.translate("Members Only Pricing"),width:"280px"})})}},LLMS.Review={init:function(){this.bind()},bind:function(){t("#llms_review_submit_button").click(function(){""!==t("#review_title").val()&&""!==t("#review_text").val()?jQuery.ajax({type:"post",dataType:"json",url:window.llms.ajaxurl,data:{action:"LLMSSubmitReview",review_title:t("#review_title").val(),review_text:t("#review_text").val(),pageID:t("#post_ID").val()},success:function(){console.log("Review success"),t("#review_box").hide("swing"),t("#thank_you_box").show("swing")},error:function(t,e,s){console.log(t),console.log(e),console.log(s)}}):(""===t("#review_title").val()?t("#review_title_error").show("swing"):t("#review_title_error").hide("swing"),""===t("#review_text").val()?t("#review_text_error").show("swing"):t("#review_text_error").hide("swing"))}),t("#_llms_display_reviews").attr("checked")?(t(".llms-num-reviews-top").addClass("top"),t(".llms-num-reviews-bottom").show()):t(".llms-num-reviews-bottom").hide(),t("#_llms_display_reviews").change(function(){t("#_llms_display_reviews").attr("checked")?(t(".llms-num-reviews-top").addClass("top"),t(".llms-num-reviews-bottom").show()):(t(".llms-num-reviews-top").removeClass("top"),t(".llms-num-reviews-bottom").hide())})}},LLMS.Spinner={get:function(e,s){var n=e.find(".llms-spinning").first();return n.length||(s=s?s:"default",n=t('<div class="llms-spinning"><i class="llms-spinner '+s+'"></i></div>'),e.append(n)),n},start:function(e,s){var n=this;e.each(function(){n.get(t(this),s).show()})},stop:function(e){var s=this;e.each(function(){s.get(t(this)).hide()})}},LLMS.StudentDashboard={screen:"",meter_exists:0,init:function(){t(".llms-student-dashboard").length&&(this.meter_exists=t(".llms-password-strength-meter").length,this.bind(),"orders"===this.get_screen()&&this.bind_orders())},bind:function(){var e=this,s=t('.llms-student-dashboard a[href="#llms-password-change-toggle"]');s.on("click",function(s){s.preventDefault();var n=t(this),i=n.text(),o=n.attr("data-action"),a="hide"===o?"show":"hide",r=n.attr("data-text");e.password_toggle(o),"show"===o?n.attr("tabindex","-777"):n.removeAttr("tabindex"),n.attr("data-action",a).attr("data-text",i).text(r)}),this.meter_exists?t(".llms-person-form.edit-account").on("llms-password-strength-ready",function(){e.password_toggle("hide")}):e.password_toggle("hide"),t(".llms-donut").each(function(){LLMS.Donut(t(this))})},bind_orders:function(){t("#llms-cancel-subscription-form").on("submit",this.order_cancel_warning),t("#llms_update_payment_method").on("click",function(){t('input[name="llms_payment_gateway"]:checked').trigger("change"),t(this).closest("form").find(".llms-switch-payment-source-main").slideToggle("200")})},get_screen:function(){return this.screen||(this.screen=t(".llms-student-dashboard").attr("data-current")),this.screen},order_cancel_warning:function(e){e.preventDefault();var s=LLMS.l10n.translate("Are you sure you want to cancel your subscription?");window.confirm(LLMS.l10n.translate(s))&&(t(this).off("submit",this.order_cancel_warning),t(this).submit())},password_toggle:function(e){e||(e="show");var s=this,n=t("#password, #password_confirm, #current_password"),i=t("#password").closest("form");t(".llms-change-password")[e](),"show"===e?(n.attr("required","required"),s.meter_exists&&i.on("submit",LLMS.PasswordStrength,LLMS.PasswordStrength.submit)):(n.removeAttr("required").val(""),s.meter_exists&&(i.off("submit",LLMS.PasswordStrength.submit),LLMS.PasswordStrength.check_strength()))}},LLMS.Rest={init:function(){this.bind()},bind:function(){},is_path:function(t){for(var e=!1,s=window.location.href,n=0;n<t.length;n++)s.search(t[n])>0&&!e&&(e=!0);return e},get_query_vars:function(){for(var t,e=[],s=window.location.href.slice(window.location.href.indexOf("?")+1).split("&"),n=0;n<s.length;n++)t=s[n].split("="),e.push(t[0]),e[t[0]]=t[1];return e}},LLMS.init=function(){for(var t in LLMS)"object"==typeof LLMS[t]&&null!==LLMS[t]&&void 0!==LLMS[t].init&&"function"==typeof LLMS[t].init&&LLMS[t].init()},LLMS.is_touch_device=function(){var t=" -webkit- -moz- -o- -ms- ".split(" "),e=function(t){return window.matchMedia(t).matches};if("ontouchstart"in window||window.DocumentTouch&&document instanceof DocumentTouch)return!0;var s=["(",t.join("touch-enabled),("),"heartz",")"].join("");return e(s)},LLMS.wait_for_matchHeight=function(e){this.wait_for(function(){return void 0!==t.fn.matchHeight},e)},LLMS.wait_for_popover=function(e){this.wait_for(function(){return void 0!==t.fn.webuiPopover},e)},LLMS.wait_for=function(t,e){var s,n=0;s=setInterval(function(){if(n>=300)console.log("could not load dependency");else{if(!t())return console.log("waiting..."),void n++;e()}clearInterval(s)},100)},LLMS.init(t)}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
