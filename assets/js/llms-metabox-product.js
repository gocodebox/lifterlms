/**
 * Product Options MetaBox
 * Displays on Course & Membership Post Types
 *
 * @since    3.0.0
 * @version  3.6.0
 */
( function( $ ) {

	window.llms = window.llms || {};

	window.llms.metabox_product = function() {

		/**
		 * A randomly generated temporary ID used for the tinyMCE editor's id
		 * when a new plan is added
		 * @type int
		 */
		this.temp_id = Math.floor( ( Math.random() * 7777 ) + 777 );

		/**
		 * Initialize
		 *
		 * @return  void
		 * @since   3.0.0
		 * @version 3.6.0
		 */
		this.init = function() {

			this.bind_visibility();

			var $mb = $( '#lifterlms-product #llms-product-options-access-plans' );

			if ( ! $mb.length ) {
				return;
			}

			LLMS.Spinner.start( $mb );

			// we rely on TinyMCE but WordPress doesn't register TinyMCE
			// like every other admin script so we'll do a little dependency check here...
			var self = this,
				counter = 0,
				interval;

			interval = setInterval( function() {

				// if we get to 30 seconds display an error message
				if ( counter >= 300 ) {

					$mb.html( LLMS.l10n.translate( 'There was an error loading the necessary resources. Please try again.' ) );

				}
				// if we can't access tinyMCE, increment and wait...
				else if ( 'undefined' === typeof tinyMCE ) {

					counter++;
					return;

				}
				// bind the events, we're good!
				else {

					self.bind();

				}

				clearInterval( interval );
				LLMS.Spinner.stop( $mb );

			}, 100 );

		};


		/**
		 * Bind DOM Events
		 *
		 * @return void
		 * @since  3.0.0
		 */
		this.bind = function() {

			var self = this;

			// save access plans button
			// @todo convert to ajax method that doesn't reload the whole dealie
			$( '#llms-save-access-plans' ).on( 'click', function() {
				$( '#publish' ).trigger( 'click' );
			} );

			// bind change events to form element that controls another form element
			$( '#llms-access-plans' ).on( 'change', '[data-controller-id]', function() {
				self.controller_change( $( this ) );
			} )

			$( '#llms-access-plans .llms-access-plan-datepicker' ).datepicker( {
				dateFormat: "mm/dd/yy"
			} );

			// trigger changes on load for all existing plans
			$( '#llms-access-plans [data-controller-id]' ).trigger( 'change' );

			// add a new empty plan interface on new plan button click
			$( '#llms-new-access-plan' ).on( 'click', function() {
				var $el = $( this );
				self.init_plan();
				$el.attr( 'disabled', 'disabled' );
				setTimeout( function() {
					$el.removeAttr( 'disabled' );
				}, 500 );
			} );

			$( '#llms-access-plans' ).sortable( {
				handle: '.llms-drag-handle',
				items: '.llms-access-plan',
				start: function( event, ui ) {
					$( '#llms-access-plans' ).addClass( 'dragging' );
				},
				stop: function( event, ui ) {
					$( '#llms-access-plans' ).removeClass( 'dragging' );
					self.update_plan_orders();
				},
			} );

			// bind text entered into the title to the displayed title for fancy fun
			$( '#llms-access-plans' ).on( 'keyup', 'input.llms-plan-title', function( ) {

				var $input = $( this ),
					$plan = $input.closest( '.llms-access-plan' ),
					$display = $plan.find( 'span.llms-plan-title' ),
					val = $input.val(),
					title = ( val ) ? val : $display.attr( 'data-default' );

				$display.text( title );

			} );


			$( '#llms-access-plans' ).on( 'click', '.llms-plan-delete', function( e ) {
				e.stopPropagation();
				self.delete_plan( $( this ) );
			} );

			// select2ify membership availability fields
			window.llms.metaboxes.post_select( $( '#llms-access-plans .llms-availability-restrictions' ) );

			// disable the textarea generated by the wp_editor function
			// can't figure out how to do this during initialization
			$( '#_llms_plans_content_llms-new-access-plan-model' ).attr( 'disabled', 'disabled' );
			tinyMCE.EditorManager.execCommand( 'mceRemoveEditor', true, '_llms_plans_content_llms-new-access-plan-model' );

			// when the publish button is clicked loop through all plan inputs
			// which might have validation errors until we find an error, if we don't find one, it get's published
			$( '#publish' ).on( 'click', function( e ) {

				// loop
				$( '#llms-access-plans input' ).each( function() {

					// if the field is invalid
					if ( $( this ).is( ':invalid' ) ) {
						var $plan = $( this ).closest( '.llms-access-plan' );
						// check if the plan is open, open if it's not
						if ( ! $plan.hasClass( 'opened' ) ) {
							$plan.find( '.llms-collapsible-header' ).trigger( 'click' );
						}
						// exit the loop regardless bc the error msg will now be visible
						return false;
					}

				} );

			} );

		};

		/**
		 * Bind DOM events for editing product visibility
		 * @return   void
		 * @since    3.6.0
		 * @version  3.6.0
		 */
		this.bind_visibility = function() {

			var $radios = $( '#llms-catalog-visibility-select' ),
				$toggle = $( 'a.llms-edit-catalog-visibility' ),
				$save = $( 'a.llms-save-catalog-visibility' ),
				$cancel =  $( 'a.llms-cancel-catalog-visibility' );

			$toggle.on( 'click', function( e ) {
				e.preventDefault();
				$radios.slideDown( 'fast' );
				$toggle.hide();
			} );

			$save.on( 'click', function( e ) {
				e.preventDefault();
				$radios.slideUp( 'fast' );
				$toggle.show();
				$( '#llms-catalog-visibility-display' ).text( $( 'input[name="_llms_visibility"]:checked' ).attr( 'data-label' ) );
			} );

			$cancel.on( 'click', function( e ) {
				e.preventDefault();
				$radios.slideUp( 'fast' );
				$toggle.show();
			} );

		};

		/**
		 * Handle physical deletion of a plan element
		 * If the plan hasn't be persisted to the databse it's removed from the dom
		 * if it already exists in the database a confirm modal is displayed
		 * upon confirmation AJAX call will be made to move the plan to the trash
		 * and upon success the element will be removed from the dom
		 *
		 * @param  obj $btn jQuery selector of the "X" button clicked to initiate deletion
		 * @return void
		 * @since  3.0.0
		 */
		this.delete_plan = function( $btn ) {

			var self = this,
				$plan = $btn.closest( '.llms-access-plan' ),
				plan_id = $plan.attr( 'data-id' );

			// if there's no ID just remove the element from the DOM
			if ( ! plan_id ) {
				self.remove_plan_el( $plan );
			}

			// trigger a topModal so we can warn and confirm deletion of the plan
			else {

				$( '#llms-delete-plan-modal' ).topModal( {
					open: function() {
						// attach an event handler to the del button to actually delete the thing
						$( '#llms-confirm-delete-plan' ).on( 'click', function() {

							LLMS.Spinner.start( $plan, 'small' );

							$( '#llms-delete-plan-modal .topModalClose' ).trigger( 'click' );

							window.LLMS.Ajax.call( {
								data: {
									action: 'delete_access_plan',
									plan_id: plan_id,
								},
								success: function( r ) {

									LLMS.Spinner.stop( $plan );

									if ( r.success ) {

										self.remove_plan_el( $plan );

									} else if ( r.message ) {

										alert( r.message );

									}

								}

							} );



						} );
					},
					closed: function() {
						// remove the id
						$( '#llms-delete-plan-modal' ).attr( 'data-plan-id', '' );

						// remove click handlers
						$( '#llms-confirm-delete-plan' ).off( 'click' );
					},
				} ).attr( 'data-plan-id', plan_id );
			}

		};

		/**
		 * Handle hiding & showing varios pieces of an access plan form
		 * This is bound to any form element with a "data-controller-id" property
		 *
		 * @param  obj  $el   jQuery selector for the changed form element
		 * @return void
		 * @since  3.0.0
		 */
		this.controller_change = function( $el ) {

			var id = $el.attr( 'data-controller-id' ),
				val = $el.val(),
				$form = $el.closest( '.llms-access-plan' ),
				$controls = $form.find( '[data-controller="' + id + '"]');

			if ( 'checkbox' === $el.attr( 'type' ) )  {
				val = ( $el.is( ':checked' ) ) ? val : 'no';
			}

			$controls.each( function() {

				var $c = $( this ),
					$els = ( 'SELECT' === $c[0].nodeName || 'INPUT'  === $c[0].nodeName || 'TEXTAREA'  === $c[0].nodeName ) ? $c : $c.find( 'input, select, textarea' ),
					equals = $c.attr( 'data-value-is' ),
					not_equals = $c.attr( 'data-value-is-not' ),
					action, operator;

				if ( typeof equals !== typeof undefined && equals !== false ) {

					operator = '==';

				} else if ( typeof not_equals !== typeof undefined && not_equals !== false ) {

					operator = '!=';

				}

				switch ( operator ) {

					case '==':

						if ( val == equals ) {
							action = 'show';
						} else {
							action = 'hide';
						}

					break;

					case '!=':

						if ( val != not_equals ) {
							action = 'show';
						} else {
							action = 'hide';
						}

					break;

				}

				if ( 'show' === action ) {
					$c.show();
					$els.removeAttr( 'disabled' ).trigger( 'change' );
				} else if ( 'hide' === action ) {
					$c.hide();
					$els.attr( 'disabled', 'disabled' );
				}

			} );

		};

		/**
		 * Determine if the access plan limit has been reached
		 *
		 * @return Boolean     true if it's been reached, false otherwise
		 * @since  3.0.0
		 */
		this.has_plan_limit_been_reached = function() {

			var limit = window.llms.product.access_plan_limit,
				curr = $( '#llms-access-plans .llms-access-plan' ).length;

			return curr >= limit;

		};

		/**
		 * Initalizes a new plan and adds it to the list of plans in the DOM
		 *
		 * @return void
		 * @since 3.0.0
		 */
		this.init_plan = function() {

			// don't do anything if we've reached the plan limit
			if ( this.has_plan_limit_been_reached() ) {
				return;
			}

			var $clone = $( '#llms-new-access-plan-model' ).clone()
				$existing_plans = $( '#llms-access-plans .llms-access-plan' ),
				$editor = $clone.find( '#_llms_plans_content_llms-new-access-plan-model' );

			// remove ID from the item
			$clone.removeAttr( 'id' );

			// give a temporary id to the editor element
			$editor.removeAttr( 'id' ).attr( 'id', '_llms_plans_content_' + this.temp_id );
			this.temp_id++; // increment the temp_id ID so we don't use it again


			// activate all elements
			$clone.find( 'select, input, textarea' ).each( function() {
				$( this ).removeAttr( 'disabled' ); // enabled the field
			} );


			$clone.find( '.llms-access-plan-datepicker' ).datepicker( {
				dateFormat: "mm/dd/yy"
			} );

			$clone.appendTo( '#llms-access-plans' );

			// rewrite the order of all elements
			this.update_plan_orders();

			$clone.find( '.llms-collapsible-header' ).trigger( 'click' );

			// check if the limit has been reached and toggle the button if it has
			if ( this.has_plan_limit_been_reached() ) {
				this.toggle_create_button( 'disable' );
			}

			// select2ify membership availability field
			window.llms.metaboxes.post_select( $clone.find( '.llms-availability-restrictions' ) );

			$clone.find( '[data-controller-id]' ).trigger( 'change' );

		};

		/**
		 * Control the status of the "New Access Plan" Button
		 * Enables / Disables the button and shows / hides the associated message
		 *
		 * @param  string status    enable or disable
		 * @return void
		 * @since  3.0.0
		 */
		this.toggle_create_button = function( status ) {

			var $btn = $( '#llms-new-access-plan' ),
				$msg = $btn.next( 'p' );

			if ( 'disable' === status ) {

				$btn.attr( 'disabled', 'disabled' );
				$msg.show();

			} else {

				$btn.removeAttr( 'disabled' );
				$msg.hide();

			}

		};

		/**
		 * Visually hide and then physically remove a plan element from the DOM
		 * Additionally determines if the New Plan Button should be re-enabled
		 * after deletion
		 *
		 * @param  obj   $plan jQuery selector of the plan element
		 * @return void
		 * @since 3.0.0
		 */
		this.remove_plan_el = function( $plan ) {

			var self = this;

			// fade out nicely
			$plan.fadeOut( 400 );

			// remove from dom after it's hidden visually
			setTimeout(function() {

				$plan.remove();

				// check if we need to reenable the create button and hide the message
				if ( ! self.has_plan_limit_been_reached() ) {
					self.toggle_create_button( 'enable' );
				}
			}, 450 );

		};

		/**
		 * Reorder the array indexes and the menu order hidden inputs
		 * Called by jQuery UI Sortable on sort completion
		 * Also called after adding a new plan to the DOM so the newest item is always
		 * persisted as the last in the database if no UX reorders the item
		 *
		 * @return void
		 * @since  3.0.0
		 */
		this.update_plan_orders = function() {

			$( '#llms-access-plans .llms-access-plan' ).each( function() {

				var $p = $( this ),
					$order = $p.find( '.plan-order' ),
					$editor = $p.find( 'textarea[id^="_llms_plans_content_"]' ),
					editor_id = $editor.attr( 'id' ),
					orig = $order.val() * 1,
					curr = $p.index();

				// de-init tinyMCE from the editor
				tinyMCE.EditorManager.execCommand( 'mceRemoveEditor', true, editor_id );

				// update the order of each field in the plan
				$p.find( 'select, input, textarea' ).each( function() {

					var name = $( this ).attr( 'name' );
					if ( name ) {
						$( this ).attr( 'name', name.replace( orig, curr ) );
					}

				} );

				// re-init tinyMCE on the editor
				tinyMCE.EditorManager.execCommand( 'mceAddEditor', true, editor_id );

				$order.val( curr );

			} );

		};

		// go
		this.init();

	};

	var a = new window.llms.metabox_product();

} )( jQuery );
