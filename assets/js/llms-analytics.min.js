!function(l){window.llms=window.llms||{};window.llms.analytics=new function(){return this.charts_loaded=!1,this.data={},this.query=l.parseJSON(l("#llms-analytics-json").text()),this.timeout=8e3,this.$widgets=l(".llms-widget[data-method]"),this.init=function(){google.charts.load("current",{packages:["corechart"]}),google.charts.setOnLoadCallback(this.charts_ready),this.bind(),this.load_widgets()},this.bind=function(){l(".llms-datepicker").datepicker({dateFormat:"yy-mm-dd",maxDate:0}),l("#llms-students-ids-filter").llmsStudentsSelect2({multiple:!0,placeholder:LLMS.l10n.translate("Filter by Student(s)")}),l('a[href="#llms-toggle-filters"]').on("click",function(t){t.preventDefault(),l(".llms-analytics-filters").slideToggle(100)}),l("#llms-custom-date-submit").on("click",function(){l('input[name="range"]').val("custom")}),l("#llms-date-quick-filters a.llms-nav-link[data-range]").on("click",function(t){t.preventDefault(),l('input[name="range"]').val(l(this).attr("data-range")),l("form.llms-reporting-nav").submit()})},this.charts_ready=function(){window.llms.analytics.charts_loaded=!0,window.llms.analytics.draw_chart()},this.draw_chart=function(){if(this.charts_loaded&&this.is_loading_finished()){var t=document.getElementById("llms-charts-wrapper");if(t){var a=new google.visualization.ComboChart(t),e=this.get_chart_data(),i={chartArea:{height:"75%",width:"85%"},colors:["#606C38","#E85D75","#EF8354","#C64191","#731963"],height:560,lineWidth:4,seriesType:"bars",series:this.get_chart_series_options(),vAxes:{0:{format:"currency"},1:{format:""}}};e.length&&((e=google.visualization.arrayToDataTable(e)).sort([{column:0}]),a.draw(e,i))}}},this.is_loading_finished=function(){return!l(".llms-widget.is-loading").length},this.load_widgets=function(){var t=this;this.$widgets.each(function(){t.load_widget(l(this))})},this.load_widget=function(a){var e,i=this,s=a.attr("data-method"),r=a.find("h1"),n=a.find(".llms-reload-widget"),d=LLMS.l10n.translate("Error");a.addClass("is-loading"),l.ajax({data:{action:"llms_widget_"+s,dates:i.query.dates,courses:i.query.current_courses,memberships:i.query.current_memberships,students:i.query.current_students},method:"POST",timeout:i.timeout,url:window.ajaxurl,success:function(t){e="success",void 0!==t.response&&(d=t.response,i.data[s]={chart_data:t.chart_data,response:t.response,results:t.results},n.remove())},error:function(t){e="error"},complete:function(t){"error"===e&&(d="timeout"===t.statusText?LLMS.l10n.translate("Request timed out"):LLMS.l10n.translate("Error"),n.length||((n=l('<a class="llms-reload-widget" href="#">'+LLMS.l10n.translate("Retry")+"</a>")).on("click",function(t){t.preventDefault(),i.load_widget(a)}),a.append(n))),a.removeClass("is-loading"),r.html(d),i.widget_finished(a)}})},this.get_date_diff=function(){var t=new Date(this.query.dates.end),a=new Date(this.query.dates.start);return Math.abs(t.getTime()-a.getTime())},this.get_chart_data_object=function(){var t,a,e,i,s=this,r=this.get_date_diff(),n={};for(var d in s.data)if(s.data.hasOwnProperty(d)&&"object"==typeof s.data[d].chart_data&&"object"==typeof s.data[d].results&&(t=s.data[d].results))for(a=0;a<t.length;a++)switch(e=this.init_date(t[a].date),n[i=r<=10368e6?new Date(e.getFullYear(),e.getMonth(),e.getDate()):new Date(e.getFullYear(),e.getMonth(),1)]||(n[i]=this.get_empty_data_object(i)),s.data[d].chart_data.type){case"amount":n[i][d]=n[i][d]+1*t[a][s.data[d].chart_data.key];break;case"count":default:n[i][d]++}return n},this.get_chart_data=function(){var t=this.get_chart_data_object(),a=this.get_chart_headers();for(var e in t)if(t.hasOwnProperty(e)){var i=[t[e]._date];for(var s in t[e])t[e].hasOwnProperty(s)&&0!==s.indexOf("_")&&i.push(t[e][s]);a.push(i)}return a},this.get_empty_data_object=function(t){var a=this,e={_date:t};for(var i in a.data)a.data.hasOwnProperty(i)&&a.data[i].chart_data&&(e[i]=0);return e},this.get_chart_headers=function(){var t=this,a=[];for(var e in a.push({label:LLMS.l10n.translate("Date"),id:"date",type:"date"}),t.data)t.data.hasOwnProperty(e)&&t.data[e].chart_data&&a.push(t.data[e].chart_data.header);return[a]},this.get_chart_series_options=function(){var t=this,a={};for(var e in i=0,t.data)if(t.data.hasOwnProperty(e)&&t.data[e].chart_data){var s=t.data[e].chart_data.type;a[i]={type:"count"===s?"bars":"line",targetAxisIndex:"count"===s?1:0},i++}return a},this.init_date=function(t){var a,e,i;return e=(a=t.split(" "))[0].split("-"),i=a[1].split(":"),new Date(e[0],e[1]-1,e[2],i[0],i[1],i[2])},this.widget_finished=function(t){this.is_loading_finished()&&this.draw_chart()},this.init(),this}}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
